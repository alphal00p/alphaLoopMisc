(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1361242,      24110]
NotebookOptionsPosition[   1347845,      23917]
NotebookOutlinePosition[   1348286,      23934]
CellTagsIndexPosition[   1348243,      23931]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Removing point - like integrable singularities with sectors", "Title",
 CellChangeTimes->{{3.8891695365797987`*^9, 
  3.889169557259115*^9}},ExpressionUUID->"29a280fe-2d08-499d-b4ab-\
7186b34f4522"],

Cell[CellGroupData[{

Cell["Resources", "Section",
 CellChangeTimes->{{3.889169560598584*^9, 
  3.889169581726581*^9}},ExpressionUUID->"253326fb-d795-4d3b-9176-\
bbcf67713fc9"],

Cell["Some maps", "Text",
 CellChangeTimes->{{3.8891695968012877`*^9, 
  3.889169597903495*^9}},ExpressionUUID->"7f977e97-bcde-4d03-bd80-\
a107c004d8df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConformalOneSidedMap", "[", 
   RowBox[{"q_", ",", "qx_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"q", "->", 
    FractionBox["qx", 
     RowBox[{"1", "-", "qx"}]]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.88865820580342*^9, 3.888658232372929*^9}, {
  3.888658347629004*^9, 3.888658352060645*^9}, {3.888658756174068*^9, 
  3.888658758003132*^9}, {3.888658870975379*^9, 3.888658872344925*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"b1ff0bdb-7eae-4493-b590-c66e631d7324"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConformalOneSidedMapJac", "[", "qx_", "]"}], ":=", 
  FractionBox["1", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "-", "qx"}], ")"}], "2"]]}]], "Input",
 CellChangeTimes->{{3.888658236586812*^9, 3.888658259539867*^9}, 
   3.8886583554222527`*^9, {3.888658474411201*^9, 3.888658475915661*^9}, 
   3.888658759631299*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"f432aad6-f3df-45e7-927e-58edb89e7033"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PolarCoordinates", "[", 
   RowBox[{"x_", ",", "y_", ",", "r_", ",", "\[Theta]x_", ",", "center_"}], 
   "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "->", 
     RowBox[{
      RowBox[{"r", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", "\[Pi]", " ", "\[Theta]x"}], "]"}]}], "+", 
      RowBox[{
      "center", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
    ",", 
    RowBox[{"y", "->", 
     RowBox[{
      RowBox[{"r", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "\[Pi]", " ", "\[Theta]x"}], "]"}]}], "+", 
      RowBox[{
      "center", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.888657802446349*^9, 3.888657917913052*^9}, {
  3.888658038482749*^9, 3.888658040940606*^9}, {3.888658266693531*^9, 
  3.8886582716819077`*^9}, {3.889150427686358*^9, 3.889150461406591*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"5bcc892c-5d4a-4c9f-8bcb-6572380038dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PolarCoordinatesJac", "[", 
   RowBox[{"r_", ",", "\[Theta]x_"}], "]"}], ":=", 
  RowBox[{"2", "\[Pi]", " ", "r"}]}]], "Input",
 CellChangeTimes->{{3.8886579251307583`*^9, 3.8886579861872253`*^9}, {
   3.888658043091467*^9, 3.888658043908296*^9}, {3.888658255754661*^9, 
   3.8886582789299707`*^9}, 3.888659313958357*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"bf4f705e-de8e-42f3-b87f-b0fd619fdd2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"InversePolarCoordinates", "[", 
   RowBox[{
   "x_", ",", "y_", ",", "r_", ",", "\[Theta]x_", ",", " ", "center_"}], 
   "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"r", "->", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", 
          RowBox[{
          "center", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
         ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", 
          RowBox[{
          "center", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         ")"}], "2"]}], "]"}]}], ",", 
    RowBox[{"\[Theta]x", "->", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"2", "\[Pi]"}]], 
      RowBox[{"ArcTan", "[", 
       RowBox[{
        RowBox[{"x", "-", 
         RowBox[{
         "center", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
        ",", 
        RowBox[{"y", "-", 
         RowBox[{
         "center", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}],
        "]"}]}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.889083220226129*^9, 3.889083331158937*^9}, {
  3.88908342325564*^9, 3.889083424944471*^9}, {3.8890834725294237`*^9, 
  3.889083473870493*^9}, {3.88908378474925*^9, 3.8890837895012093`*^9}, {
  3.889150236338046*^9, 3.889150295545433*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"48c23d42-6ea5-40f5-975a-5bf95a30b9e1"],

Cell["The integrand", "Text",
 CellChangeTimes->{{3.889169593179207*^9, 
  3.889169594871767*^9}},ExpressionUUID->"912c3033-d0f2-4bd5-9cbe-\
3ae931178f56"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Int", "[", 
   RowBox[{"x_", ",", "y_", ",", "etas_"}], "]"}], ":=", 
  RowBox[{"Times", "@@", 
   RowBox[{"Table", "[", 
    RowBox[{
     FractionBox["1", 
      RowBox[{
       RowBox[{"Sqrt", "[", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"x", "-", 
            RowBox[{
             RowBox[{
             "eta", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ")"}], 
          "2"], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"y", "-", 
            RowBox[{
             RowBox[{
             "eta", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ")"}], 
          "2"]}], "]"}], "-", 
       SuperscriptBox[
        RowBox[{"eta", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
         "2"]}]], ",", 
     RowBox[{"{", 
      RowBox[{"eta", ",", "etas"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8890829749580383`*^9, 3.889083103994317*^9}, {
  3.88915428626554*^9, 3.889154286377459*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"f6c5522f-3a5b-496d-8298-0acc26b5fbd7"],

Cell["And some UV normalising function", "Text",
 CellChangeTimes->{{3.88916962250056*^9, 
  3.889169630089662*^9}},ExpressionUUID->"7f941117-98bb-4812-9aa7-\
cfd1339eca5c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"UVNorm", "[", 
   RowBox[{"x_", ",", "y_", ",", "\[Sigma]_"}], "]"}], ":=", 
  RowBox[{
   FractionBox[
    SuperscriptBox["\[Sigma]", "2"], 
    RowBox[{" ", "\[Pi]"}]], 
   FractionBox["1", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"], "+", 
       SuperscriptBox["\[Sigma]", "2"]}], ")"}], 
     "2"]]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"UVNorm", "[", 
     RowBox[{"x_", ",", "y_", ",", "\[Sigma]_"}], "]"}], ":=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{" ", 
       RowBox[{
        SuperscriptBox["\[Sigma]", "2"], "\[Pi]"}]}]], 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         SuperscriptBox["y", "2"]}], 
        SuperscriptBox["\[Sigma]", "2"]]}], "]"}]}]}], " ", 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.889169637860593*^9, 3.889169650096305*^9}, {
  3.8891699192025137`*^9, 3.889169930203206*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"cbb1da12-1b0e-41fb-973d-44e91de8c297"],

Cell[CellGroupData[{

Cell["Integration wrappers", "Subsection",
 CellChangeTimes->{{3.780796722472328*^9, 3.780796737140688*^9}, {
   3.868853482215865*^9, 3.8688534869002237`*^9}, 
   3.869645382437626*^9},ExpressionUUID->"cd2140fb-6d57-40fa-9995-\
022c69e0b4c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rounded", "[", 
   RowBox[{"num_", ",", "prec_"}], "]"}], ":=", 
  RowBox[{"Block", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"res", "=", 
      SuperscriptBox["10", 
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"Log10", "[", "num", "]"}], "]"}], "-", "prec"}]]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Floor", "[", 
       RowBox[{"(", 
        RowBox[{"num", "/", "res"}], ")"}], "]"}], "*", "res", "*", 
      "1."}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.889174241016279*^9, 3.889174265125408*^9}, {
  3.889174344641679*^9, 3.8891743878166943`*^9}, {3.88917443176959*^9, 
  3.88917444155585*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"77d5a19d-e727-46e8-9bef-2a4c44fe4e82"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MyPrint", "[", "msg_", "]"}], ":=", 
   RowBox[{"Print", "[", 
    RowBox[{"Style", "[", 
     RowBox[{"msg", ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Monaco\>\""}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"7cc47982-df40-46fe-93bc-51ba74589d86"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MonitoredNIntegrate", "[", 
   RowBox[{"NIargs_", ",", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"TargetRes", "->", "Null"}], ",", 
       RowBox[{"StackPrints", "->", "False"}], ",", 
       RowBox[{"MonitorInterval", "->", "1."}], ",", 
       RowBox[{"Silence", "->", "True"}]}], "}"}], "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "AllNIargs", ",", "\[IndentingNewLine]", "iRegionMethods", ",", 
      "\[IndentingNewLine]", "tmpPrint", ",", "\[IndentingNewLine]", 
      "allBoundaryRes", ",", "\[IndentingNewLine]", "currInt", ",", "currErr",
       ",", "\[IndentingNewLine]", "startTime", ",", "currTime", ",", 
      "\[IndentingNewLine]", "LastUpdateTime", ",", "msg", ",", 
      "\[IndentingNewLine]", "res", ",", "\[IndentingNewLine]", "Npoints", 
      ",", "\[IndentingNewLine]", "SpecifiedMaxPoints"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SpecifiedMaxPoints", "=", 
      RowBox[{"(", 
       RowBox[{"MaxPoints", "/.", 
        RowBox[{"Select", "[", 
         RowBox[{"NIargs", ",", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Rule", "[", 
              RowBox[{"x_", ",", "y_"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
       ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"iRegionMethods", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Axis\>\"", ",", "\"\<Boundaries\>\"", ",", "\"\<Dimension\>\"", 
        ",", "\"\<Error\>\"", ",", "\"\<GetRule\>\"", ",", "\"\<Integral\>\"",
         ",", "\"\<Integrand\>\"", ",", "\"\<WorkingPrecision\>\""}], "}"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"tmpPrint", "=", "Null"}], ";", "\[IndentingNewLine]", 
     RowBox[{"allBoundaryRes", "=", "Null"}], ";", "\[IndentingNewLine]", 
     RowBox[{"currInt", "=", "0."}], ";", "\[IndentingNewLine]", 
     RowBox[{"currErr", "=", "0."}], ";", "\[IndentingNewLine]", 
     RowBox[{"startTime", "=", 
      RowBox[{"SessionTime", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"currTime", "=", "0."}], ";", "\[IndentingNewLine]", 
     RowBox[{"LastUpdateTime", "=", "Null"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Npoints", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"AllNIargs", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"NIargs", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"EvaluationMonitor", ":>", 
           RowBox[{"Npoints", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"IntegrationMonitor", ":>", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", "iregs", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"currTime", "=", 
               RowBox[{"SessionTime", "[", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"Or", "[", 
                 RowBox[{
                  RowBox[{"LastUpdateTime", "===", "Null"}], ",", 
                  RowBox[{
                   RowBox[{"currTime", "-", "LastUpdateTime"}], ">", 
                   RowBox[{"OptionValue", "[", "MonitorInterval", "]"}]}]}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"LastUpdateTime", "=", "currTime"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"allBoundaryRes", "=", 
                  RowBox[{"Association", "/@", 
                   RowBox[{"Transpose", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"#", "->", 
                    RowBox[{"Through", "[", 
                    RowBox[{"iregs", "[", "#", "]"}], "]"}]}], "]"}], "&"}], 
                    ",", "iRegionMethods"}], "]"}], "]"}]}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"currInt", "=", 
                  RowBox[{"Total", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"cell", "[", "\"\<Integral\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"cell", ",", "allBoundaryRes"}], "}"}]}], "]"}], 
                   "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"currErr", "=", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"Total", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"cell", "[", "\"\<Error\>\"", "]"}], "2"], ",", 
                    RowBox[{"{", 
                    RowBox[{"cell", ",", "allBoundaryRes"}], "}"}]}], "]"}], 
                    "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"Sow", "[", 
                  RowBox[{"<|", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"\"\<t\>\"", "->", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"currTime", "-", "startTime"}], ",", "0.1"}], 
                    "]"}]}], ",", 
                    RowBox[{"\"\<I\>\"", "->", "currInt"}], ",", 
                    RowBox[{"\"\<\[CapitalDelta]\>\"", "->", "currErr"}], ",", 
                    RowBox[{"\"\<\[CapitalDelta] [%]\>\"", "->", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    FractionBox["currErr", "currInt"], "]"}], "*", "100"}], 
                    ",", "0.001"}], "]"}]}], ",", " ", "\[IndentingNewLine]", 
                    
                    RowBox[{"\"\<\[CapitalDelta]Target [%]\>\"", "->", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}], "===", 
                    "Null"}], ",", "0.", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    FractionBox[
                    RowBox[{"currInt", "-", 
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}]}], 
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}]], "]"}], 
                    "*", "100"}], ",", "0.001"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "\"\<\[CapitalDelta]Target [\[Sigma]]\>\"", "->", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}], "===", 
                    "Null"}], ",", "0.", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    FractionBox[
                    RowBox[{"currInt", "-", 
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}]}], 
                    "currErr"], "]"}], ",", "0.1"}], "]"}]}], "]"}]}]}], 
                   "\[IndentingNewLine]", "|>"}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"msg", "=", 
                  RowBox[{
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"currTime", "-", "startTime"}], ",", "0.1"}], 
                    "]"}], "]"}], ",", "5"}], "]"}], "<>", "\"\<s : \>\"", "<>", 
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Npoints", ">", "1000000"}], ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    FractionBox["Npoints", "1000000."], ",", "0.001"}], "]"}],
                     ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    FractionBox["Npoints", "1000."], ",", "0.1"}], "]"}]}], 
                    "]"}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Npoints", ">", "1000000"}], ",", 
                    "\"\<M evals\>\"", ",", "\"\<K evals\>\""}], "]"}]}], ",",
                     "15"}], "]"}], "<>", "\[IndentingNewLine]", 
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumberQ", "[", "SpecifiedMaxPoints", "]"}], ",", 
                    
                    RowBox[{"\"\<( \>\"", "<>", 
                    RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{
                    FractionBox["Npoints", "SpecifiedMaxPoints"], "*", 
                    "100"}], ",", "0.1"}], "]"}], "]"}], "<>", 
                    "\"\<% )\>\""}], ",", "10"}], "]"}]}], ",", "\"\<\>\""}], 
                    "]"}], ",", "15"}], "]"}], "\[IndentingNewLine]", "<>", 
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"FortranForm", "[", "currInt", "]"}], "]"}], ",", 
                    "20"}], "]"}], "<>", "\"\< +- \>\"", "<>", 
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"FortranForm", "[", 
                    RowBox[{"rounded", "[", 
                    RowBox[{"currErr", ",", "3"}], "]"}], "]"}], "]"}], ",", 
                    "15"}], "]"}], "<>", "\"\< ( \>\"", "<>", 
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    FractionBox["currErr", "currInt"], "]"}], "*", "100"}], 
                    ",", "0.001"}], "]"}], "]"}], "<>", "\"\<% )\>\""}], ",", 
                    "12"}], "]"}], "<>", 
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}], "===", 
                    "Null"}], ",", "\"\<\>\"", ",", 
                    RowBox[{"(", 
                    RowBox[{"\"\< vs target \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    FractionBox[
                    RowBox[{"currInt", "-", 
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}]}], 
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}]], "]"}], 
                    "*", "100"}], ",", "0.001"}], "]"}], "]"}], "<>", 
                    "\"\<%\>\""}], ")"}]}], "]"}], ",", "20"}], "]"}], "<>", 
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}], "===", 
                    "Null"}], ",", "\"\<\>\"", ",", 
                    RowBox[{"(", 
                    RowBox[{"\"\< ( \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    FractionBox[
                    RowBox[{"currInt", "-", 
                    RowBox[{"OptionValue", "[", "TargetRes", "]"}]}], 
                    "currErr"], "]"}], ",", "0.1"}], "]"}], "]"}], "<>", 
                    "\"\<\[Sigma] )\>\""}], ")"}]}], "]"}], ",", "10"}], 
                    "]"}]}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"Not", "[", 
                    RowBox[{"OptionValue", "[", "StackPrints", "]"}], "]"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Not", "[", 
                    RowBox[{"tmpPrint", "===", "Null"}], "]"}], ",", 
                    RowBox[{"NotebookDelete", "[", "tmpPrint", "]"}]}], "]"}],
                     ";", "\[IndentingNewLine]", 
                    RowBox[{"tmpPrint", "=", 
                    RowBox[{"PrintTemporary", "[", "msg", "]"}]}], ";"}], 
                   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"MyPrint", "[", "msg", "]"}], ";"}]}], 
                  "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{"Reap", "[", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "Silence", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Quiet", "[", 
          RowBox[{"NIntegrate", "@@", "AllNIargs"}], "]"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"NIntegrate", "@@", "AllNIargs"}]}], "\[IndentingNewLine]", 
        "]"}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"res", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"Dataset", "[", 
        RowBox[{"res", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
         "]"}]}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.868793973862399*^9, 3.8687941984705772`*^9}, {
   3.868794233532502*^9, 3.8687942870298567`*^9}, {3.868794325434331*^9, 
   3.868794332608758*^9}, 3.8687943775253487`*^9, {3.868794569867579*^9, 
   3.8687945930505667`*^9}, {3.868795977152997*^9, 3.868796088905943*^9}, {
   3.8687961250222807`*^9, 3.868796127935347*^9}, {3.868796180378148*^9, 
   3.868796306776857*^9}, {3.868796356314558*^9, 3.868796425774209*^9}, {
   3.868796572601034*^9, 3.8687966368397293`*^9}, {3.868796676974374*^9, 
   3.8687966794651537`*^9}, {3.868796727678694*^9, 3.868796890759102*^9}, {
   3.8687969342712*^9, 3.868796991104327*^9}, {3.86879714061283*^9, 
   3.868797180991107*^9}, {3.8687972177743692`*^9, 3.8687974175188026`*^9}, {
   3.8687974544847918`*^9, 3.868797454744112*^9}, {3.868800222888*^9, 
   3.868800300429309*^9}, {3.868809056190894*^9, 3.868809075307605*^9}, {
   3.868809120069689*^9, 3.868809179883869*^9}, 3.868809221715722*^9, {
   3.86880996550205*^9, 3.868809982363654*^9}, {3.8891721266759987`*^9, 
   3.889172131263309*^9}, {3.889172169913265*^9, 3.889172173388751*^9}, {
   3.889172224514078*^9, 3.889172269748061*^9}, {3.88917232177909*^9, 
   3.889172335637344*^9}, {3.889172440493434*^9, 3.8891724584463043`*^9}, {
   3.889172794140483*^9, 3.889172805454246*^9}, {3.889173643176693*^9, 
   3.889173680019404*^9}, {3.8891737536861887`*^9, 3.889173776381514*^9}, 
   3.889173820895233*^9, {3.8891738840704603`*^9, 3.889173919481172*^9}, {
   3.889174001901919*^9, 3.889174040966827*^9}, {3.889174487687623*^9, 
   3.889174499614512*^9}, {3.8891762651863747`*^9, 3.889176287651483*^9}, {
   3.889176339748975*^9, 3.889176354628888*^9}, {3.889176405017213*^9, 
   3.889176456446751*^9}, {3.889176636721425*^9, 3.8891766367874527`*^9}, {
   3.889176683726337*^9, 3.889176683851028*^9}, {3.8891767452648287`*^9, 
   3.889176787510367*^9}, {3.889176893245614*^9, 3.8891770040647*^9}, {
   3.8891771200589952`*^9, 3.889177120324662*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"7919f062-ab78-4452-9f7b-09c7f60b71d0"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Sectoring", "Section",
 CellChangeTimes->{{3.889169560598584*^9, 
  3.889169590999608*^9}},ExpressionUUID->"156df554-c41e-4052-8a3b-\
58330a1eb7fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NInt", "[", 
   RowBox[{
    RowBox[{"rx1_", "?", "NumberQ"}], ",", 
    RowBox[{"rx2_", "?", "NumberQ"}], ",", " ", "etas_", ",", " ", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"sampleID", "->", "Null"}], ",", 
       RowBox[{"sectorID", "->", "Null"}], ",", 
       RowBox[{"useIntegrand", "->", "True"}], ",", 
       RowBox[{"\[Sigma]", "->", "Null"}], ",", 
       RowBox[{"IncludeMCFactor", "->", "False"}]}], "}"}], "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "polarSubs", ",", "\[IndentingNewLine]", "conformalSub", ",", 
      "\[IndentingNewLine]", "r", ",", " ", "\[Theta]", ",", "x", ",", "y", 
      ",", "\[IndentingNewLine]", "samplingID", ",", "\[IndentingNewLine]", 
      "singularities", ",", "\[IndentingNewLine]", "etaMinIndex", ",", 
      "\[IndentingNewLine]", "res"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{" ", 
        RowBox[{
        "conformal", " ", "map", " ", "to", " ", "go", " ", "from", " ", "r", 
         " ", 
         RowBox[{"in", " ", "[", 
          RowBox[{"0", ",", "\[Infinity]"}]}]}], ")"}], " ", 
       RowBox[{"to", " ", "[", 
        RowBox[{"0", ",", "1"}]}]}], ")"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"conformalSub", "=", 
      RowBox[{"ConformalOneSidedMap", "[", 
       RowBox[{"r", ",", "rx1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Specify", " ", "sampling", " ", "parameterisation", " ", "ID", " ", 
       "to", " ", "use"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"samplingID", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<sampleID\>\"", "]"}], "===", 
         "Null"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<sectorID\>\"", "]"}], "===", 
           "Null"}], ",", "\[IndentingNewLine]", "1", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"OptionValue", "[", "\"\<sectorID\>\"", "]"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"OptionValue", "[", "\"\<sampleID\>\"", "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"polarSubs", "=", 
      RowBox[{"PolarCoordinates", "[", 
       RowBox[{"x", ",", "y", ",", "r", ",", "rx2", ",", 
        RowBox[{
         RowBox[{
         "etas", "\[LeftDoubleBracket]", "samplingID", 
          "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "1", 
         "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "Compute", " ", "the", " ", "distance", " ", "of", " ", "all", " ", 
        "point"}], "-", 
       RowBox[{"like", " ", "singularities"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"singularities", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Sqrt", "[", "\[IndentingNewLine]", 
         RowBox[{"Evaluate", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"x", "-", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "etas", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[LeftDoubleBracket]", 
                   "1", "\[RightDoubleBracket]"}]}], ")"}], "2"], "+", 
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"y", "-", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "etas", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[LeftDoubleBracket]", 
                   "2", "\[RightDoubleBracket]"}]}], ")"}], "2"]}], ")"}], "/.",
              "polarSubs"}], ")"}], "/.", "conformalSub"}], "]"}], 
         "\[IndentingNewLine]", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "etas", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Find", " ", "the", " ", "closest", " ", "one"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"etaMinIndex", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"singularities", ",", 
          RowBox[{"Min", "[", "singularities", "]"}]}], "]"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{"If", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Or", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<sectorID\>\"", "]"}], "===", 
           "Null"}], ",", 
          RowBox[{"etaMinIndex", "==", 
           RowBox[{"OptionValue", "[", "\"\<sectorID\>\"", "]"}]}]}], "]"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ConformalOneSidedMapJac", "[", "rx1", "]"}], 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"PolarCoordinatesJac", "[", 
               RowBox[{"r", ",", "rx2"}], "]"}], "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"(", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"OptionValue", "[", "\"\<\[Sigma]\>\"", "]"}], "===",
                     "Null"}], ",", "1", ",", 
                   RowBox[{"UVNorm", "[", 
                    RowBox[{"x", ",", "y", ",", 
                    RowBox[{"OptionValue", "[", "\"\<\[Sigma]\>\"", "]"}]}], 
                    "]"}]}], "]"}], "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"OptionValue", "[", "\"\<useIntegrand\>\"", "]"}], 
                   ",", 
                   RowBox[{"Int", "[", 
                    RowBox[{"x", ",", "y", ",", "etas"}], "]"}], ",", "1"}], 
                  "]"}]}], ")"}], ")"}]}], "/.", "polarSubs"}], 
            "\[IndentingNewLine]", ")"}], "/.", "conformalSub"}], 
          "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "0."}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<IncludeMCFactor\>\"", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         FractionBox["1", 
          RowBox[{
          "singularities", "\[LeftDoubleBracket]", "samplingID", 
           "\[RightDoubleBracket]"}]], ")"}], 
        FractionBox["res", 
         RowBox[{"Total", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            FractionBox["1", "s"], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "singularities"}], "}"}]}], "]"}], "]"}]]}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "res"}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.88908310849095*^9, 3.889083112823091*^9}, {
   3.889083519472042*^9, 3.889083556790155*^9}, {3.8890835945467167`*^9, 
   3.8890835980327787`*^9}, {3.88908382197267*^9, 3.889083877734379*^9}, 
   3.8890885263506317`*^9, {3.889089731366922*^9, 3.8890898584819603`*^9}, {
   3.8890923940120163`*^9, 3.889092491707724*^9}, {3.889092524954199*^9, 
   3.8890925724078836`*^9}, {3.88909260337836*^9, 3.889092664253523*^9}, {
   3.8890926976320257`*^9, 3.889092988726819*^9}, {3.889093047487681*^9, 
   3.889093117561513*^9}, {3.8890933124165382`*^9, 3.8890933561094017`*^9}, {
   3.889093391298355*^9, 3.889093397254298*^9}, {3.889093434968906*^9, 
   3.889093482370976*^9}, {3.889093706318548*^9, 3.889093763897172*^9}, {
   3.8890938296244307`*^9, 3.8890938930382032`*^9}, {3.8890939271211853`*^9, 
   3.8890940611862307`*^9}, {3.889094140890045*^9, 3.889094220422119*^9}, {
   3.889094252890359*^9, 3.889094262512003*^9}, {3.8890943729470053`*^9, 
   3.8890944108771763`*^9}, {3.889094506948978*^9, 3.889094528841812*^9}, {
   3.889094571103586*^9, 3.889094583371318*^9}, {3.8891094908566427`*^9, 
   3.8891094931017647`*^9}, {3.889109559824418*^9, 3.889109567630975*^9}, {
   3.889149894922867*^9, 3.8891499758804398`*^9}, {3.889150094809985*^9, 
   3.889150116464679*^9}, {3.889150194240251*^9, 3.889150224503326*^9}, {
   3.88915030416114*^9, 3.889150354635058*^9}, {3.889150529400526*^9, 
   3.889150574158868*^9}, {3.8891506281236677`*^9, 3.889150699812064*^9}, {
   3.889150781290205*^9, 3.889150783726186*^9}, {3.889150871955274*^9, 
   3.8891508734509163`*^9}, {3.8891509232165337`*^9, 
   3.8891509719058723`*^9}, {3.88915103024376*^9, 3.889151031981111*^9}, {
   3.889151075578116*^9, 3.8891511048197107`*^9}, {3.889151145771121*^9, 
   3.889151165731874*^9}, {3.889151418301797*^9, 3.889151428081478*^9}, {
   3.889151460565515*^9, 3.889151501203595*^9}, {3.889152608697549*^9, 
   3.889152611175041*^9}, {3.889169670744738*^9, 3.88916990900334*^9}, {
   3.889170522313456*^9, 3.889170537628443*^9}, {3.889170907572421*^9, 
   3.8891709747307158`*^9}, {3.889171009647965*^9, 3.8891710304517317`*^9}, {
   3.889171075445477*^9, 3.8891710877429667`*^9}, {3.889171137474003*^9, 
   3.889171165986883*^9}, 3.889171226788233*^9, {3.889171267667159*^9, 
   3.889171269559235*^9}, {3.8891714879646587`*^9, 3.889171488105637*^9}, {
   3.8891748376592207`*^9, 3.889174864550581*^9}, {3.889174944329541*^9, 
   3.8891749820256844`*^9}, {3.889177257041925*^9, 3.889177364732616*^9}, {
   3.889177494104773*^9, 3.889177503455764*^9}, {3.889177970635158*^9, 
   3.8891780333482647`*^9}, {3.889178065681765*^9, 3.889178109199855*^9}, 
   3.8891782204403543`*^9, {3.889178737436803*^9, 3.889178760616624*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"8c7249b6-86b1-4625-a524-60dc23b6a905"]
}, Closed]],

Cell[CellGroupData[{

Cell["Testing", "Section",
 CellChangeTimes->{{3.889169560598584*^9, 3.889169590999608*^9}, {
  3.889169941568424*^9, 
  3.8891699423513603`*^9}},ExpressionUUID->"78d2c17f-ca01-44d2-876c-\
8bf94ffaf78d"],

Cell["\<\
We will be considering the following set of point-like singularities, which \
corresponds to this integrand\
\>", "Text",
 CellChangeTimes->{{3.889169953803516*^9, 3.88916997404809*^9}, {
  3.889170276163899*^9, 
  3.889170282914545*^9}},ExpressionUUID->"e61206d6-bc25-4ad1-ba1c-\
182d6d59ac8e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"singuarities", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], ",", "0"}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Int", "[", 
  RowBox[{"x", ",", "y", ",", "singuarities"}], "]"}]}], "Input",
 CellChangeTimes->{{3.889092927250174*^9, 3.889093007423177*^9}, {
   3.8890933778565197`*^9, 3.889093384439426*^9}, 3.889150128636901*^9, {
   3.88915037864368*^9, 3.889150379949235*^9}, {3.889150498808502*^9, 
   3.889150522921253*^9}, {3.889150788518402*^9, 3.889150802822682*^9}, {
   3.889170262353355*^9, 3.889170294800809*^9}, {3.889170410777272*^9, 
   3.88917041227075*^9}, {3.889171470452281*^9, 3.889171482441698*^9}, {
   3.8891748073981752`*^9, 3.889174809218965*^9}, 3.889176533148615*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"8cdbe3ab-f984-44d6-88a7-20b90c433251"],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   SqrtBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2"}], "+", "x"}], ")"}], "2"], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "y"}], ")"}], "2"]}]], " ", 
   SqrtBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "x"}], ")"}], "2"], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "y"}], ")"}], "2"]}]], " ", 
   SqrtBox[
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["y", "2"]}]]}]]], "Output",
 CellChangeTimes->{
  3.889150128955194*^9, 3.88915037524996*^9, {3.889150472999926*^9, 
   3.889150523311257*^9}, 3.8891507024343367`*^9, {3.889150785183083*^9, 
   3.8891508031229067`*^9}, {3.889151036376272*^9, 3.8891510636407213`*^9}, 
   3.889151111628503*^9, 3.889151233770849*^9, 3.889151436440063*^9, {
   3.88915148286915*^9, 3.8891515033115883`*^9}, 3.88915430613767*^9, {
   3.889170283895687*^9, 3.889170295066436*^9}, {3.8891714714082003`*^9, 
   3.889171490711405*^9}, 3.8891735243864717`*^9, 3.889174812580715*^9, 
   3.889176368545413*^9, 3.889176542296137*^9, 3.889176585142687*^9, 
   3.889176646549795*^9, 3.8891767037690277`*^9, 3.889176814009904*^9, 
   3.889177043220035*^9, 3.889177193222595*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"509851d9-78f4-4b21-bf56-8ff2088b1c6f"]
}, Open  ]],

Cell["\<\
But first, let\[CloseCurlyQuote]s make sure that we can integrand the \
normalise UV, i.e.\
\>", "Text",
 CellChangeTimes->{{3.889170304893778*^9, 3.889170328723257*^9}, {
  3.8891703671597633`*^9, 
  3.889170372782065*^9}},ExpressionUUID->"79cd71c1-fe06-4a45-9509-\
8ffd2dc53656"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UVNorm", "[", 
  RowBox[{"x", ",", "y", ",", "\[Sigma]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8891703310557013`*^9, 3.8891703310692863`*^9}, {
  3.889171492671348*^9, 3.889171492790475*^9}, {3.88917481497363*^9, 
  3.889174816641152*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"4181498d-69ed-42bf-b4cf-a99fea56cf08"],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["\[Sigma]", "2"], 
  RowBox[{"\[Pi]", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"], "+", 
      SuperscriptBox["\[Sigma]", "2"]}], ")"}], "2"]}]]], "Output",
 CellChangeTimes->{3.88917033142274*^9, 3.88917149297823*^9, 
  3.889173525939377*^9, 3.889174817010642*^9, 3.889176368619733*^9, 
  3.8891765423511343`*^9, 3.88917658515058*^9, 3.889176646756618*^9, 
  3.889176703779314*^9, 3.889176814047687*^9, 3.889177043251055*^9, 
  3.889177193263381*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"3b2eb2cf-e866-44fa-9015-2f7d4f537d12"]
}, Open  ]],

Cell["First without any sectors", "Text",
 CellChangeTimes->{{3.889170333410701*^9, 
  3.8891703373400583`*^9}},ExpressionUUID->"eaef15c8-799b-49dd-bfb3-\
4b782d747afc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MonitoredNIntegrate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NInt", "[", 
      RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
       RowBox[{"\[Sigma]", "->", "2"}], ",", 
       RowBox[{"sampleID", "->", "1"}], ",", 
       RowBox[{"sectorID", "->", "Null"}], ",", 
       RowBox[{"useIntegrand", "->", "False"}]}], "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], "\[IndentingNewLine]", ",", 
     
     RowBox[{"Method", "\[Rule]", "\"\<GlobalAdaptive\>\""}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"MaxPoints", "->", 
      SuperscriptBox["10", "4"]}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TargetRes", "->", "1."}], ",", 
   RowBox[{"StackPrints", "->", "True"}], ",", 
   RowBox[{"MonitorInterval", "->", "1."}], ",", 
   RowBox[{"Silence", "->", "True"}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{{3.889170342170885*^9, 3.889170353038385*^9}, {
  3.889170385469653*^9, 3.8891706150467443`*^9}, {3.889170645076499*^9, 
  3.889170774227298*^9}, {3.889170811954586*^9, 3.889170819657504*^9}, {
  3.8891715065549603`*^9, 3.889171509034176*^9}, {3.889174874751813*^9, 
  3.889174886561647*^9}, {3.8891749988904343`*^9, 3.889175014676711*^9}, {
  3.8891764717470703`*^9, 3.889176477175931*^9}, {3.889177401948431*^9, 
  3.8891774423837137`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"cc01f5db-5e84-4db2-a73d-0c01ca11e3dd"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"0.   s : 0.K evals      ( 0.2% )       0.9959780356272594   +- \
0.114           ( 11.537% )    vs target 0.402%    ( 0.\[Sigma] )  \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{
  3.889176477465993*^9, 3.889176542381813*^9, 3.889176585308498*^9, 
   3.889176646922874*^9, 3.889176703992566*^9, {3.88917677986028*^9, 
   3.8891768142323017`*^9}, {3.88917694833928*^9, 3.889177043397414*^9}, 
   3.889177193473071*^9, {3.889177436109379*^9, 3.889177442689025*^9}, 
   3.88917751666751*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"95adde58-ef81-4a92-8090-1094acfb9e14"],

Cell[BoxData[
 StyleBox["\<\"1.   s : 8.6K evals     ( 86.% )       1.                   +- \
6.64e-15        ( 0.% )        vs target 0.%       ( 0.\[Sigma] )  \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{
  3.889176477465993*^9, 3.889176542381813*^9, 3.889176585308498*^9, 
   3.889176646922874*^9, 3.889176703992566*^9, {3.88917677986028*^9, 
   3.8891768142323017`*^9}, {3.88917694833928*^9, 3.889177043397414*^9}, 
   3.889177193473071*^9, {3.889177436109379*^9, 3.889177442689025*^9}, 
   3.889177517643043*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"2de4a624-d8df-4953-a05d-06e4c216590d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9999999999999996`", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> {{<|
          "t" -> 0., "I" -> 0.9959780356272594, "\[CapitalDelta]" -> 
           0.11490816507549195`, "\[CapitalDelta] [%]" -> 11.537, 
           "\[CapitalDelta]Target [%]" -> 0.402, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.|>, <|
          "t" -> 1., "I" -> 1., "\[CapitalDelta]" -> 6.6414744775916244`*^-15,
            "\[CapitalDelta] [%]" -> 0., "\[CapitalDelta]Target [%]" -> 0., 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.|>}}, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 2, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 2], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 2, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 2], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
       1, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["t", 
                    Style[
                    "t", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "t"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "t"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["I", 
                    Style[
                    "I", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "I"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "I"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]", 
                    Style[
                    "\[CapitalDelta]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta] [%]", 
                    Style[
                    "\[CapitalDelta] [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta] [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta] [%]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [%]", 
                    Style[
                    "\[CapitalDelta]Target [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [%]"}, "ColumnHeader", 
                  True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [\[Sigma]]", 
                    Style[
                    "\[CapitalDelta]Target [\[Sigma]]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 
                  "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.995978"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.114908"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["11.537"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.402"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00000000000000664147"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{
                    TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = {
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{517., {47.134033203125, 52.865966796875}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{517., {47.134033203125, 52.865966796875}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{
  3.889170459844836*^9, {3.889170506954123*^9, 3.8891705483373117`*^9}, {
   3.88917060379557*^9, 3.889170615537241*^9}, {3.889170657030467*^9, 
   3.88917072523945*^9}, {3.8891707658810043`*^9, 3.889170776202874*^9}, 
   3.889170822588417*^9, {3.8891715045752363`*^9, 3.8891715108045692`*^9}, 
   3.889172340305304*^9, 3.88917246270269*^9, 3.889173528439952*^9, 
   3.889173582243908*^9, {3.8891736377653933`*^9, 3.889173684235421*^9}, {
   3.889173758263735*^9, 3.889173780158792*^9}, 3.88917382592767*^9, {
   3.889173888070092*^9, 3.8891739233590527`*^9}, {3.889173992192651*^9, 
   3.889174044416789*^9}, {3.8891744918066177`*^9, 3.88917450337854*^9}, {
   3.889174878556415*^9, 3.889174888607195*^9}, {3.889175002434231*^9, 
   3.88917501633127*^9}, 3.889176293450967*^9, {3.889176349394409*^9, 
   3.889176369835115*^9}, {3.889176475059949*^9, 3.889176478634173*^9}, 
   3.889176543718171*^9, 3.889176587241637*^9, 3.889176649049979*^9, 
   3.8891767063612947`*^9, {3.889176781435519*^9, 3.889176816612876*^9}, {
   3.889176949479127*^9, 3.889177045284795*^9}, 3.889177196133552*^9, {
   3.889177438238471*^9, 3.889177444813352*^9}, 3.889177517830166*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"8fe15030-1d66-4c5f-b51e-7cb9df8da18d"]
}, Open  ]],

Cell["Now putting in the sectors:", "Text",
 CellChangeTimes->{{3.889170333410701*^9, 3.8891703373400583`*^9}, {
  3.889170788591672*^9, 
  3.889170794824222*^9}},ExpressionUUID->"cbe231e0-4f15-4a61-ab53-\
828f7638aa00"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MonitoredNIntegrate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"NInt", "[", 
        RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
         RowBox[{"\[Sigma]", "->", "2"}], ",", 
         RowBox[{"sampleID", "->", "1"}], ",", 
         RowBox[{"sectorID", "->", "1"}], ",", 
         RowBox[{"useIntegrand", "->", "False"}]}], "]"}], 
       "\[IndentingNewLine]", "+", 
       RowBox[{"NInt", "[", 
        RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
         RowBox[{"\[Sigma]", "->", "2"}], ",", 
         RowBox[{"sampleID", "->", "2"}], ",", 
         RowBox[{"sectorID", "->", "2"}], ",", 
         RowBox[{"useIntegrand", "->", "False"}]}], "]"}], 
       "\[IndentingNewLine]", "+", 
       RowBox[{"NInt", "[", 
        RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
         RowBox[{"\[Sigma]", "->", "2"}], ",", 
         RowBox[{"sampleID", "->", "3"}], ",", 
         RowBox[{"sectorID", "->", "3"}], ",", 
         RowBox[{"useIntegrand", "->", "False"}]}], "]"}]}], ")"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], "\[IndentingNewLine]", ",", 
     
     RowBox[{"Method", "\[Rule]", "\"\<GlobalAdaptive\>\""}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"MaxPoints", "->", 
      SuperscriptBox["10", "5"]}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TargetRes", "->", "1."}], ",", 
   RowBox[{"StackPrints", "->", "True"}], ",", 
   RowBox[{"MonitorInterval", "->", "5."}], ",", 
   RowBox[{"Silence", "->", "True"}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{{3.889170342170885*^9, 3.889170353038385*^9}, {
   3.889170385469653*^9, 3.8891706150467443`*^9}, {3.889170645076499*^9, 
   3.889170774227298*^9}, {3.889170826538993*^9, 3.8891708583274612`*^9}, {
   3.8891712915867863`*^9, 3.889171294522946*^9}, {3.88917156509757*^9, 
   3.8891715669003677`*^9}, {3.889171602081498*^9, 3.889171645033245*^9}, {
   3.8891716779384937`*^9, 3.889171678443944*^9}, {3.889171804135744*^9, 
   3.8891718091444273`*^9}, {3.8891745363428183`*^9, 3.889174537701662*^9}, {
   3.889174614228941*^9, 3.889174617687632*^9}, {3.8891746779600983`*^9, 
   3.8891746860650597`*^9}, {3.889174732676783*^9, 3.88917476969807*^9}, {
   3.889174890397985*^9, 3.8891749082634172`*^9}, {3.889175021445758*^9, 
   3.889175023403798*^9}, 3.889176483324572*^9, {3.8891774517190104`*^9, 
   3.88917746022099*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"7f105641-cf26-45b9-99d4-86efb2777af5"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"0.   s : 0.K evals      ( 0.% )        0.9104590662344517   +- \
0.657           ( 72.18% )     vs target 8.954%    ( 0.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.8891775383079987`*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"d26ea824-6de5-4829-9684-ac1c57913c91"],

Cell[BoxData[
 StyleBox["\<\"5.   s : 16.1K evals    ( 16.1% )      1.0000330860754572   +- \
0.00051         ( 0.051% )     vs target 0.003%    ( 0.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.8891775433026543`*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"5edbfa9b-9a36-4b19-a5e5-e3c5aaeded48"],

Cell[BoxData[
 StyleBox["\<\"10.  s : 31.7K evals    ( 31.7% )      0.9997401117785165   +- \
0.000174        ( 0.017% )     vs target 0.026%    ( 1.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.889177548318768*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"30d91b3c-355d-4065-95fa-92ccbb615fab"],

Cell[BoxData[
 StyleBox["\<\"15.  s : 45.6K evals    ( 45.6% )      1.000111320603053    +- \
0.000101        ( 0.01% )      vs target 0.011%    ( 1.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.889177553329254*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"f9052631-a90e-4be6-9cc9-35a5b038c93c"],

Cell[BoxData[
 StyleBox["\<\"20.  s : 59.1K evals    ( 59.1% )      0.9999383115905591   +- \
0.0000752       ( 0.008% )     vs target 0.006%    ( 0.8\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.889177558353306*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"948c5ae9-5dd6-46b5-a8c0-5a3fc51e918b"],

Cell[BoxData[
 StyleBox["\<\"25.  s : 72.1K evals    ( 72.1% )      0.9998788626653645   +- \
0.0000579       ( 0.006% )     vs target 0.012%    ( 2.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.8891775633667307`*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"cf60c1d7-5236-4b29-a55d-ca2f0b574de8"],

Cell[BoxData[
 StyleBox["\<\"30.1 s : 85.6K evals    ( 85.6% )      0.999979655832621    +- \
0.000045        ( 0.005% )     vs target 0.002%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.889177568378687*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"e23496dd-6282-4b55-9940-8c1a669cf3e6"],

Cell[BoxData[
 StyleBox["\<\"35.1 s : 99.K evals     ( 99.% )       1.000008525107667    +- \
0.0000366       ( 0.004% )     vs target 0.001%    ( 0.2\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889171614841887*^9, 3.8891716452601852`*^9}, 
   3.8891716787000427`*^9, 3.8891718093498287`*^9, 3.889172149179111*^9, 
   3.8891721804121523`*^9, 3.8891722452458572`*^9, 3.889172303017614*^9, 
   3.889172345207244*^9, 3.889172466739378*^9, 3.889172809587846*^9, {
   3.889174511410508*^9, 3.889174538056779*^9}, 3.8891746178720207`*^9, {
   3.889174679838277*^9, 3.889174686503252*^9}, {3.8891747605002832`*^9, 
   3.889174769963674*^9}, {3.889174893717793*^9, 3.889174908465708*^9}, 
   3.889175023708353*^9, 3.8891763699692507`*^9, 3.889176483932948*^9, 
   3.8891765438464937`*^9, 3.889176587697274*^9, 3.889176649309884*^9, 
   3.889176706962088*^9, 3.889176817191689*^9, 3.889177045797853*^9, 
   3.889177133056452*^9, 3.889177196761017*^9, 3.8891774615301323`*^9, 
   3.889177573391282*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"4df76733-e9a5-4b3d-ada4-fe0b2f72618a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0000154261858925`", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> {{<|
          "t" -> 0., "I" -> 0.9104590662344517, "\[CapitalDelta]" -> 
           0.6571678749061984, "\[CapitalDelta] [%]" -> 72.18, 
           "\[CapitalDelta]Target [%]" -> 8.954, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.1|>, <|
          "t" -> 5., "I" -> 1.0000330860754572`, "\[CapitalDelta]" -> 
           0.0005105517176697395, "\[CapitalDelta] [%]" -> 
           0.051000000000000004`, "\[CapitalDelta]Target [%]" -> 0.003, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.1|>, <|
          "t" -> 10., "I" -> 0.9997401117785165, "\[CapitalDelta]" -> 
           0.0001745679898303676, "\[CapitalDelta] [%]" -> 0.017, 
           "\[CapitalDelta]Target [%]" -> 0.026000000000000002`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 1.5|>, <|
          "t" -> 15., "I" -> 1.000111320603053, "\[CapitalDelta]" -> 
           0.000101980967088435, "\[CapitalDelta] [%]" -> 0.01, 
           "\[CapitalDelta]Target [%]" -> 0.011, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 1.1|>, <|
          "t" -> 20., "I" -> 0.9999383115905591, "\[CapitalDelta]" -> 
           0.00007523379219869463, "\[CapitalDelta] [%]" -> 0.008, 
           "\[CapitalDelta]Target [%]" -> 0.006, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.8|>, <|
          "t" -> 25., "I" -> 0.9998788626653645, "\[CapitalDelta]" -> 
           0.00005798336533376406, "\[CapitalDelta] [%]" -> 0.006, 
           "\[CapitalDelta]Target [%]" -> 0.012, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 2.1|>, <|
          "t" -> 30.1, "I" -> 0.999979655832621, "\[CapitalDelta]" -> 
           0.000045092895977245346`, "\[CapitalDelta] [%]" -> 0.005, 
           "\[CapitalDelta]Target [%]" -> 0.002, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 35.1, "I" -> 1.000008525107667, "\[CapitalDelta]" -> 
           0.00003660537524156839, "\[CapitalDelta] [%]" -> 0.004, 
           "\[CapitalDelta]Target [%]" -> 0.001, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.2|>}}, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 8, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 8], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 8, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 8], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
       1, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["t", 
                    Style[
                    "t", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "t"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "t"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["I", 
                    Style[
                    "I", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "I"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "I"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]", 
                    Style[
                    "\[CapitalDelta]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta] [%]", 
                    Style[
                    "\[CapitalDelta] [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta] [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta] [%]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [%]", 
                    Style[
                    "\[CapitalDelta]Target [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [%]"}, "ColumnHeader", 
                  True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [\[Sigma]]", 
                    Style[
                    "\[CapitalDelta]Target [\[Sigma]]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 
                  "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.910459"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.657168"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["72.18"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["8.954"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["5.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.00003"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000510552"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.051"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.003"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["10.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.99974"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000174568"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.017"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.026"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["15.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.00011"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000101981"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.01"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.011"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["20.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.999938"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0000752338"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.008"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.006"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["25.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.999879"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0000579834"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.006"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.012"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["30.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.99998"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0000450929"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.005"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.002"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["35.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.00001"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0000366054"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.004"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.001"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{447., {128.134033203125, 133.865966796875}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{447., {128.134033203125, 133.865966796875}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.889170841375326*^9, 3.889170859205703*^9}, 
   3.889171194714121*^9, 3.889171289078437*^9, 3.889171326638012*^9, 
   3.889171555106483*^9, {3.889171598910079*^9, 3.8891716379464893`*^9}, 
   3.889171674040464*^9, 3.8891718022369423`*^9, 3.889171879961794*^9, {
   3.889172176548582*^9, 3.889172185460247*^9}, 3.889172249456395*^9, 
   3.889172308415738*^9, 3.889172350957427*^9, 3.8891724918415956`*^9, 
   3.889172813413125*^9, 3.889174534390142*^9, 3.8891745932800903`*^9, {
   3.8891746624599247`*^9, 3.889174684491243*^9}, 3.889174719569542*^9, 
   3.889174761908701*^9, 3.889174801223402*^9, 3.889174902522787*^9, 
   3.889174941054802*^9, 3.8891750563320704`*^9, 3.889176402950802*^9, 
   3.88917651992325*^9, 3.8891765499644213`*^9, 3.889176614415012*^9, 
   3.8891766868483887`*^9, 3.889176750958068*^9, 3.889176861587006*^9, 
   3.8891770811333303`*^9, 3.8891771753237658`*^9, 3.8891772469301243`*^9, 
   3.8891774712670937`*^9, 3.8891775738398333`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"b469589c-31b6-4d1a-b5a1-ea48f104824b"]
}, Open  ]],

Cell["\<\
Still works!\[LineSeparator]So now let\[CloseCurlyQuote]s put in the actual \
integrand with the three integrable singularities! But let\[CloseCurlyQuote]s \
first look at the various singularities \
\>", "Text",
 CellChangeTimes->{{3.889171332036602*^9, 3.889171387967784*^9}, {
  3.8891750352895*^9, 
  3.889175038357318*^9}},ExpressionUUID->"c643a582-41a8-44d4-a113-\
9709132b8531"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Int", "[", 
    RowBox[{"x", ",", "y", ",", "singuarities"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "10"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8891713896139317`*^9, 3.8891714545595284`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"50599283-1a4b-4291-8828-636cb1e4125f"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
L4Ij3i4R79jGRwKs9sD4NcK+hRgP9PumDam3ff71lm18JMAqzxwRDe5Mx+8L
4T2eng7qi3uDeuJ8v2qjhKoNnceD72DEJfby5Mk7qBfoMZAkmPM5uhnTCfnL
aVnq99NZtZhOyLcKpiuPNP+tf/7/x3cCrLJ1na6ncgqY6YO2vm4ypXgNsJzh
a7imkzk1rsiJg6MFuS6vb//uuCb8Dfff7tUxU73WjL/hyly/xbWkoYNZZVO9
J9GgB6+wjm9p/Z030WCAgevdwAwvjdhmxlB1QM9VZpiZ9m6csqvMeFZG+K2K
3fNrmcXjR5oTDDhYwK13PmPV9DRheIdF3P1jY3yshKLcTWqWHzA88JiWzWpv
bLqYAL0xNxlVLuQL/dujBp4WMhOzR25frU3A66/NBg9DNv3B9wXukzlyNDDg
C/6G+6yi7ic3p31lvpq6ntzh+gl5eusxe6Pdrfgb7h/0eX2pJLYVf8PV2evq
Bt7nragj8F1XO69ImdLwcD9wdVpIRn8rszOrrKc2oRPvG+mGH5nITTmEtz7Z
5/m7u5sRnvdNQ9W1F3nhm1unwnza8f/x/9KurdrO24bhgJdGa0V4hXzB33AN
c74bab+lH+MHvmtvdeS3kV783sA1r4W0tOS1YXjIJ0c2SHt15Izgc+F+SRCf
iU0HfR5w7fv2KZJH+/H/ge9RLeYZ7B/F8PD8qyc5Og7b0v+Hq5SmjsthRZov
gU/l8rNu9O7A33DfOeZDT9mHTuZ3e2+ijOov5IduiklOtK3D8HA/1nZmwmSp
JgwHXDRk0yzDG/X4G66PTpV7Zf9tHyGfH3vEcaE2gZu19H38NeMD1UxL2OA0
Do5RLC/W27MC3fSamHbF0VSD2nFYXpb+qAhderkGeekQ52xVV17W4eInOiP2
9cihXIxNbgy6mFqDz1XR5ClIMOBnZT/YOH3xyxIMD9zSTvHigsklWL6AO11i
mTdG5mD4cQ7jgwxqBVgC3BO+mn3OwnIB7Y7SzUU3L5V3Yz0J5WyhzfH+Kl46
HoH/63Z1l/ITo+MR4KpRUifq73VjvBBPw6azSb8yOFnwG/7vouWcRFn5Pswn
0K7t2n1QaCzgO/brIH+Jbji0o6JcmAXfF+rnbw5ON82//8LfcH/tCU3uk0d+
Y/sFvJs/oJQ/l+ZXuH9Gz6KrZPN3/L7wvYqFagVWufZg/QZcN+RoxG2X3xge
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
Rpkjis2RYm1UtzqS/sncA0HigVS32yT9fFNVlI4ZUt1KYsdUXYO4WLovBEzi
p2SibrDuN8HJq2GBZy7qdnXWWF3CV07W3NMVbxqUirBdhvXT8RdV71c/KUN9
4PqabT6hmDz32L7nHS9m0PGyH3nuumlFimor6XzCZfJcx9dy1fNPUn02k+c+
Carf896D6iNmMXq5VpGTZaarHl2dQPVpIevM6qORTS5GVJ848p1HeEMsmrdR
fbaS9P50fKhTeyUV9cH160VSpQ++ZaA+HabjHGXe8bCyH3NNvJRL65+rZDye
wjZvANf0qy+ifdWoDlNJ/Fd6+Zun3KT5pI3Eb9gbf/aCHi1fiWRd0qNVcvFI
Ka1/bFs4pFRFeVgXNm4vWOb5FHU4QtZvw33TJZNDaP2zUI0jwUCTm9WzjbvB
N4HWPynXuMMMNCewhAttvrjk0nkDBxzHSw5ta01BHY5/5lJyDeJjje1QE3Ns
zkAdOmCegW1+IJnEv33Xp9Wru+j8AFxTfoVKLVSl9bAmib/pcf2Lm5y0Hl5M
1mMdCh+PKmyh8+QjW7nKEr7ysspc86PfWNN2p4isz+5+p/48eTNtd3wiOHVr
FXlZ25buG/82nbY7Sz+MP1qrKMjyaNeRT5gXiTrA+vW8ssr6a89jUYcykt7n
S9q8dPYls43LBFjnnkgbK3+g/ZDjZNwtxTY/sIQ8t+7TnbGw3bQfMmb/73Ov
pa8J81tJ11ngqnPFxy5Bk/ZD/MlzOaM41PsEaT/kSgjPPZl3/KxJiufPboil
/ZAtxL5I13nz22Bt2g8Rm8QzVVWUn2XtV/Ltzg+6DhW0dgK/qugklqvVM764
ZSGoz7WvfAdqEyayso68q0nRCEd9tvnz+RhoTmQ5tAqN1zWKRn1g3f/9wdJn
p1LiaT8NzlFjG9cHkud+7JJt33j/BZ1/I8/9ddTbb69AMOqzlTw33Kn0kSrj
j/rAda79FIU/wt6oT/s/9kpCLGuBs/4Bxu6oTxKxQxC8GS4+bQ2dP7G9xJuT
8FWQZZAq2pMyYE/77YU8x2t/CrO2eVZNOrnLH/Ux/kd/YVbpUIbC7xtBdH7J
nCfEwFuYtVc4eMR8RSjqs+2f7yLMKigK37b7bjiOgxSg3EsZxek5RmF7Nv2f
7yXMurSJP+ThcbpuO65swjWZd5NYnXoinHOUYv7PuL6JbVzvQNL/rUjW5H19
ANWZpL9AZQv3DCU/1Pk4Sf/vdGktGx66rqpC0m9dNkl6h4IH6ozldQ9jc2eZ
K+o8laRfv62pWKnvAeo8Uvpv+ouYwWk9hbao8/bR8atcdURZP8XdcrMFvFBn
hX/KkSgrv/qswalfT1HnGTHj78pMEGUZ2243+yTlT+1w/inXIqyOCnWTPK1A
1LnrzPh3CREiLI5rf6z+XH5G56lIeuUD9m4QzgxGnVNnjBdTVRdhxb9K/tzl
Esw2HyjKGmYb128j6Ve5Ymb06LMX6ryUpD9GVyv7kvQj1Hk6Sf/YSHUQN6c7
6sxB0v/Nv8FY94cLnS8l6X9UUPGLQ9sRdYarnNyFKzOe26HOyST93qNnzFJi
6PwJ51I+IdUyMdaNjcunOjXScT3Y9/UOL0lZ9Hd8DTpXNPFq1F4TYw0Kes7X
6HyEOsP+r3Kbt8NfdLxR52cevP4Gs8RYArcHV7rdeIo6O/5TvkRZGn3SytnP
fFDnayS99Z4WktsMff7PuP4X27ge0r/z6TmHLYVuqHMXSf8VMf0NASqudD6Q
pP9aorLr3fPOqHMqSb+3mEheVY8Dnaci6eexXRNQo2CHOjuQ9Be8n2T/850V
6jaVjNOriP0z8B62/VCgpw4ZPxp8PLHJMaIVddMmvMDj8+JSuQrkwWR8epFH
uXzLbLrOq0bGXyVkfxPEP37g3/Hai96K5fzZoxge7MeKyL4kCG9Axjvam12X
WiX/wucC/yQkltniUYd8ARlPXWK+C3jP/oTxw/iFM0Vp96B2PYaH66ezxnJD
pz/gbxEy7vgh5xU8u6wK+VTSD+S7NKL2sqYcOfRjWTGOk9IeU25P+kuXdVbO
dA6uRA79Olf+S4f/eFRivvrX7oeblU36txCeQ+Xf/kaoTqWv9xjVH/pFvd+L
dO640ucak/bXUvZAcBXrHXLoPxyQa+NO8cyh4x0yfyK1OWd4JKsTdQO7kQUK
H5y0Depov53Mq2S7ZIptfVWD5Xr/7X/nf17NMTC9Fk/tTKLBbmLZ1LP3n9P2
HexMJSZ0zLia3YLcmYzT+XtdQ8aGmzA9EJ5jwhRDbsF2fC/IVyvr0wXbOT8h
h/RWvVmoURFQh/GDffSlp1dUu6SbMBxwrZlcsVWcnCyoHyA/v7esrBf+UIz1
xkoyj9FyRfDm6R2l+Fywiwjt1Rj70f6Z6gnzu28uLpfcTOfZ4P/MkxKlcgwb
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

    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1: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
CJ7r/ZLPqG0rfFVh7uIOjX8Qn6FwLLhvYc5pqPBYfOdoLilGczYcO1r/2zIY
v5mbQ2Lfnab+/vp9j+QM/F72LetEuJfw7cLThY8Rvl94pvBQ4aeFXxE+JbeO
nSN8ovATwrPw93Lr4dnCxwk/xDsVPkn4SeGXhQcI3yf8uPAthXmPhyUPU/+N
wvfiO+keFiTbeoj6r1f/NPVvWNrmnaD/D5KcyrHqrxsdUxBb4Hfgu8BvFAnj
w2Bbjsms7/Bh4C7wafBdwStz+5aMIZbBFuPLfJd0PmsHfcz+Pi7NQ2yEv7Ii
zU//suRXcc7Hk37omvb1F7n1FvHdgmRT3imsa9A5ITi265J017TMXApr4o+0
l9nTPJt9M+sfdNJ+SS9tHH0ufBP2Nb4H+/CE5O+NSvZzYFrz+Bg8p/mF/Sli
6Q2TLeyd1uostT6ZOSjiQXyv+kkHsJ7f0TVsHHzf1+f2DZ/ObF+x28R3vBt0
I5gxB+S+XnTh2Mw+6pf6vU0w9/Vzbt+1X+qH/8R3gqdanPyo/ZNfVE99hwTv
lyN4FoV5NNbVR7n1Df3omlXJ5sJlobO5R/QverdXekcXZfa1OG+j9H47C3+S
2dc8QO3TzDaym9qPVT/Dbau20fBT2Gns/EVpHnzu//zl5NNdmJkPZJ/CsaI7
TkvPlrV0YWEOEq4G/3xC5t/4tvi48CRc49g0f9+E4R6PT9fQVPjdwrq5jfZN
jWAe5tbcXMvJmXmq8Zn9MTgx3v0pCcObEVPflMYPTeeFd+VYeIDJmdcw7wUf
CX3zWPLxiCd+KszvDU3n4tqeS89nflp7PD98LXhO+M7LM7+bb3Lzk7w/fIaa
ad1uns7BuXjXnxX2h2ckW90jvdPvc3MIcAlPoUeyFL8U3mvYdPj5QelZDUvr
n+dfCZ4D+wznPDqzvf4n2Tvs3tWZbSjXXTPYV8SOs//OS2uJ9zImvaN+CROL
RfyEitc5XDLzwycX6j8/sx44o3DfI4XXJ3PCF+NDjUjruUnwPuYd/ZiZR+U5
P5BZb3CtUxJmr16R+flybVOSr/hBYX71lsz8BnviyvQM5yUbh5/Afr8msy5i
vqvSnNcku4Z941nyTOum/XRFOtf9ya6h6+DYOVcz3k1mf69uxbHdjZnjuy/S
/loivCizP8z4dZKeQd9wPVPSNUxKmHN0SHPCHaAnJqf1yTlvS/sIn5m9xxqC
Oyf2waay9m9P6x8+ltgWTpg1Bl6YdODU1A/vTKx5cLDvg33Ftt6RxqAnh6Tz
cv3N05j/9FhmfnhP4TrBe6tp8L1MS+9uYrpWrnNeumZ0BXww/tJVVcdu5CAO
TjHCrWk9ox9uyKwT7kvz8L7RX+gx4mXyONMz+89w+9PTev48jXm/4uthPbVM
74f3VE1r+9q0nh9L/ew31sjEdM308T90HTYB24DNZZ3OSmt1ReGY5qDg/c6z
wT/EBmIL8feRbyX8W+Zx6ATmm5nmPDph9CzxzROZY5xdg/G1yTaRC8FmHF/4
OLiNwYX3USb72a/qHAW81W/J18LnghN5NDNf/ZV+P5I5Llue7os5+6f75Tmc
E+0PvhzNrzB+C/UPSfe7IsU33Bu2/r7c7xZfknXxelobwxJGNzdN6wQd/nNm
Pv1/vDK4Tbo2eNglhW0SOhbfplvaU8R0SzOPgZO9Lfcc8O4dNP+czPmCZsF8
cqfg9/Vy5rXO+n0vvacjE2btowvnp/XDemO94nfuoePfyeznD03vnXnIpbyS
rvmnZC/YX9ii2WnvEPsw5ufCz2Rueg48T3hYjsHWDU5rvm7CPF9iRnIrF2Nb
Ct8LGD2wKO1H4qn/8i/CNyb7QczXIsVWdYNzTtgreAz2xCdpX+DXoduwU3CW
i9P7Qveg1+B51+A3ZuagNszNrw9K8TU6jhh7u+C1Bb++g7CGVnaEh9S62VG/
L44+L3sSnovY5avMHDfzw92PCl6b36T1eUPuceQf4Fe/zpwLYD8uTPuXa8CP
WSL8V+b7aZ3W0c/p/RBH/5J5nZL/Jg8+rur1vjzttVWZc5PkJdsF679dgtcN
z/z53Of9Ie0LjmcecusjMx/PscS1q9O7+PB/OHM8R+yNv3hRdM78Ick2wbmq
kVVz9HD1jyafAR2Brv1L9/xl5hxEEa0zQrQ/+HtmG3pb1XHiB7ljV9Zy++Bx
jIcnpLZggPAo9V1f/H+szDPj2WHzu+Weh/n20/ibhKcTCxPPVM0X7JHbH4e3
6JrGMBZfvUbV/vq6ud9h36p5kn/U17FwzcEY9GvVfnU1xbPwtfC25HqRIWEk
v1lbazQmpuf+TWGOAO4LXYXOQj+flbggOCF8SewHtuPvzNewldroaA68KMx1
zxJ+p+o8+2z9/kbyr+A48TjhqRo3X3h9yfHoQuxt1bUR7NXlhWs1eI+8T+6N
ezyQ3JGOr0nMJ9lAsr5anaprC8jj3151f910TN30mzGb6ph6VfMYcBvrVf3O
JldTjURw3QL9nKt+OnZMskPoD3I+taLXM89/XHSOqln0c4dPaJAk74IYh3fI
u+Rc9UiQVZ3zIi6rVXWunz6dorJDWhe10tr4hXuV3FmyabSfQhzAM6hddU6R
e2F+1lA1mvdBN1JbsiLzWsCGYcvGSN4RzIl1Er5H+Fjh3eEHgnO7ewjfFJxn
7CA8Lbq2Bo6XWhn4cnLCFwvvjV5S/9jgnGxL4XHBOdlWwrcF5xM7Ct8i3Bc7
LHyN8KHCbYUnB+c9dxE+Sbi58NbR+WtyeXCzV0Tn7eCQr43OJ8E/T43Oje2Q
OOm2OvbQqnP02Cxs15Tg/GY7jg3Oq7YXvi44B7prNB+HzSF3fkzwM98yceFc
58lV89w8q3OqjgmIzYgL4HjxQcgbkKuAJydnWz+NwW9EZ6HLsNMNE0anYbOG
JLszIWHsV/dky/ANiHXw7dE78MXwxuQmiEPPTPYFLvGMzPnxSbr+7uprreuf
GGxf2kTzs7x3eFjsEbwqPvb44Lz5TtG+HvaaWg54DObsXHEMenq6340TxtfF
BxmWrqFRwv/FqtH7gBzvycF1AttwDcG1AdsLfyJ8nXAP9ITwSOGuwi8Hc4P7
Cq8I5if7Cr8XnXcnT0G+4jnOr3v6Ppg76qX+n4L5pX7Cy4N5qt7CTwmfKLx3
NK8IR/Z0NC+H3zwrcYP/0yXkK1iH+1ZtrzpnzlHBrxNT4aO+rTknoKvRAcHc
3VHCbwXzgfsLzw/WS3B1wwrHatT4wHHB0ZAbei/YRhwo/E4wN3iA8FnB67mF
8Mpg/pMc5qpgbm2A+h8Ormfowr0E8xuHCC8J5usOw08Irs3oLPxAcI3HntH5
3S4V12YMD64P2U79N0fn+8kTkS9ijx+tsV8G841wsV8Ec+OHoveCOcMjoush
qItYAF8bXF+xl/p/CeZO+wuvFp7JnOikYI7xSOE/gvnAY4S/FZ4mfLjwE1W/
x33V93Ew79dT/Z8G88AHCS8M5gkPjq6xQC/Cnf4dzbeylrYO9snwPf6N5hZ5
zrdH555bEc9F5793IiaNzn+3xD+MzqnvAD8QnZvfUTgvnB/B7mEHP5ZsUko/
JRt3XOG6nUMz839fpffIM7xN/W3V/yh+bHQ+vnXhHM3wzLqEukbsMLVh5NHh
Ln/IbUPx2cnPLA2uUTlKfXdF5/LbCN8bXb+4i/Dk6DqJrYSvj6lWAN8vppoA
4SnR9Q3Nha/BJglvKXx1dG3EFnBowjupv73wVdG1R83gZ6JrLDZnP0XXULbF
R4que9hZ+D7hVsLthG+KqdZB+IaY6hiEr4yuyWgqfGNMtQ7CDwi3Ft4VvzW4
Vqe/8EfBOYi+hevfSvyl6Lwm/Dm51CFV798tgnkT+BNyao+m509OljwCfh/5
B2pK4WXgHVfgFAs/nDt/vZw1ULrGEb/sp9x1ofhR+wT7/T2S37ws8Yz4nt/m
rl/MgmsY8ElbltYJ+IPbkR8Orh3qU3itsGZW5OasDs587t81ZrbGHKsxvwX7
TscI/xrsd6Eflgk/zv5S/wLhu9GHzBlcvzSgcM6dPPjLxCm5c7Xk5MjvwAGw
juHg4CupT1wTnXdBp8GbsQY7lOZ54Q+I7VnPcKvtSq9L1if5QWpA8cO6B9fb
1Uz3NV1ztZHcTcfNjq4lPYT4tHStw1mso9LvgLqgbUrXN5yp/ualayCGCTcu
XetwonCL0jUTw6PzjOSG7tJ550XXYHHv70bnrng+Y6PrljZMsQC5EnImm5Su
4RgivHdpv7yB8F6l/XXWGHVs1NdRW4P/T0xCrml8dP3QRtjo0vUig9W3Uema
koHCu5fm3ODZOpXm+C5Q/27Cc3LX3TUsXVNCzrpB6RoOctl7Cm8S7Mu1Lv3+
qA3erHSNwsnogNI1Cqeg90rXiJwhvGnpWpOT0HOl61oGoXtK1zEMFd6Ca8td
o9KsdJ3KqcJbla5NOV34leia3UN1/ROi6342LuyfE9s0kpwbXVPbW/2vRdfy
HgEvFV0z1ET4heia4B7Cz0XXH3cXfiO6Zpe98GZ0PS57/K3oul7W89vR+R70
HvYbOw7f9VJ0vfJBwjOE2wvvKTwnutb5MOFXo+uMDxd+Pbqe+EjhF6PrknsK
Lwr2sbmXR9XaqX8PeBThtsKdCvMD5F3ITcHhvJDil+NTPEVcNTj54tQnvBNd
I4juuiS6DqyR8KXR9VWbCF8WXV/VWPjJ6JryfYjLhHcV7iz8fHR99oHCjwjv
Iry78OOsIeEuhf0b/Bxygk9F14V3FX42uha8W+H8H3wMdcKsO3L35Ovn5o7t
qD8nb0usWCe6thjfcJ7kM9F5xN8L54PQhR21Rm4IrkVH/5OHXR+7EJ3XJ/4m
F/lRdGxD3ERNA1wutS7wS28kXQ0HRZ0P9T7sYfYyugIObUbmuhQ4Kfx86l7Y
E/hn1EHA18F9bB/MnxDvw5tMDc6NYkduDq7Vxx7h0+Pb76y+fwvX4RN73q82
rOJ3Da8K78c6I49LPpc1dknw9wLY7kuDvxfA/l4m3Kdi23eecLeKfYwbhYdU
bJevTnEu8dTtwXX72NaLgr9lwA+hXg5dTe0S8T88ALVx9ZI/g1/zWnDtOvqz
ZTAX1CqYX4LnaR38/niPcAY0cOdg/oR4lriWnCmxKHHq2vQc4HjgH9Bz1BKy
Jlgb6Er4AezjiMI8D5wPPAmxNvp+n9L+NH418TXPlDn51oEYnjgWvUpNGDna
OemdEsMSy1Knw/rpGcxfLU33xTviXXUpbXPh3NCn5D6JmxckPw/fHZ4PHhVO
n7p4+Fu4R9YtPNuStE6o/diiYo4U3wsf7M/cdhxek5wWubORaf1Tr4N9xE5y
Lt4FtYrkPrgWdDwcPhwlnCEB/qjkA5Azghul5oJaIvJE1AvN0u/xFeuf14O/
WUDHvhH8LQP66vTgOkn8otOC6zPxnU4NrhfFrzsluP4Tv26YcMeKfa1+wbWy
6JZYuE4Se1EWroFE/9coXCuI7cgK109iW2sVritD//dMfBI1pdXCvgc+8BVq
nwovw84XrqXEdsANzanY7nwQXUtNvp5affIr5CEHBNeI4kPy/Qa8BbVMM9N6
oG6d+hlqu6grp26mcXpH1PlQLwTfRB0+tfqLc9fow1lSK/hBcG0A9uj9FMsQ
lx0XXBOLz3l8cA0tPu1RwfwhdmpgcM0t/vCg4BpdfOkTgutv8Y0Ho2sq9p/X
BMen2Pp/g2tFsLNrg+tJ8AemB3+Pg95+Ar+Q+BQbFPz9C7qd2hdyOujt54O/
kUFvPxT8nQ726JHg73SwcTOCv6/BRjwe/H0NtmBeMK+IjXtT+NqKbfGEqq+B
/TU3+JsX7CPfV42r2C6/EPx9EHb53OAaZmKi8VXrRnQItSbo5//i6uBvhbBZ
fYJrqrFxvYO/U8BPOCK4Bhu/q1dwDTb+Uu3CNbf4dZDe1Ijig/UNrqPGPi6L
rlOH04AvQwWhs7ZLHBq++jnB9czEaCOD65yJ3dYtXMeLL8T3LOSAyAXVLVyv
i89Zp3B9L35mvcI1tPiTX0fX38OrkC/Gn8dnWxltL+GBP4/+DgF+g8J16mng
N2Lp+iHi8Q+jeU9iw6XRtfhwLz9HxzhwZd9Ff2sBP7Y8+vsK+KufouMveLkV
0fEUfNqP0d8zwGWtSj4P8f4P0d88wHdlpWt6iJ3fj/7mgThifvR3DsQR65au
bYJv+S35FfCBf0XXOcHP5KVrgIi165eunyZmr1O6XgruZf3SddhwFIuiv9mA
x/gnunYHzmRx9PcbcA6/J/8KXqJu6fpguJRapeuK4HCK0jVScA71Std2wyes
V7oOGz6hLF17BG/wZ3SdGZzP2ugaJjiW1cmPgjP5OPo7Fri+76O/gYGHDKVr
leBSfk3+HhxptXStEpzDL9HxCzzqBqVrx+G31yldFwUf9Wn0tzfwmTVL10L9
x3UkPw1upEbpWij4ky+jv8eAR10Y/S0NvNlX0d+EwKkuif5WBN71/wCFyuFB

            "]], Polygon3DBox[CompressedData["
1:eJwtm3fgj9UXx5/nuc99viWEpIRESiTtaCejFGUULYT20J6S1R401C+lokGb
fg0J0aAladBC69ceKi2l+r1fve8f9/u955777HvPeZ/3OZ8WQ07rM6zIsuz0
kGWl/u+hPz/kWbZK/Ts19niVZddowrmS/ytdTY3+S54m+QvJB6jVlbyB2gS1
XSV/q+P/kX4j9Z9Tu1L9/XSuP3SuFyRfJXl/yX9KflHyWMkHSX5B8pNq1+o8
52nscenW0fUek3yf5K8k3xuzbE+df4XmX6u5taR/QvoHpP9G+ivU+qvfXPr/
SX+55H6SN5X8qeRXJF8mubfkFyXvLnmVzrehWnP1X1a7VPpe0i+Ufl2d/3Gd
/36NfY1O7RD1m0r/sfQr1Q6VvoPGzpNuse7vfJ1rgtoD6j8q/ZXSnyX9Q9L/
V/JVks+W/Ajn05xNNPcctWHqb6WxD9RfK/2PusZMyRfyXdRfo2Nr1H6W/jSN
RfXv0/ivvBuNXVb4no7W/66Z77WSvFq6LdTG6fzXq7VRv5V0T/N8amskj9f8
B6X7RfIIHX+s5Ic151fJF0s+TvJ0yY31Pl6R/Izkf1gw0n+j4+up+5yO/1By
P+k7Sj6f96E2Uf2+us+/pHtd8q2SD5H8t+QVaodo/i4aO1e6RWq3qN9H+rXS
3Vz6XraW/E06/mrJh0p+SfJx+v+Ijr9LY59KF3V/D0meLPljyetJflLyg5K/
Ld3on6bjluj4UvoHpb9TYx9JN03P0EnPc6LGvpB+mcZukm6A5i+SPLf0t+ss
eY7kpZInSD5K8quSn1K7TscO19gs6WZKHl/4G/It55XeS101/xnpCl3/vsLv
5IPSa/4xtSfSXljNmmFtaf6bkjfU/AWa/7TG/uTaakPVbyP9V6wNjufdS35L
8o2Sh0jeSvKXkv9T+lu2k/yt5B/0/yg97yi1SrqGOv8LOv8szfmDb6F2vPrb
aN53mt9A+uekn6mx36V7Se0S9Q+WfoH080vv3W6S50mepXa95l+ksfF6twul
H6N+T+mfl67S+R6WforGPpHuZs1pr3tphO2o/E35tsdr/muSL5HcV3ITyR9h
K6LX9suSf5J8mfSHSt9M8ieSb5J8jOS2kr+W/JbkGyQfIfllyRthQ3T9Omob
qj9O+gHSt5L+c8n/k3y35BMkL678DU+WvGfwt/1M8j2ST5T8erJvfPvukudj
OyUfJXlzyZ9JfkbyOZK7SJ4r+V21XXTtjTU2RLo5pW3FvtLPrrwWTpC8e/Ca
+EXPu1jPu3fav2/r/43SHyn9K5XX3CmS9wpei0M1/03JK3WNpZLbF/9u2ewT
nWMbzV0j/TvqT8I+qX8qNln9tzRvsxrvged1rua598YwyS9J/7b0LaQ/WefY
GVukOe9Jdzo2VvIy6TdHL3mB5Dckbyr5XMlLJK+Q3FbyJtg/ybtJvlK6E9Xm
SV4kuYn0k/huktfT9WvzbNIvlPym9M2lPwebIHm55DaSz5a8mL0keSvJZ0l+
TfL7kltL7qr/W0huqPPN0rm74tMK29Au6m+g+etI3k76W6K/SWvp1hb+VoMl
b8nek/yO5PpqoyTvrXN11vk/1P99dOyOGpun/pnSL1L/Pc3fUvqmOmdTvo/k
q6U7Q+1Vye9yX9LfwrqTXOgcG+tap0n/suSl0reU/nb2reR60v+qfjOdr5nk
faS/RnNvww5IXlf6X9TvX9l34sPwZf0q+258Kr71UMlTM/t0fPthlX0dPhXf
yp4BILCn2EvYmFML+0BszyaSa3PutH/6Vral2GBscR/Jd2S2sdjaD3XMw6x1
3VsHyYdUttXYAGzBm6Xlw6T/h7Wm56ulZ/kCG6D+CZV9z6uav4nmN9ZYY8kd
JV8hXRPJTfCXkq9irUiOOv4zjR2r/mM6byV5D7XO7LvovccevFzzt5T+JPX7
aOyG0jby9MKYAtt5EjZO/dc01lTXHwD+kTxDx23L+2U9Sf5B+ssq+6zTCmMQ
fNlGul4j9bfT2KXStdbYMvYzPlT9/Uq/S3wUfuscyV3UX1/nX675q9TOKWyj
7gSrST5X8kDJU0pjnqGS98+Mhfg+2Db29wrJm1XGaqMlN1f/R7XzJA+SfLf0
TfFf6h/I3mA9cD+SV6f3+7PaRYVt6oOlbe75kgdntsXfSz67sM27DXwYbe/B
ht10voM11kD9M7k//f9c7TO1cbreeLXteAa9i4bSb6v++xrrKHlXtQ+CMcV+
0jUIxho7SP5cup4a20hjH2isO3tf8qkcL3n/wnv4FMnt1D7mfeOzC/uIwdxb
Zt9xuFot9X9O9qiW2h+av4ParXqW/nxD6X+UfhlrNxgrN5X+d/V7a3wn/FPu
/X8EGETyL2k9HiW5juTf0n6tq/Z3bhtSp7LPOUG6gzL7Ip4BbFmTno1nACtV
wc+GTz5D8w/L7KvxMccXfh/4HjApz1Y/GKt2llxKvxfX09i+koPk9vjwwhgM
7FgvGJt1kvyX7u8MjV1eGEMPKfwNwNb1JOfgf9Yo+CJ4r+U65mf1Dy3tb1al
9b6Z/h8p3SVqTQq/z3Wk/yntv9Vqwwtjmvula67+zbmP4dhGattLN1lyM/V7
s57Uf05tU/Xf1jV34luo3cm1NFZb839N9jboGz7HvQf7wz8kf5p7rV1SeY+w
V96Ufmet1yN13J6Z3xHva0bldcv6fUBzT1fbGv8k3a3gFeIcyRfrnIF3h11Q
/0G1BpLf0/Umqb+J+nvr/H9LP1zy9mpvqN8Fv4qtS/Ybe05/Hs+rY9pK30D6
wen9fq7zPUXsorGBpf3l7ZLrqz0V7C9OAU+pzQn+Phy7jtrjYCa1Qfg6tTY6
9+/4s8KYA+xRp/S7Hqb2W4rhxiU8S2y3hdrr0o3AJku/ueRXJB+cGUMfrrEp
hTEX2GtLtSWci+8r3R3gSvWv5J7wL8GxzxjJNaxVtZHqd1f7X/D7Gif9dZLX
lW61nn8R317tFfWL0u+e93mHrntW9PFR43timNWmFo4x3gW7RfsC3uEx6vfC
92d+Z/jX3/S8Iwtj4Ec1v43aitzvGDwyLRiPbcX1g/F0kTmGI5YbkewTdqqT
rp2rTSscE73P91RbKf09yf5voPaQ+u3UbtC813W+a/DPCRN/qXucndsnvq/+
zdI/qf5uasvVDzr//TruNjCR5j/CWOY5xOPYq7PUb6z2TPD3Ix7km/BtvtA5
Z/GuM78PYvTxKZ4B23bRWGe1J9R/EnsTfW/c40fqP6tzdsp8Dezh6Mp4hLW7
T42/N2vpZbUW2GLJv2d+5oalY9wxhTE2WPuraDxUK+2Xpvo/N/c34lt9G703
1lf7Wv3v1Oazn6Ufpf65xFmFYyhiqZEaqy39sbnxxE9qC/g+vOPo84Otvued
4i9LcwNwInAj2EvOjQ3FlvL+P83MecB99I5+F7dL/6yeZU+N/Zh7T7QsHQPf
VpgDITZeSkye20bMi47nsbVVYTz6n2jdP9g1Pf8i4n3JF6j9qX6v0nYP+/e9
5i5TuyH3Oz1D/a6V8S04F3yKDcIWjZR+rY7/WHM2B79o7FP1P4nu8454Vz1L
Y4X18UnqvxWMTcB83SUfWBor10965tPHp91YOIa/tTAHtCjhD/x/p2A80LAy
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
f/AM
            "]], Polygon3DBox[CompressedData["
1:eJwt13ncV1MaAPBf79vvR4ssY5k2M6kkrbRHi3Ylqd5WrW+LpX3fLS3SRqNN
SLRoEe2DZEmSZMu0CDNEjTDTgkIR3+dz/fF0z/O9z7m/273nnnPeErmD2gzM
SqVSr4m0eN0/Pzseyk6ljott8ttFF+1lCuc5tz9vKtVaFJYXF0/lSaUukFcR
Y+RjRVXtc/o1EXX1ncwG6LuFtwpns9hoto0dYmtd5zLtx5wblUmljrCV7GK2
mo1l7Vlr7YX6TtV3t3Mj2Vfa3/LvxL3qyotLtHPVNXFulLrq6iqxYawze4w9
zj5iX4qmfut5+U2ilvwn11ivZoNox25jj+r7gL7vsLOsjvbt7Dr5r/I2oqW6
eWySczv5BNfZxepqf+83ljuWZRey7uq6iSfk1fStyIbKO+m7UF1bdiubzyaz
t1kptb/Km4mrWU92FTsZz11UiXuUlxMX69tT3ljdSHVPut4+dljc7F7Wy3Py
Ju++gmNFMVG/5vEc1LSSD3Nuq2MZnmE5rleN9WNXszRry9qI+fIu+nZlyyNX
d0BdaZ4d12MV2Tg1JdlZedN4R+Jh+TXiPHXt5NXV9df3flbUsbY45p7zyKvq
f5W6vupaqJvh3H1xL455xSK2Wc1g9pC6I+oOsvysgajNfnZuo9pNorh2Zddu
oX2LuFL+sGM3fUqr3S7GsRYxBrVXZyXPb51rvSAOq9vA/ydelKfFXvag/GNx
TyZ554Wyk+cUz+szeRV1JVgfeXP10/1mQ3YDu5/dFf+PP59z3uzkOcXzOijv
HN8mWyqfq26fuk6sM1vC5rC9rANrxxaxmexDdj37O+sd/w82jY13zR3srRiX
bDbLUddKvkDdFLaL3cZuZrPZeLaDXcqOyddyaaqtf651vYvkPXgjNiLuhfWP
58leYN+wlvo2YjPYyJiL2BLxtKgTz8i5NY4V1V2q3VFdbXVjna/MLmed2Y1s
PHtKLBY36nO9c886XqeusHZXdQ3VTXK+RnwjbALrzeaxavGe4l2zXDaHVWLF
WUyUOWwKK+96BdmtrAIbyirEOGX9WT+xJO5ZFGMD4p2rmxx1+v6FdWC12BhW
jhVgLVl5NoQ9EfOTuCHuP8ZcjFFxpfYgde3UPeB8zZjvYoyxPmw+q8UqxFzI
+rIF7A42kR1k77JzrC+7P8Yo281+Y7lsPPsX28l+YXexyexT9n4qWSx6sLFs
D9uBTqvrw+5jB9h+sVfeW9zD9sl3qTurrhebwPayt9mZeM6ueRnrxG6IOSLm
q/iW49uP/7tzqxyvVZdf+xZ15dQNdv4adj5rzsqygayn2nHsI/YW+5kdVrfe
d9uFPR3vSt5d3RjtD9mb6n6KtSJ+h41nvdhcVjXmp+xkfYt17hn5Or5WNMgk
a8bGTPIM7tXeGf83ccV5yTwb80XMG/udWyyfKKayYqyMKKHfGtd6VtTXrqFu
veNLzr0oDsirqc91bMRvdHwo7sX9vfjnOhXrVcNMMr9tyiT3XCY7GY8xLo/K
C/vdH7RriPz6dtKnCPsxxqMowDqzouxUvAtRMNY59lf2fcz/Ih/ryJ4Xz4mb
XLum39oQ41X8TXuwuvbqpjr/ob7l3f97/Iz4QH5lhPMN1K1no2PNV7tC1I01
ka11XC1fJeppV2fr4tsWJbWH63u7a8xyfo/+v8e7FI/4rf3yKupKyUeo66Ju
prqu/I64NlvKDrPu7K545mw5+2+M03hHca9sO8ubTr7zItnJuh3r9xfypqIZ
e1w+Td0bsV6qrardmm1xbpK8m7gz7p8tc+6IuibRnz3GHmTbWQ91g9gLbA37
P7uVNWYz2ajYq8X/Q9/hbDd7lZ1gd7JJ7BP2Hvs99lyse4xPtoJ9HGsFG8h2
sJfYdzG3sx4xdthK9glrw3qxLew59nns/1hPtpmtYp/GXiW+dfYye559Ee8r
nYzjU5lkjMRYaa/dj72h7p/qvmYl473FHC6Ksj6so7oB6t6M8R/7u3gGrFuM
sfj+2MHYm7G72Ta2mR39cz90IvZl4vr45uL7TCfrwYlMsrbEGpMT3yvbGmtX
7HtjLWNNHJuJ/PH9yuunk7F9OpN87/Hd10kn4/OHTDI2Y4w2jj1hvOv43lzv
pdhPsIZsOhvBXmUtYh/CprHh7JWYr9go9hrbyH5kBWKPZBzXj7VJTJLXTSff
wI+ZZK6IOaNmOlkjjmeStS/WwFw2mr3ueptc71Tcn/P14tvISr7FS2KeSSdz
67FMst7EulM7nay7J9lS+TLRXDuHrdR3oeu9H/sjNoK9m5X8DXGSldY3D6vP
irM74lmqa8OeYQvYe2wYe4R9E3shdoF+V4jj8krCtJlqr26IutnqvmafsALx
bbBZ7DD7mOWLfQ8bnJ3MlTFnFnSBkWxe7Mvkn6u7SN0INpd9x/7DLmTFxU/y
eqIQ6+p371Y3Rd1n7AOWJ/ZbbCjbxbayY+qGsn+wo+xTVlDdcDaHfcv+zQrF
fkv8Iq8sLmc99C3GTsvriAtYF9ZP32n6fpGV7CFjL9mfTWeH2D6WYQPYDPZl
jG92XuyJxbnYH4kirLfrlYrNvbq6rJhmX3Z5JhnbMcbXODc05npRSr479kQx
/uRXi6zsZH6OefpO5w/G+utYWLxsDB2Ntc312qpboe5Rde/Gvo51jL0bW8z2
sLJq87EW7Fo2iA1UN5N9FWscO1/NLaxD7N3Yk2xR/A3KhrF32CvsuL4l+G/y
mqIw65U3+bviTFbyd1D8PXQgk4yNIdnJehzr8h75H9Aq0Qs=
            "]], 
           Polygon3DBox[{{1188, 1187, 1656, 932, 933, 1657}}]},
          Annotation[#, "Charting`Private`Tag$315444#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, 
      {GrayLevel[1], EdgeForm[None], 
       StyleBox[
        GraphicsGroup3DBox[
         Polygon3DBox[{{536, 340, 546}, {546, 340, 547}, {545, 1, 538}, {550, 
          340, 552}, {538, 1, 533}, {547, 340, 548}, {552, 340, 536}, {548, 
          340, 549}, {549, 340, 550}}]],
        Lighting->{{"Ambient", 
           GrayLevel[0.8]}}]}, {}, {}}, {
      {GrayLevel[0], Line3DBox[{533, 1, 545, 538, 533}], 
       Line3DBox[CompressedData["
1:eJwl0k0o5GEcB/AH4/1lN1e1w1lslDShzRWnOVIOTjhQXFZtclCUXMnWbjlw
3NN6uWrc5GKHwdg13lmuclD4/HP4zuf3feY//Z5/Td3AaHIkL4QwL8lYCB+5
4aBY+vW4PsRGjrODk+yJfsM+/uBPGTZvcoIpznKXizziKm+5xiduc7kwhFa7
TuVP9By7op4fQlrPcZ9nPOA5M7zgIS95xCtey7H5htloF094x7/8z3+85ykf
mGO2IISEnTk504/ZLdXutqfHmOKjO//mNVeY4QJ3OMMtfuV69I4yZP7OXs6x
m9/YzjE2cJCfOGFHzM4T+aCn2Sad7lilf2ElO1jBNpYzwTK2spQtLGEzm6TY
/JlFbKQ1oYHWhnp69fDLx2t0V/schSJfTpmfzQuMO6yVGpnWX5wv5b3/X94A
Ha5MXQ==
        "]], Line3DBox[{551, 535, 542, 537, 541, 534, 540, 551}], 
       Line3DBox[{549, 548, 547, 546, 536, 552, 550, 549}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1106, 1474, 1536, 1475, 1396, 1462, 1496, 749, 1490, 1476, 
        1477, 1398, 1663, 1837, 1299, 1443, 1397, 1399, 1838, 1300, 1107, 
        1551, 1552, 1301, 1108, 1666, 1668, 1530, 1302, 1109, 1669, 1303, 
        1110, 1670, 1570, 1750, 1111, 1671, 1304, 1112, 1672, 1305, 1113, 
        1673, 1306, 1114, 1674, 1307, 1115, 1675, 1308, 1116, 1676, 1309, 
        1117, 1839, 1400, 1310, 1401}], 
       Line3DBox[{1118, 1510, 1511, 1380, 1444, 1463, 1464, 1851, 1402, 1478, 
        1381, 1405, 1005, 1465, 1404, 1479, 1382, 1513, 1855, 1497, 1512, 
        1498, 1406, 1480, 1383, 1407, 1506, 1507, 1505, 1655, 1677, 1445, 
        1311, 1119, 1678, 1312, 1120, 1679, 1571, 1751, 1121, 1572, 1752, 
        1122, 1680, 1313, 1123, 1681, 1314, 1124, 1682, 1315, 1125, 1683, 
        1316, 1126, 1684, 1317, 1127, 1685, 1318, 1128}], 
       Line3DBox[{1129, 1403, 1573, 1840, 1408, 1517, 1384, 1537, 1665, 1856, 
        1516, 1514, 1409, 1515, 1385, 1518, 1104, 1569, 1410, 1481, 1491, 
        1386, 1519, 1499, 1500, 1458, 1522, 950, 1538, 1520, 1521, 1446, 1849,
         1411, 1319, 1130, 1686, 1574, 1753, 1131, 1575, 1754, 1132, 1576, 
        1755, 1133, 1687, 1320, 1134, 1688, 1321, 1135, 1689, 1322, 1136, 
        1690, 1323, 1137, 1691, 1324, 1138}], 
       Line3DBox[{1139, 515, 1091, 516, 236, 956, 278, 237, 1057, 457, 279, 
        395, 238, 281, 958, 239, 320, 991, 283, 1140, 1692, 1577, 1756, 1141, 
        1578, 1757, 1142, 1579, 1758, 1143, 1580, 1759, 1144, 1693, 1325, 
        1145, 1694, 1326, 1146, 1695, 1327, 1147, 1696, 1328, 1148}], 
       Line3DBox[{1150, 1531, 1532, 1857, 1149, 1533, 1387, 1508, 1388, 1841, 
        1151, 1527, 1412, 1528, 957, 1539, 1501, 1152, 1482, 1523, 1389, 1413,
         1390, 1483, 1153, 1484, 930, 1414, 1391, 1154, 1697, 1329, 1155, 
        1698, 1581, 1760, 1156, 1582, 1761, 1157, 1583, 1762, 1158, 1584, 
        1763, 1159, 1585, 1764, 1160, 1699, 1330, 1161, 1700, 1331, 1162, 
        1701, 1332, 1163}], 
       Line3DBox[{1165, 1586, 1765, 1164, 1587, 1766, 1166, 1415, 1447, 1767, 
        1659, 1167, 1416, 1448, 1417, 1168, 1660, 1850, 1449, 1418, 1169, 806,
         1170, 1702, 1588, 1768, 1171, 1589, 1769, 1172, 1590, 1770, 1173, 
        1591, 1771, 1174, 1592, 1772, 1175, 1593, 1773, 1176, 1703, 1333, 
        1177, 1704, 1334, 1178}], 
       Line3DBox[{1182, 1705, 1335, 1180, 1706, 1336, 1184, 1707, 1337, 1186, 
        1708, 1338, 1188, 1657, 1709, 1420, 1339, 1540, 1541, 1543, 1542, 
        1422, 1548, 1340, 1547, 1667, 1710, 1535, 820, 1192, 1711, 1341, 1194,
         1712, 1342, 1196, 1713, 1343, 1198, 1714, 1344, 1200, 1715, 1345, 
        1202, 1716, 1346, 1204, 1718, 1348, 1206}], 
       Line3DBox[{1205, 1347, 1717, 1203, 1784, 1603, 1201, 1783, 1602, 1199, 
        1782, 1601, 1197, 1781, 1600, 1195, 1780, 1599, 1193, 1779, 1598, 
        1191, 1858, 1534, 1075, 1190, 1421, 1778, 1661, 1189, 1392, 1419, 
        1842, 1656, 1187, 1777, 1597, 1185, 1776, 1596, 1183, 1775, 1595, 
        1179, 1774, 1594, 1181}], 
       Line3DBox[{1208, 1604, 1785, 1207, 1719, 1349, 1209, 1720, 1350, 1210, 
        1423, 1721, 1351, 1424, 1524, 1525, 1722, 1425, 1466, 1352, 1459, 
        1485, 1495, 1486, 1450, 1467, 1502, 1353, 1426, 1843, 1487, 1488, 
        1428, 1554, 1605, 1859, 1553, 1549, 1550, 832, 1211, 1567, 1568, 1862,
         1354, 1212, 1723, 1355, 1213, 1724, 1356, 1214, 1725, 1357, 1215, 
        1726, 1358, 1216, 1727, 1359, 1217}], 
       Line3DBox[{1219, 1606, 1786, 1218, 1607, 1787, 1220, 1728, 1360, 1221, 
        1503, 1729, 1361, 1504, 1509, 1658, 1730, 1430, 1468, 1526, 1469, 
        1429, 1492, 1854, 1427, 1460, 1470, 1493, 1471, 1431, 1844, 1489, 
        1494, 1393, 1433, 1472, 1473, 1852, 1451, 1545, 1555, 1432, 1544, 
        1565, 1566, 1861, 1564, 1563, 844, 1222, 1731, 1362, 1223, 1732, 1363,
         1224, 1733, 1364, 1225, 1734, 1365, 1226, 1735, 1366, 1227}], 
       Line3DBox[{1229, 1608, 1788, 1228, 1609, 1789, 1230, 1610, 1790, 1231, 
        1736, 1367, 1232, 1835, 1394, 1558, 1560, 1561, 1452, 1529, 1546, 
        1434, 1453, 1368, 1461, 1664, 1853, 1395, 1456, 1611, 1836, 1455, 
        1437, 1612, 1846, 1233, 1613, 1791, 1234, 857, 1235, 1737, 1369, 1236,
         1738, 1370, 1237, 1739, 1371, 1238, 1740, 1372, 1239}], 
       Line3DBox[{1241, 1614, 1792, 1240, 1615, 1793, 1242, 1616, 1794, 1243, 
        1617, 1795, 1244, 1860, 1556, 1559, 1557, 1562, 1245, 1845, 1435, 
        1454, 1436, 1246, 1848, 1438, 1457, 1439, 1847, 1247, 1618, 1796, 
        1248, 1619, 1797, 1249, 1620, 1798, 1250, 870, 1251, 1741, 1373, 1252,
         1742, 1374, 1253, 1743, 1375, 1254}], 
       Line3DBox[{1256, 1621, 1799, 1255, 1622, 1800, 1257, 1623, 1801, 1258, 
        1624, 1802, 1259, 1625, 1803, 1260, 1744, 1376, 1261, 1745, 1626, 
        1804, 1262, 1627, 1805, 1263, 1628, 1806, 1264, 1629, 1807, 1265, 
        1630, 1808, 1266, 886, 1267, 1746, 1377, 1268, 1747, 1378, 1269}], 
       Line3DBox[{1271, 1631, 1809, 1270, 1632, 1810, 1272, 1633, 1811, 1273, 
        1634, 1812, 1274, 1635, 1813, 1275, 1636, 1814, 1276, 1748, 1637, 
        1815, 1277, 1638, 1816, 1278, 1639, 1817, 1279, 1640, 1818, 1280, 
        1641, 1819, 1281, 1642, 1820, 1282, 902, 1283, 1749, 1379, 1284}], 
       Line3DBox[{1298, 1442, 985, 1297, 1834, 1654, 1296, 1833, 1653, 1295, 
        1832, 1652, 1294, 1831, 1651, 1293, 1830, 1650, 1292, 1829, 1649, 
        1291, 1828, 1827, 1648, 1290, 1826, 1647, 1289, 1825, 1646, 1288, 
        1824, 1645, 1287, 1823, 1644, 1286, 1822, 1643, 1285, 1662, 1821, 
        1440, 1441}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{555, 943, 750, 1838, 556, 1048, 920, 1049, 1034, 1855, 1050,
         1035, 1065, 1036, 924, 952, 1104, 1054, 1105, 1037, 1015, 1032, 926, 
        1057, 1038, 1039, 1066, 1040, 1063, 957, 1085, 1058, 1059, 617, 1767, 
        963, 805, 630, 1776, 818, 1707, 644, 830, 1720, 656, 841, 1728, 668, 
        1790, 852, 680, 1794, 864, 692, 1801, 876, 707, 1811, 891, 722, 1823, 
        906, 737}], 
       Line3DBox[{557, 512, 1552, 513, 231, 1407, 268, 235, 1519, 451, 275, 
        394, 238, 282, 1413, 241, 322, 1448, 289, 631, 1777, 819, 1708, 645, 
        295, 1721, 657, 423, 1729, 669, 853, 1736, 681, 1795, 865, 693, 1802, 
        877, 708, 1812, 892, 723, 1824, 907, 738}], 
       Line3DBox[{558, 1069, 1070, 1668, 1071, 1072, 921, 1045, 922, 1677, 
        989, 949, 997, 950, 1083, 1055, 955, 1056, 1084, 927, 958, 928, 1016, 
        961, 1017, 930, 964, 931, 992, 1850, 965, 966, 967, 1842, 932, 933, 
        1709, 968, 934, 970, 935, 1087, 1722, 1060, 971, 1061, 1062, 937, 
        1041, 938, 1730, 1046, 975, 939, 1835, 940, 1096, 1094, 1860, 1095, 
        694, 1803, 878, 709, 1813, 893, 724, 1825, 908, 739}], 
       Line3DBox[{559, 751, 1669, 560, 761, 1678, 581, 953, 990, 1849, 954, 
        593, 959, 991, 960, 605, 793, 1697, 618, 806, 632, 1778, 969, 1086, 
        499, 1543, 500, 461, 998, 376, 1495, 403, 396, 974, 1854, 398, 999, 
        472, 506, 1546, 471, 994, 978, 1845, 1097, 979, 695, 879, 1744, 710, 
        1814, 894, 725, 1826, 909, 740}], 
       Line3DBox[{561, 752, 1670, 563, 762, 1679, 582, 772, 1686, 594, 782, 
        1692, 606, 794, 1698, 619, 807, 1702, 633, 1075, 1088, 1077, 1710, 
        1078, 1079, 1080, 972, 1019, 1843, 1018, 973, 1020, 1042, 1021, 976, 
        1023, 1844, 1033, 1022, 977, 1024, 1025, 1000, 1853, 1029, 1028, 996, 
        981, 1848, 983, 696, 880, 1745, 711, 895, 1748, 726, 1827, 910, 741}],
        Line3DBox[{565, 754, 1671, 566, 1752, 764, 584, 1754, 774, 596, 1757, 
        784, 608, 1761, 796, 621, 1769, 809, 635, 1779, 821, 1711, 647, 1089, 
        832, 659, 1101, 1102, 1099, 1100, 1861, 843, 671, 980, 1846, 855, 683,
         1796, 867, 698, 1805, 882, 713, 1816, 897, 728, 1829, 912, 743}], 
       Line3DBox[{567, 755, 1672, 568, 765, 1680, 585, 1755, 775, 597, 1758, 
        785, 609, 1762, 797, 622, 1770, 810, 636, 1780, 822, 1712, 648, 1103, 
        833, 1862, 660, 1098, 844, 672, 1791, 856, 684, 1797, 868, 699, 1806, 
        883, 714, 1817, 898, 729, 1830, 913, 744}], 
       Line3DBox[{569, 756, 1673, 570, 766, 1681, 586, 776, 1687, 598, 1759, 
        786, 610, 1763, 798, 623, 1771, 811, 637, 1781, 823, 1713, 649, 834, 
        1723, 661, 845, 1731, 673, 857, 685, 1798, 869, 700, 1807, 884, 715, 
        1818, 899, 730, 1831, 914, 745}], 
       Line3DBox[{571, 757, 1674, 572, 767, 1682, 587, 777, 1688, 599, 787, 
        1693, 611, 1764, 799, 624, 1772, 812, 638, 1782, 824, 1714, 650, 835, 
        1724, 662, 846, 1732, 674, 858, 1737, 686, 870, 701, 1808, 885, 716, 
        1819, 900, 731, 1832, 915, 746}], 
       Line3DBox[{573, 758, 1675, 574, 768, 1683, 588, 778, 1689, 600, 788, 
        1694, 612, 800, 1699, 625, 1773, 813, 639, 1783, 825, 1715, 651, 836, 
        1725, 663, 847, 1733, 675, 859, 1738, 687, 871, 1741, 702, 886, 717, 
        1820, 901, 732, 1833, 916, 747}], 
       Line3DBox[{575, 759, 1676, 576, 769, 1684, 589, 779, 1690, 601, 789, 
        1695, 613, 801, 1700, 626, 814, 1703, 640, 1784, 826, 1716, 652, 837, 
        1726, 664, 848, 1734, 676, 860, 1739, 688, 872, 1742, 703, 887, 1746, 
        718, 902, 733, 1834, 917, 748}], 
       Line3DBox[{577, 944, 1839, 945, 578, 770, 1685, 590, 780, 1691, 602, 
        790, 1696, 614, 802, 1701, 627, 815, 1704, 641, 827, 1717, 1718, 653, 
        838, 1727, 665, 849, 1735, 677, 861, 1740, 689, 873, 1743, 704, 888, 
        1747, 719, 903, 1749, 734, 985, 986, 987}], 
       Line3DBox[{735, 904, 984, 1821, 720, 889, 1809, 705, 874, 1799, 690, 
        862, 1792, 678, 850, 1788, 666, 839, 1786, 654, 828, 1785, 642, 1705, 
        816, 1774, 628, 803, 1765, 615, 791, 1074, 1857, 1073, 603, 781, 1091,
         1090, 591, 771, 1840, 951, 947, 579, 760, 1851, 1004, 946, 1011, 
        1010, 553, 749, 1031, 1001, 941, 1009, 1064, 1008, 1030}], 
       Line3DBox[{736, 905, 1822, 721, 890, 1810, 706, 875, 1800, 691, 863, 
        1793, 679, 851, 1789, 667, 840, 1787, 655, 1719, 829, 643, 1706, 817, 
        1775, 629, 804, 1766, 616, 792, 962, 1841, 929, 604, 1068, 1067, 956, 
        925, 1014, 592, 1052, 1082, 1051, 1856, 1053, 923, 1013, 580, 1006, 
        1005, 948, 919, 1012, 554, 1837, 1003, 1002, 988, 918, 1081, 1047, 
        942}], Line3DBox[{742, 911, 1828, 727, 896, 1815, 712, 881, 1804, 697,
         866, 1847, 982, 682, 854, 1836, 995, 1027, 1026, 670, 842, 1852, 
        1007, 993, 1044, 1043, 658, 831, 1859, 1093, 1092, 936, 646, 820, 
        1858, 1076, 634, 808, 1768, 620, 795, 1760, 607, 783, 1756, 595, 773, 
        1753, 583, 763, 1751, 564, 753, 1750, 562}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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

     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{333.3316032501984, 164.69161959080142`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0., 4.9999996428571425`}, {0., 4.9999996428571425`}, {0., 10.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.5224563966887807`, -2.9548057006934947`, 0.6334428082555376},
  ViewVertical->{-0.08574187020582957, 0.1664090790536412, 
   0.9823219177551349}]], "Output",
 CellChangeTimes->{{3.889171417110423*^9, 3.8891714550552683`*^9}, 
   3.889175060554364*^9, 3.8891764031698647`*^9, 3.889176751402111*^9, 
   3.8891768620233307`*^9, 3.8891770815088882`*^9, 3.88917724739608*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"cd4d6a2b-12d8-47b0-8617-aea644c15a77"]
}, Open  ]],

Cell["\<\
And in polar coordinates around (0,0), we still see the two remaining \
integral singularities\
\>", "Text",
 CellChangeTimes->{{3.889169978405177*^9, 3.889169983047619*^9}, {
  3.889175073010743*^9, 
  3.88917510571064*^9}},ExpressionUUID->"4c9e5e1c-3b96-4a77-a50b-\
3bcc0c91d33c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"NInt", "[", 
    RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
     RowBox[{"\[Sigma]", "->", "Null"}], ",", 
     RowBox[{"sampleID", "->", "1"}], ",", 
     RowBox[{"sectorID", "->", "Null"}], ",", 
     RowBox[{"useIntegrand", "->", "True"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "100"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.889175117391955*^9, 3.889175156349967*^9}, {
  3.889177562364887*^9, 3.889177569548731*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"c7237c94-2117-4d46-b5b4-7816ac53a6c3"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
LkmH/NCO1b/C73uRrybvFzRY/TfIeZqPP6hGOjSz+g/NCBp6NkaL4udbVn9n
zeDm2Aw90qd64L2XmdGvBL5ebWvb54G0ftDlh8S0/bz/vdg4dqu5X7mg8JBP
72G+v0mf/djH8Wn1HsPEFvKPNbtbgpLNywSlGUdXxF8TIX1msvnDK4E9Nz7o
JU764DdMzPXgvQieP+PXr0Me+JHVf2DE5kNdB/D+/RGr/5beydsW/OL9ezar
/4bNWSmxLiqkQyEr71vBrKvt88C+bFx/wsp1A14W8/znoqPo88zoSkGp0rYz
wuc8/xnR4dwQ1BO/R528RNKbef7jlCy+0tzvraBfUf7/5IHpWA/1ePjRqPX8
unrvHo4tzXwj6ByjO7bBhV839w95oCMrX+lUd9cHX8Xpuuv7PNHwS34vmHHZ
9X/yPXE2HyJrP9hG7Qq/bhzT7/iv1LLzU/l19Vhet61DvpfEyj+s/UDyZwG/
3y+/9+yNLv0o2Omd+Mp4I7/uaDZuZ9qv/p1FIve34sDoReZ+HwXVw1dcO7b8
F103juVpuzvke59Z+bPT9be23uTvBaNY+ZkLHs35Vi1L/vCUlb/EOb0xqIcC
1bP/yRiHZPNqQfdjdfGepjxuXMY6KMehj9Zd5nHDVcxL3i+5StBtf78XwYlN
VM9ilncN6ZDv+bPyPaYJWgd7K1E981j523zqgi1jVaiezqz8zKrmugtHVKme
R8Z4X8yM/iJ47bhqa/v8zYDNQzbMO63pFsbjeXKmXEp06WfB9uRrQ/uGtFI9
XVl+9VeH/O0wK3+3wZ4d6t/5+7s+K9925qiQHl+1qZ4bWPkXtWJ2X/fWpfgj
gf2VCz4KTYp4/JHSUexXmlkrWBh9rsfLqbzfxLoa/6J7tp/EeL9ZM7nEPNm8
VjDwa+Tjng9FKD5sYPlSTIe8S4KVf3KWlaa6jxnVP46Vv/ttRE69PR+H+cLK
LzseMX37Sgsanxy278nYi9E7BJ6vfliVl/K8sYx9Rzac7W8P/oXxEYwjHnqy
cpw/zK4uNlUifpzlacWV98fpmClTnJzK8q5+X6MChK5adL8iIhOz/+87I3a+
J+KmFtN1sJ19uEyQCeX/8uy6heredfNKHYnns+ue0X/qN9bHld4TLVtzmu39
EgWBv251kQs3ofoYsvnxMco33/uG65Ke7oyLzf93vR/a/TGbL5jA9r0Hr2c8
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
j+xl+zajHLwXyMkdnSOjz+dr7rFxlSdGZ+3LcgyIS2z4d/yk4Xl/nS+SnYhj
Xda8z1eM+lvz90qsy+qS8Splcr0+Hzdm3zkWsH2bwdUZf8Y4reNi/unyc1th
vBnPM9GOaRffdy1O5Bz6h57RF+uczDnaqyVowsH7GZxjfv/xof2x78V4vmrM
1pk7sP2fwfGdlAHjiBsd97lC+65neVdmurzah1jej7ew9i3b+eTw2iy+7xDa
tzYwu2XQij7kh5ivWcL2PabxDZyfxvYrBsf3UP0ZRzxH/qm67uyNtE56xAey
+uux/YrB/RnX7cDx/qvG9jFG/Ad/Ma/1U0UBz3/QD1qsOv0w4jVfV1DE9KuW
2lSU1ZdzfI+Z7/A04fkhzj+xfm3C4Iqmlkbe74izPMH7zpunn65xjv6ueKv5
7IN6fL5jOONT2bwPzW8yPpFxvHcg7rlovzfs5MbXUeB7z4v6gtPjNDn3Y34r
NVvVVtSIz0Mdwn4JbF9f8PQ/8ELWXxiz/X7Bi/7AEbdPsn2AoYMLq6f+z2+2
WzdxfXRZ/yKlMvJT0R7O+7L6y97p96E1lfPRrH/0L0vdXXuWc7quo3LvvRtF
SM+LHeazwC//YZ4L37eus5Hvtmcm71/QX3ssrcm88zdH3EN8fs/2xaX+nfGV
ivZn5Hyl6Lq6LD4osXkucAPG1RhH/MS4wV21FSkrk62JIz+/zOIq7Y/E1kuf
67PZ7mgPS/If7O/6bdyTjMzOzZRPYL3TGdav0Tgte46+DljgryZrQfwxe79Y
dO/RnLpi3i/4sPeLjaNeug26YE7xpD97zzJ4avP0d2J3qg++Fx60+t7Ci6Xc
b9GPO0bU/RgT0UzfOR9m8VNmsu+h4d48n8e6JiUvkdmtHyTpuuhfBOoj/c/v
5Ou0Rdg8goSfZcNEZTP+XTwb13q2aGLNrTT+3vqRzReMT/f02zTYmLgaq6+R
ZfTiE8P0yU8QP+179nE98zyY+Fumm4iVkZHZYD6+h7jdhY37UfklG436neLx
nMaLRBTrdY/l/Yf/f7XH+A7WIzxRH7VUf2Ej+Rn4jrM3+v1z3gT8AHzDJo20
vV3b+PoAxh9H+UeJbZag8nFfJRbhno8P8/LBu2085d++fDr3dlX21ft5vHzw
lqvTey/pKkn7n4NnG0xZeK9Ekc5povOjrR6b/nNeIeqDdS5qQYsHdFrN60P7
CCoN9mtfH/C3q/rvSx3B6wO+7tfCKNM8Cbou+KZTnw3bXxfzyXfTKwZpWPPr
gkfMeOLb/rrgo/dd2iDwbKXrgtuYTrMrnCBOOoAHfNwsPHNals4FAN/CznGj
fccY92PntWF9A7gXG59HvwUuMStn2LAaazo/Bfx3/zW9f8Q70rkM4L6pBt/z
z7vSPpPgo9Ykz+xR4E7na4A7xblOkLvsSOePgFce6/pqi5I56QyO8yjpPEX2
PP51sybLYOtP0hl8f9bDHu11BjdOvp92aU8z6Qz+Kzp01NC/+33oDJ42b7hd
Z0sp0hm8LjdC1tZXgXQG/64+d8J3PzXSGVy234JZFXe0SWey3765ySDRgHSm
740mTQqe5GhGOoM79he1PKZgRTqD91rsofejyYp0Bn8r+X2Mkbkl6Qw+WuNQ
6EgfE9IZXNLy+f+d+wad0c+fdyxRPfvlB+kMPmlkP7f2OoMnymku7vvuN+kM
PsqnpPPMwjbKL8FLjc58lWsRI53BX3c2D9v1RIp0pvH7B+OXOGyUJ53BQ33f
ug4+pkI60/zhiZaJChoapDN41doZQXbV2qQz+OJ1u7WcyjuRzuCPNcp7Plc1
Ip3BGzT0u2dvNyKdwY1Tg6cLlxiQzuDlS4+mt9eZ5i0DFl382u8Hjcsj7xAv
XRjilNdA+tM62a4xdv/oDw77+LjV5u3bBfaDZYqvxgf/Ig77tO9PvwWrNFJ7
wT7faceNlHf8eYH9BSevJ90u/qZ2hP2Zx/3iG//Ox8BhHykbFz7jIT9fDPZl
mtXvpmmKU7vDvmSfr/mqUyLU7rD335E82kSJ+wPsy51Mfva8zs+ng/3jSRqp
79bKEod9f/ZdA/wE9uFZonU90hSJw95pl7JfjawM+Q/sx9223vnATJU47MXS
A8qnjZInv4K987Xmq7Wp6uRX4COujD0b5a5FfgV+rfbGzRGz+Dm54F/kYhc0
7uHn7YJXnQ6d0t6vkBf4aquvzBnP/Qc8Um+QUXs/AS9ukYz+EPST2h284P7b
wG3xv6jdwe+LN3Xu39JE7Qt+ZlXJbfmKVr5OGvsalo3dfviQMt0veHqg6sBX
g9Wo/sibphz/OLfUl9cffNUHP4P29Qc/s7gpvUaS1x88/dLC3R4Sv2geEbzH
29ujXi9RJZ1pv65Jt6p88zX4ud6MR85ybP3dTmfkoVtlT9beGcbrSetbJ6Ub
tq8nuMnd8qA+rrye4EHKoktnBPJ6gnfdafuXbR6vJ3iXn/9PY+cd1/P3/v/2
UmkvTVlRJISK10HZI73t0dvIFlqiyIxQ9p4lIjMkUUYR7+yVkT2zE2mPn/ft
cz2u5/v2dPvebr8/3Tuer3Ou5znneZ1zrvO4ek12+yTVE/ztBxOV//YHrD/0
ZtWoD0iS6gl+T72J43/ryfeP5wUYVD2W6gm+5e/z9kkjpXmAdTs22O950FEa
7+BWTlNfX+4qjWtwfaXU6CnNpfHLcXO0zsJ4BP+H8olg3HGcL+V3w7jjewCU
lw39EPzRCKPWCekG3A95H/36ydMBNsZsZ3BNys8OO4MjDzvsjHXAwO7O5wPt
pe8mn7NdaNr0v3YGnxfdN1K9SJqHwRf1zuxx0bOK7cz3R4sur2rwtpbtzPuj
re8dbmGvwnYGP5+S1rTLHjW2M9/bu7z+xIzf60HYGTxYyXbkuOs6bGeu/67g
rU1n6bOd+T7WrZnGf3U2ZDuDrzrQpWOd6cZsZ/Dbo8dO/rrPlO0MnjLz/tG7
x8zZznyvfYqT93/tjP2nlmcK82MyJTuDT7U47vZfO4NPSj9ss2yS5J+ALw63
j+/zuEbKo0Rc607DYjsHyT8B3720qPp8gDrbGXzKilnTW3SVvjvgn+JzPZvk
SN8X8IWXZk0wD5C+I+A+jfdU5OqYSPkZiU9/Wfv8QTNzKX8i8c8KL5tTUyzZ
znzP+6xx266RVmxncJ3HJyJu7rdiO4PvrDM48r92xro/SHfcIuuJpWxP8Gy1
Kl8/R8lPAO84ddfhGY6SXw0eMWLXk3YN1Nme4M+jzzzQGanD9gTvcLTNlJVL
Ddie4P79c2NS4k3YnuA+k9WqWra1ZHuCR+V7B+89bsP2BN/0NTw36qA92xN8
RHeNSdMOSPkBwVOaqXXd1teB7QmeXLFWY2+WLdsT/MmzQyf/tedcOt/FOlo0
/iuy7Zwa1qPkexuL5v94WKoq0ugcGvxTryC9sil1RDDp8oBvL+q3aEW5sWhO
8YjgC1TPPp+5w05Anw7cn/Q5sZ/Ium61ca+GB3UQuDfI5RMOrF+7zUtAfw38
g030pHfbPAX0zsDj72+f9/K2m4C+GPiBp545MQ8bCuh2sY7vzIa+13dbCehv
Yl0f49zzjihSFdDBZJ3O8b6O3eLrcL5ycBeX8HlJB00E9MvAC1a3d9yu2ozz
RYJ/8046/fqVtYCeJtb1y96/Pj4tTFtAvxLc7uXANL+eRgI6j+C9u236vMHH
WkBfDNxz3p6fix7bCug8Yp21/YrZ6q5CX/jL/HwV8vOTZP75DvLPbWV++Cny
w6/J/O2h5G8vlfnVD8mv7iLzn5+Q/+wv83ubk9+bKfNva/f8z7+Ffh/4raGZ
oRbd6gro64HPTp5v8Py1oYCeHXjky75KfceYCOjHgW+ae23JrCIzAV028BfP
Grr/O45mQzeW+vXuijOzEn/7e0U0jjiu4b25m0eTctY/BQ/T2G72cFMl64SC
f+pV2a/nhBrWzeT9Qt+h59LylAT2i8G1h4zu4nZUU0CvkPUa36TsGFikI6An
CN4ksKx1dIW+gH4fx79bWzs/+mEooJcHnqLVs7So2kRAh451Kcb+Mjh22kKc
p/ECv7TPhnPLC2eUsa4ruHPViw0rdlawPiC4j5OqzZQLBgLnTOApYvCD27eM
Bc51wLsHdjFeWGwuoA8LPzMl0kLb+UAF66iC561tt7i7ZzXrioJPXZI6utxC
SUA/EfzjmCb3j1zSFYg/5nuxD3yav443EIgbBh80rPXPUYuMBXT3wHeZBS67
PshcPKF9WMwzYy7obrRsqCT8ab2kK9O7w71ujN8VZzfeczUQAve6wd3VlpbN
DO8ioNu1UabzBv0p8CK3PY+nXW3J+Wexr/XNs2ak5abWf/CPxHH/gfUJPOKO
ji11+oM3IQ69J/AnajaDHgfZiQAZv0cc9ce8NJJ04dqQ/cFPparWmNZpLGZT
u8Azgvdsn7+wgYCuFp9HKXVJjSuoL6AnBR4SNySk+wtbAT0pcIMux2NvtJPy
7WKfpBvpy0GHC/zGseSq8/k2AvqA8MMHR5u5pCaXsD4g+DDi0PUDH/BufMG+
kjLW9QMfQhz6JnyvgnTnEEfLegbj26zZtKGG42h5PUIc9xjBZ6XF9v421lyM
k/F5xKG3yPoZIw6fWrWtWHGZzvVZh6Nd2umnDX8pgugeCPgGJ1OTxEalCj+K
GwO/2MfS1SWnVOFK5zfgNpdze26sV8H6g+Brezx7pDyyhvUBwZuPe3HbtYOy
wPk9rxf2btnZ0kRV4PwevGGv40GRO1UF9ETAn526nhKaqS6gJ8J5b9KHW/Ub
riGgJ8I6lDk9gg5d0hKI9wKfn5/e5X2EtsA9W85f4d/dS32SmcA9W76X47Qh
bL+WuXhA/ZPXQaFv8zS7Wojv1D/Bd2adi4s9YyGgLwk/+eQ917PdD5YqlCie
D7yuf9bhsNhK1m0ED1b3WlFvsLIYRX4LxyNkfVnWapqasKa4BPAFl+9+GGGn
JaaTTgp4VkGHbScX64hHFDcPHjVGv/zUDF0BnRTw8Z0Wnx7gXFcgLg38ybbT
KbOTDQR0u9gfVn91aqtaGZ//gW8LWZw87WcV60uCG7bbPSxrgZqAXiT4jmvq
DzXmawvckwE/njdy5c4PdUUh3W8BnzI907Dyg7GAjiR4ScOll84EmArEmYEb
dUiKTCi3FNBxw3w+rNflLyGKYl7HgS9+lLpeBOjyugPcIuhUhWGWCa87wAsS
lGY7zbTndQf4mSE7Jo0tdha4RwduF1E76k5sQ87PCP49ZMMK6/2tBM7pwZVW
eg/oXN6B1x3gh1v2uGU4wZPnefCtMxymbe7QjNcX4B7r5hj+ez4CfUD4twP1
7WYVznAU0I3C98iVdMzQXpRv3nVGeJ17juIOjWuUn1Ded9aICEu2A8r77Bsz
0ellGxFH4xrlr/oU5Sye2lBABwf8V9/Xg1w/tOJ2sR7kJdcBG11cBXTH2K/e
ebTpwbnKArpv+H6tajR6faKtspgs42uIQ3cM/DXpj0EnC7y0xY64nxV6wkXG
q4hDtx28eKKBz6M7JuKjjJcRh31Q/+yyp+ZfdFoI6Jvzfet2WSEDj9qIvTLe
lDjWs3jOzL9v9h7xe/3FeVyQB2Brn8lJoztzXjw8J2ZsSWpYgfMffCVxrH95
vWP7o7RteDde54LvanSjyzzv9uyfsA603ybHjnHd/vBbvsr8FpTvuNug4M6r
Fn/4Lc7kt0B3D/7Agh4BLcOe1LAeHLhtq8xjQwLUeHzhOaanKrp6N2v4B7ci
zvmwoVMSNXzQjo1uf/BI4ojnAN9J98rlfBdx2AH1TDFfFhWW0Jjby+d02d55
6x47cv5c1qW438B323IbLs86r1nXs4u/23J58Jr47Y2PRtRjjv1/xeDqVbGb
LcUnmic5vibhUFTrX3pilGx914rWd91pXmLdoKWTLo7yMxTnZOs+NTrXgK4N
60hFe1usLzAV0I3l+3becYNPNbEQ0D8FP9PSeYuYZMn7J3j+Zlr3oV3gQTmB
9dvYWYiz1H6sR9pT/NJs+j6Cm1P+ceissT465ROHXhV4DuUHhy4SeBjl+4ZO
CseNkn4U9EnBp12LT3iTYioMyB8Az8t8t/3kzFKFoH6OdcrP9BMXP7wsVVhS
P+D8LaTvdJ/mYXCfBX6XX/nXsk4c+JsT9q8//PYroBMHvvWrx/ntXX77Y7Su
AXdcExDdY426gN4T/67h30ssBmsJ3BcFH0J6TbjnCd7SLy8vNtNIrCH/Ezx2
0l3jhPJfHP8HfuDEwo6j2pQwZ3+b/HPE06B8xaw+lWsalDFH+UHw22kcchxx
m2tKdwdXMEd56Egj7gfl9xVsfpLytIo5x7mT3468F+BRQY8OLlVVFl9kfAFx
6PGBb9uU2DGrVkXsl/GdxKHHB36xcobq8d7qwk3GrxDHvQhw08jN/QwqNcVq
Gbcijvh18BH91+a1sf89fmV8DHHoSYE7UhwydJTA1+9OOzgowVAckPEtxKHX
D76x35cdwttEaMn4NuLQtwVPXPGgqE1iMevb8jkOcdx/Y53CuA2D/J8Xc7/i
8wUTz7otQkq5/4B3u77PNDhE6ifg+clm0ee/V3N/ABczP834UaMkEGfM64WH
2pXfBqmyHwh+wOWKbwNtDf4egb9Mv9vuiLW2wD0TcK9lv/IfuuoK3CsAX/hE
t1Gwsp7APQHWw3NIWvO1tq6Anhfn6ZpwzaTfViMBvSpw023GGV0fm/C8yjoZ
tfsLlkZbCNgN64LjSy9tvD5bGnd8z+/6kvYBi6rYbuAvdS+08khT4vzy4Dt6
b0t4d1SV7cb3tG799bV7J022G3gnNa+y58F12G58j7DLvjlzrA0E7smA/+W3
KDepvpHAPQeOR6561d0yR2ovuFpOYMQUcyuBdmEd8TS0vY2nSi23CzyneLny
QmVVbhfHxfcqGV+9XpPbxfHj/ZWPeSzW43aBb905bnHjKCNuF/jgMalGVm/N
2E/j+50FKj00FtcT0E9H/adpGpZv9LHidvH9+8jKRyZa1gJ5F5hn+6R7NS/m
czHwYrHD899zMcS78z34uT41tT1tBfTxWSegXp57yi7pHITzQblGmM1xdGP/
Bzw4up5+yt9tuZ7gYatuzj5x007AzvD/HeN732nvoM12Bp/vYRs+fYQR2xn8
nxO7dFzjbNjOnIfqQDf7chdntjN4yIiDcx0OdOH3zjpYx0KMDLVVmMOvW03r
CNYVovLjohulfwzUYo7yL2l9gfqj/OLFBy63DzZkjvLltL5Au1B+wW2HqXtu
WTFH+RJaX6C9KD9697Jai2uNmPN+IK0j0K9QfmWOy1Z37U5/rAtiaV0AO3Be
hd2qS1qnS+MC/HOa5yDrY6r8HPhpZb1eDWu5R5v9avBfN/18Hws99p85bod0
mdB/wD37O2lMtTZmfxi8Orj2Xf3Dpmx/7IeHzG9XdndfBc/bfO9zQKnj1f7V
fD8EfLp2t5GlrZTYbuBtb9/7ME5ZhfsP+Nq3b8LqO6hxe8GP3JnezGy/BreX
879Zp5neP6bN7QUfU3PqztYxetxezjOz4t6jecUG3F7wxe5uPrPOGfM4Alck
jOi5u6k5vy/4mWUD3XLPFZby+wIfnXu55UodyT7gATp3L44Kq2L7gNem3QtW
61zLOkHgmv4H7hZ0UWb7gFdXLcz+5Sb1B/Chn2dHTFmkzvbh+1jKvu/L/bTY
PuC2H+ek9L1eh+0DXmfPkVMTzSX7gLd81WOk+zdpfoBfZ7Pdp/6SS7XcLvgP
88lPQ7tQPtDwY+C3tRJH+e3kp6G9nOfzQpOQHquk9oJ/qrxnEPdZai/nBRqx
QHHrohZz1gMjvwt2QPmmYSe9PIUuc5THvTDYh/38lYeO1O8rjSP2u8gfg924
/pmBP3IspfHF/hv5Y2gX/IToDWs/7tugy/UHN7c0FDHtDbienN9m0d7P5QOM
uD7gPbL6Xd0fKz2f72lVnxddThrx8znPwIU+MT39pfGO70iPsI57b2tp8bzK
+2OzD/89Rc2Q+wP4oI/lSy/dt+R9D/Bm1/xq6v2S9lXwvdit1vrwoYS+XB7z
z10635wtO9+MpPPNh7Lzzbl0vplJ+9u833g73aPN80YC+V0wP6s1We7V8ak3
r6PB0yPGN6194iWQxwXPWevnMjNsiAdzzlOts7bzjgMDRIQsHnsExWPjvB7z
+S/zhA6fljcSyMMBXpvwP30k6O9g/6HcacfZXdHWoo+MFxOH/g7W+86kdwT9
HXCrBg9GnVljyedWsNsMWu+jPug/GaRfBN1G9JNt4WOGRE204vW4nEMHiv2f
4S2jUy6oC+g6sa7ejAf5LdfqCugxgV9/cTyu2TNDAZ0g8FNeGt4Lv1oK6ASB
XxkQO6DMox6fA+J99f1Q5/k3QxdeH6G9VfRd+0z7Nih/8dCgUDczD+6f4Lc/
LYxZc7UDn6fj/bamuPqHtC5gHYvWr1cnejbm8YXnvPZu2Uu5TQfut+j//ccf
cS+52p7HNfqVRbuym3tyfP/YB4unfTDMJ3i/VemjCrXbS3GqaO9LOscPkL33
YHrvrANL733vm6CrndLNmOP93ns/o4/dZSveL0W7qsKLr7WKbc/7S6xbfDFh
mP2WBgK6qODLSC8FeXTAbbeP8jpdaM/zFbh559AdE3t3YDuAj/bVi/rxyIt/
F/bclu/S0da3kYB+NOd5nhvv4H6uu0AeHdaNqH7YaPoAKzFbxusQRx4d1qFp
ldG+QVtLPgcHD+o92S1kjWR/+A/NtKLr/mt/1BPcLLvFmsLf8y3GHbge6a7g
vAx8gXfsVc00M45PwPsqrPyR51BkIXCvFe8rMtnz8MYTVhxvwLpxxPF+eT3S
qjjAdLG9wL1TlE/J9rFWPWDJ8Qm8biWO7w6ekxugnFR21EFA7x7vK/W+o+mP
ec35nAJ8VOj9vPDubgI6++De1tkvA5NcOZ4N7zGz7tjv98t0xTuaZzheKHDm
nKFD9PmchXXiL7d2PuXhwOdQ4ANvhj2eMc5UjKT3B/6O9F7gh4Ar+TdaODms
zR/73ha0771Mdj9oPd0P8pHdD+pG94OQn4DPF/S1rAL83Xk/GXyQ/6W9hvod
BPIKgH/8HPjY4UlHgXuGnLd5eo5/dk1PgXxsbIdvnm29DPvzfjL45sQGAWu3
DxTQj+N75COT32yZbsdxIOD9x+6I3t/MnuuP92V17JhjZq/WAnkRwEeMO+Lr
aezO5zXoz/fudva6qa4qztH3Gjz+XbdXbz2l+GT2nyO8551zVRHId4vyLdOU
3tTOVuF5ieOO7kWrNB2kzufX4D6PEoc9GifFOeP5H48/0xzfR43rj/K7fgUm
rD6qxt8FcJPFRg3WWkn3FNh/XhqcpPZYQyRBFwLxUXmvi8b5abKfA16c+C3/
cHAdAb1+8FukE4LyeL7diIA9BqXaAnkIUH5+xS6z9vN1uJ+j/Lxc7TKnm9Ws
2wjuEvTVu49BNes88r1V4ngO/NjwyWbzyjrXsL4Yyuu7bNNVn6wkcM8fPHea
xfDdxbWsCwB+kziew3H7JVdTmh1XEtCnY33iG1f/6ntIWTyU8RDi6Ce8z7wh
ZlTMEhUBvRiUD0rb4lR4RJXP5VkPhjj6A57j3/JSzbvf7x06ICg/nfRA8N5R
XvPQrodqXTUFdDFQ3u9AdCNNXW2hIeNDiOP94jkjWiZvGjpZh/1elP+WHnvi
ryd6Avlx+f26XT8yM01XBMj4UuJ4Dp7/zyzfipg++gI6I+BzZ3cLN3+jITJk
cf4rKc4fugwof+JZ4JfoH9rCUhb/v5vi/5GHGPPAftLBwHcf888h19t+M/dI
8b3gjQvHHb9o04jjnfh8UzEs7k0/Fz7n4uecfejWxbUJr9/BaxZFDDnqa88c
8/ADistaLbv/6Ev3H/Fdgz+Q9HTMg9Tf8yH8ar5XMv/GtJwB0jkauOHjmfcN
bkgc9omkuCPogXLcddDkyuTxDhyPBx5TtXyDzTzpe4p2Nbwycd31cFeer8DV
H4ztGxrajv1PcMsWgcbZb7r8cQ4bQeeweF8of4R0LRCfzPnKet4YrLK8K88/
4M7izJVe7Xw4rgw86UXWkMjHrfi7z/fmYzJyLZpZirM0P4OfMbKbFfHeir+z
4KnH/xmd62bFfiDH0eWn1T3fvTHPe/AD613dpOpeZMb+AOt0/rCbNtdQWYym
7z7vI5FOxXJaj4Bf0/pcsCxTWYTRuSf4HEW6W9F8ZYE8PeDlf59MsvRR5Xgq
1he8ve2Fxy1V9nPAr+9cuPpQjKqAThZ4Rn+VWJUEdT6/AN9kEpxar6sG+wPg
RX4Da/cXqQvoKYBnBYTuGRKqxeca4F6fS55peGkL6BeA/zIS6zLztAR0AVgH
pcijuPxFHQFdAPDem7/0Wn5fl/0Q8K5HchoYDNZl/43vf51vZlTSupL1iMGN
g1fZfcmp5DgijKPEXpHDjVZVKoJk584mdO5sJjt3zqBz51DZufMFOne+Kzt3
nkHnztAhAnd0dxix9LKOQL5V8DHt9YzXvNPnuCnWDb0UNtI9S0Woyu5VFdC9
KsRTcXnPAQbTf6mJ0bL7VlfpvhXOC3g+OXvUsHqLpjgvm5/X0/wMHRyUN+3Y
W03jro6wkc3PyZifZfsV/rRfkUXnIJj3nKfu2r9thJ04/3/wlbLzUHM6D8W8
h/HYOPH5LLvR9hzHjt/tRPfZcd8B4/p4yK3i15sai9fk53M+B/1kHY2nlYpq
6j+8z3Y7csxY5yrO18X5pUPaz9Q9psbjheNXfXvWdvbRFMo0vvC7zhX/HKjJ
thNWdD4IHnBhyUTbBg48L/F9PTovhh1Qfsi4GWNsf6+nsM8AfmXJxyv12try
d1muLwSO+bP+9WfucccHihu+65M3jPqzvEY921VRdz78f/P/6zmfKD4Q3+sU
FeWYeebNxBDSU0b52FFZPWJDShXbKT4W9ZxYUHLzx8EShRfFwYJnrTlXqHu0
SpFBfj546GSN1B16TdjOfO6z8M0lMb2TyKdzZz6XWZNzMvXqL8VTOj/lPDaB
RZ2jPlUo2lIcL+ys/OLcp5zqYs5LCm68paz1aZdyxQqa58G99d42K5lvzPHn
4KPu99Hcr9JApJOOLfp/yauKUztGFStsKE4VfPQ45WiDtFLWo+R76J2+hX++
W8n5NcEN9ZVnPpypJCqpP4OXnn9rsG6PqgiheY/zwCSaDEmM0OXvCOftPJKU
69nKkPs5+Nd8/+f2R014nufnvNb1dN9gwfM2+PLaxPJGy6xFCJ1vYn8jd5He
D8uyn6ynD17UL/eo+7oS1scELync/Tx/bznnAQU/cWjhA7vu1Yo3NK7BZ75r
P8fompLYRbrwrD+0r6vS+8Gq7P/wPuftlOeFBb/XQdBboe/Oj6uh2fkNfykK
qD+Dr5lbPzX7jIroTv2Z8xgMDFpb72kx62GBq94ZeWDMqhLFUurnnIfBr97J
of8UK9yon4N79VCu/hRaoliJOELiyeVbnp2cWqZIp/4P3uTYTvNzd5UF9CI5
nuess1VgvqqIo/6G/RbDEouMPTuKWS8PfF67npv7njQXf5GdMX4b69+p5zFG
XbwnO4N7Ps1IK9uuJ3aTncGdlu6atSfbVCC/O49T43Y3Ln3uK6bI4nx2UpzP
TiqH/Sg/ys+eRHqv4E8TdDRyV1Qr6tK4Ai+nPOzDyP4cd035ym/RvRvwB6Hj
+w9ZU60Ip3HE8dWL5zpfrq8kSmkcgZuUn3A/rqQqTkD3EvEVlH8c+ZLhb2cc
XZHRILiSdfrA577LdU89qCR6kp3BFdpvDS8cURbQ9wRPovzaWGeBv856N2mP
ko1A/gDwFwnOzwescxDI98bnKd0fR1775iUWUnsxD19NTlnW0V1TIE8w3teV
U0fXb9imKfB9RPm48VaXTI8ZCORXxvx2mfLbIk8w+I2aJz6dLVWFG9Wf4xUf
zN718JoBrwvAlWLaLYnyNeZ9V/DxLVpPP/7eWFjLznfy6HwH5ykcrxge3r1p
tBmfp6D8HDr30aDyGNfi3ODpWoYGAnni8ZxGF3ptT063EMj7jvIr7OaVRycY
iSH0HsEdx/fLK79SrlhKdsY8UPdDaNfJ88tZr4r3aSvrDy3pV8X5M1DegvzY
PTS+UD4qy6PrHq9azkeI8k7kZ66V+ZmTyc9Mo/fCcYkxHluv61SwviG423en
FWkZ0j4SxtcpytMHvx38Q7r1rZ3GRry/gXHRkfLTYb+C447C4i9NLzVlfxj8
xetN738OthTQu0R/jqQ8aNg3AO8h7uo5z7Bnf5X1yDe9i59zx14g7wX4p3Op
024X2vP9KYyLm5Tn5ZHsXKYFncuMpeegP997103xYVxD4S6Lg91CcbCIC8Xv
Ii8G8pSAr59k6V9Wv44YivwyxB9T/gv0Q74vrG3i3ciopVCS6UF5kB7UI9k5
ZhSdY2IeRv2tj0ydp36/kUig+mC8rxnaODFzq5m4T/0MXHnQ//TAUR/wjLAt
gxe9cuf7p6iPEulQIS6O9fZOP+30oVxDQK+W9WULk29caqshVlN/gP8w/vmb
1c2M7URbmZ6DDuk5nJTFFbemuOKRsnVQDq2DUA/YwYZ04TCvwc47A10/5cRX
czvBe30dGrX5mArnnwLvRufaeC749PgO/pe7SfmnwJ/vOztXzdacdQXl51D4
XdTrbfTuqH/jgafL4q8cKP4Kvwu+2Hf7juwlUp44PC+A4qC6y84H69L5IOrJ
9wenPdL7sFGP9Rs5r2Dm9/27jhkxx/9zOd3hywd1Xc6jh354fOXzFX5zf3H9
wNt+61gnN7KU6wF+KyIvqn5GOfcn8OU2+aaDfCQdQvCKebZ/6TeS8pPyeLxc
OSS8jaQLCv5pc7bnV0NJz5njBNxDVN8e0WT7gD+V5aED70F56NAu3sdw/BIx
8qqUtxH885fhtt0SpPzC8jgotAt8vfvwl48qJV1Q3g9ZOih7QryUn451qSlO
CfUEn1I0YNTh/f/J20u8RWODiQuUjLmfYByNorgjzotN3OtcSlCSjZSHjvWV
Kf6H85cRPyPadGq5vC4/Xx7v3V0WP9OY4mf43J3s2qpLXHZz/TIeJ7Bri4f9
Z6d/KuVyvM5d9TXPc321NA6xT/ty6NTM1VJ58NSlDz8+X1vF5VlHrubYcIWh
VB58YXOf/TGKSv498Bzyf9A/wNVIR471pqHzplo1+2n7htxevOfPs5a55M8v
4d8Frx+lv2B5Xjn/Lnh89tj+Le5J+VjBD5x7X9yhr5SPFTy3f2GQwlnK58j6
vqTDhv4BXvXIsrzjFmPWwwT/mGQ2r8lDM24XeOGpvP0n2lvxOGK9teGnDMeM
lvKcYlzOqtMwolOxND9w3uZ7h/vZx0h5usFT/Qferr9AyvMOnl+kmDW7sIbt
C74+eurWrcHKPL9xHEuhs75xhpTvAPwW6Y/BDrxO7KMYPthc0n0F9xK5AX2i
DNgOnBfCbefW0CQp7yGvT4dldnEskPIUs27YeKcyVUNztg9+/yetQ8Hx+x+U
XKIjDSS7gavRehPlUa9u4U2eljv9Ynvi9/vROmumzN9LJX8Pz+F8Pt96zdcb
I/VP8ExaZ+H54OvjZ/r461Rz/cA9ZPmLwevXC2/07ICppEtPvM9qn+lB3Swk
PXnkFXF2PzhinSXXk/PnkN/I+VGgD7PO2+DNiwquJ3g7L5V2PXNr2e7gu2j9
xfeRkKfMcat2zgJrrj/rzJzfdOKHspR3jHV1hj6bsrGdlC+V30ObEf31LnTi
dnH+1X5jx752lPKkgA8yreyYecaFdX3B40a7rG1WXp+fI9cH4HvLxHs5lwS2
Lpb0wOX392E3Pr9beNb2USfpew3+XvVs2ARfKW8p62e7fR9YoKjh9vM+KuWN
4vN+qm/45qNGH65L/ZnvZZzM+2nnVMb143vieYcSn2RLeR/A40kXi8c58X9G
GqskK6tze8FD/u5fsq+JlA8Xf9/Yfnh08Dtt5qivH+lOgHP8oY6jdfXLhlwf
2CmN7pPelfnVxZRnB//m7+S4gIjCFGneBq9jO9wj8YOURw+8syy/D3gm5ffp
Lov72k5xX5xXFLoidD+O9fCRv92qddf17Uy5nujvB2k/Cu0FT6Jzc7SX43VP
rjl+dqKUL0PKNzKr/rQ4Da4Pn+NP7paRNUHyr8CXhcZbpKaWcHvQvnjaR4J9
wHv3qd+t8V5Jhxz8+7vCnxfGqPB44Xxoa270cZpgyPUBf6135+DdFGPut+A/
5xTPjx33S7q/Ss97TPeSjGX7VJW0T4XyvP6l+ziss0388e7GX3oNUeX3Dj6U
9p3wHLy3S3T/xVi2Dq0ny88IXvol3HpDfh0p3wryM5Du2XDZ+jSf1qcoz/Mq
6XqhPvj9T3TvgOMe6O9nKE80x6/T8yLKNlr7LpTyZYAntwy0nJQtfX/RvxpQ
PAz6J/6eGFbmNNi1TLpfR/bfR3HO+P/gtj2qkt8N1+Hng5sFP+49LEpPyhdD
9mnmahn7j4Yh24HPO0hnwEq2z/CA9hnAUd8ZpD8DO8JuWrI8p3y/+FWJ2XcV
KS+nPF6X84NQvVbUTT1c4CXlD8Xvp8vyivL9rCYrJiXFWHH/5/pXW56w2Sbl
YcR7bCvLF4m/n6F83Pg3xrEH6Q+gPK9zZXno0C5z4/1jQt9I+UxRn/UU/4n3
BT7hQv5VnXEdpHyp9Pzo0EZPlryU9PDxPrUoTpLzl2F/aXXolIJrUh468Iaz
z6RPTXLg8YX36EL6DKg3+CuKA8T7Aw93yoiL1bHgfgV7XryUm7e+ujFz1jsi
/Tder0K3iuLfMF7AcynuC7+Lv9fcXHeko5KU7xv2W7MoWcd9qzRPovySl15Z
kz9K6xo+76A4Ovwe58NMzdjctEaqD/jBvMlL5h+V8gTh7wPonjLrVdF49aP8
PigH/o3y74DDPgdl+XF4/0a9dYfaXVL+GtgjemRiqxmd7Lg8nne7QbiZ/lhT
fj6ec5DiWNg/wD4YxaWgfugXwyieBL/Hfg3lSYGdYb+vFDdySravhXwfsD9+
5y3FA6CerD+vfr3DeNtW3D85PxjdT8fv4TnRlP+C4yfo/wUlNq7z+q7DH/tm
1rRv9v8A2xA3kw==
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxFnHf8l9P7x9/3/b73R6UIKUVWGYmMREihbElGiWRlFEoy0jCSnZQdQrKV
nVn2XiEzhMgI+drxez17HY/fH/f7ut7nPve517nPua7X9brOWocN7T0krtVq
C/NarS65s2RTyROTWm2Lolb7Q/oUya20/Sn9Csn9Vaej9FOln6V620tvJnmA
yjeVvmtaq03NarVeUa22l/Q71fAd2vpo38U6Zj+Vl2WtdpmO6auydSXvrmq1
SyRXkzxT7eyv8tOl/612uurYPyV30DZIxw5Wm+NUdzvVaSp5vtp6RTcxQbI9
16rysyUv1f+vVD5R8kLV20flbSSPzH3NF6nOBP3fQ3pL2tG2p/RWkkepzg7S
99Q1DFe9rXXeR9TWD/o/WvubSV6gdq9V2XGSj2v7Wde3XUOtdr3kbqrfW9e5
WLKvth5qa3/JPbXtJH0q1yG5meQzOnZb7lFya53rL5VfKXmVtsNUfwjXL/1X
lXeQnKtzPqWtq/ZtEsrZf5DKtta2g8rHJn4OK0peq+sZqvITJAdwndSXnKBj
lkrfUfop0pdI/0v3/Zbq9lAbv+j/BYXlk6pzvvT/Sd9I8nRtu6jOv5Lfq90r
pN+j+x2k7TfV+VHnXU/3NIVy+o3+Hyq5Idej7XDpHSWv0TZI+iaS12k7Qvqm
khfrOgZKv0X6A3rWV0u2kZwk2V/l60t20Xlb61pXkxym7XeV/6zyKxMfu5Hk
ZG0DpLeXvFzbwdLb8exT9+el0ofoXLtIH672p+j/IdI3kPxW136Atp31/9jc
7/AtPYc/deyBKj9EsqXOe6z04dJv1zGnqc72koepfC1dWyvJgXpGLVVnsWQP
/R8ifaTqH662zlWdUyQP07P6WfqpnFPXcQZ9ROe8PPezuk7HvqhjR2n/RTr2
INUZpfLrtb8/34z0G6Q30zZAba0oeaiOWV31v5Gcpf9XqM6r0g/R1kLlX0u+
rnPvofpvSN7LN6A6O0l+ozYznWd31Vko/U++c7596eeozjS1t5/0s6XfKP2O
wsfeIn2RyhMdu6vKDuQ7Ufl0lR+h8/ymezxS5z5a+t/Sj5b+rO7rGMmTdMxa
qtegfa+pbDXpw1V+lso/qNynV5L8UrKV2txc5TNV50rpXXSuxdpXqWxv6Q8U
Lr9d+w+h/0i/S/ov0geoziTtH6j//dT+Qbr3Q6UfJP136TXVuUnX8K/0e1Tv
GtXfUt/13dKvlr659IGpv7sf6Nepv4vvE7+7Ufp/teRlufv2NbwH3c9gtX+C
9t2f+Np2lVyo8jNVfgnjJN+8yu/UcfdJv1FlXXSu+3KXb6uyb9XuyvQ/6SN1
fdP1DC+RPF3bDOkvSi7RvufU5n7Sz5K+e+Sx8f7cz6GL2liqbR+1M1b7f5a+
p/Qzpd+q+56u7Txtt2mboe0CbT+pzu6qc4bqjNG2q9p8SW1+qus/X/r12vex
6izRPXXU/n66lo217ah9vfS/kHxb8n3tV9Xa32rzPekJY470uq7tGdWZr52v
qfB1lR8p+YHKn5J+hNp+Rvsq1Skkt9a5F/L8tb/StprO1VTXso3Kv2T8UVkX
6V9IXyL9Eu2/WNtXjPuSF8au10111lebx+janle9uxjzpbfV/ptU/rj+z9X5
Sukp/VPnmC79CelrSr9F+mPSX9S2gvQGyfV07CzprzBuSq6s7WXpT6v923iP
upenpN/Kt6ZzzZE+XXp36Wvr2JtpX/+fSv3c6pJzVWeGynZRnUm65qWqN5lx
W9dQV52/9az2lT6P7131D1H976Qv43nofxvp6/I9q86z0t+X/pfa+k5tHqW2
/qRv8ZylD9WxwyT/0bFdtbVT+WDep+qcGPt7WUf98rTE9fvo/16x+9tVKuut
+mslPnYNlffl2et/d5WvktiW2E36SfTHuuf3beqe+w5U+ZjcYzjz9ZqS6+v4
+3TNr+r/Vbr++/X/cslOqr+D9F10nuGSL6jO89o+Tj2+tZL8RG09q+MOVt1P
Uo+HrSUXqPw5lQ9Q+YLU43MbyfXV7uvSv5D+qbZW0teSbKf2W0v/EPtA994V
+0bnXVN6L+l7ca/SuzH3Y4eo/muq/xFjruQa2j5g/lBbK0lfRfINbc2kr0Sf
19ZUelPJfQr3pUFq58PC/W1L6R8U7m9blH5nn0V+h5tI7x95DOoofUDkselJ
7btM+nqqv530SPqjhb/RbbT/V13rQ/r/bxg/H9FWizzOzE7c3/aWfEr9dXri
uXiy3tMTOscUbS3U7j+q00L1u+XuI8epzQMK39dnkq8wpknfTHV/lf6N6v+m
up+prebSV1b9zWN/g/S/3Qp/a/MkXyhsV3TQsS8xnkvvKH3Hwn3+een7F35u
n0r21bai9AWF++Wnkfv1fdIXSP9D+qc6b2OdJ8W+VXm7yN9AT+3Lpb8l+Wji
73SfxPPeNcxfjPHa97X0/+n6P1H5CtLrkr8w7vMdqc61qnOS9Emqs7me1ajY
9hy2KOc6ljlX+x5UWR/pb0p/SPp+3Kvq/K76V0m+mvpemkj21DN6gPFW+kTt
v1TbIh3zfOK+fYjkrqVtRWzGqZHf9e3ad0bs8v9sd+SW2HE65hRsbLV5mI49
QXVuUvn1krG2O7TvHB17a/T/zxrZjflE+uHSr5a+qeoMjOwnXFW3HYsddqP2
Ha/yQ1V3h8JtPl7Yl6Du5tghkW1FxoKfdD09JQ/T9byjNkfHPgd2ezf6ieQ9
2iZI7yH5SeVjNlM7d+j5rKPyxnqW90hfV3oT6Rvq+E9iv6cV9G3urX0n6Lhl
2n5PPA/errIF2l+q/qex+yB9hj6+GNuSd9xQWz5pMW5T5y4d8730u9XGWMZt
+gl2icpPk7xP8lvmPh0zQvJjvlXVez9czwb0udh1VsdGV/sz1EZZeBz7Qtvb
3I/KD0rtgzSVfpvqVKozgLlL23vM8ZILw1jQQnU2xJaqPD9/rvJtI9uKY9XO
NZXLFobywyS/1rYp36re2/c65+c4gYnvu4Pa+h/jiuqMlKzU/p74EmpnkOr9
ovIxqleovKXa30nlHVT2k7bekX2OH7W1Vx2czCXaNsQ+Vv3fMvt3J4b6XbCH
VL613sOZKu8Sjt0L+1vlrVQ+SuXdpZ+Y2VbvIb0RdpuuZUfpN6n8FJW/J7mK
yt6VPEOyubZL1f6p4Rq6q80jVfZH7Pf3PX6dtm6RJf9bYi8mvr8dJR/O/Bwe
kkx0rlj321XnyqU3k74j9rL0FaV3k55Kbyx9h8o2Pbb9iaEt2qSdK8K5ftD/
48I1cF76Bf1jex03pfQ10tewm7GfGV+uDHXoP4+rrT+lPybZRPe1graL+WZ0
DY/yfVfuo7RDndm5fbNHStvf2OHDeD7YJdrfDFu39HP7mXE7cvun8c3r/zja
Vj98MvM1PSF5D3OB6lwjObhunXrIf4N+rfYti33s3Mzl5+v67lV5C/qT5E3a
cunT8IV1HR+r3kzp9zG/qvxXyUG6/ut07NPSL2aODDbw8dqmxvaXR2i7JfhW
Q7Vdj/8reRy2prazapZJ0F/KrF+g67mudFnzwmVpqHM/8730JeE6M+k3Sr6M
78kYGe4JIIX7/SMzjoFPWtV9Xxfp/83gBtg22MUqK0M5sgr6taH8bLV7a2mf
6JbwbKjzr8obSTYO75o6vPfpkpuXtiHfV/sr6RnO1PlXl35nZYxjVck7KmMf
qzAGVsZxmkvO0LHXYb9hC8Ru/xzsBj3zDaQ/WrqsSTjvXfq/svQ7JW/XtiJ+
g+Spkk21XaI6sxLLXSTfpn+p/C3JO0rX+VEyil1+rs51Zelv87vS/Yk+9L3k
5aXHnG/pD4m/6Z7MAQ3+VjeqfP6V6m5vhXCd3Mcu4Ro47yXapqnsIsn1dOwp
eud9dWw76SNU72fmZJ1jmuq31XNYR22spW0Sc6Jk26BPzv3dMG4/WLrOA5Kz
Q1+lz46rW7+MKUTnXLtuf4lntqq2WGVtJFuFOj3DfTF2PRy+C76P+YyXOm4O
mEfdx1CftlsHffmclHmOwubZSeVbRZ7HemJjMwerzjRsasnHtN0ITiP5BD6v
9HaSH4W6H0t+GHTKwN6wabBnPgvXcZ2e3ed8OzrHJ5mfA98I3wr3xjg8Xsc9
pf+d6saRWkqupm2i2hld9z2i862fobovZC5bPZRvque8Pn1M5/pG+xrw4xiP
S49jjGc813XCe2knua62G7D7S885jP0bqaw936z+L9bxE7AVeV6VbbjO2G6M
1ZGxleMkf9Q2omYcYmlknIVraRfa/60M3wX+RGUMaEPJH9Tuhiq/S9c8R3U2
pR8W7jtrh+tcK1wz/eLDzPd7bWrZMtz7R/h32v9+ZltiE+a1yHbCxnX7PJxn
o3BfPOfNsNElH9PWUfpSXduPOr696jaXPFnHdlD5m/q/RP9X4JuSvEFl19d9
rY/qHm7Qvawr+aS2m6W3l5wV+tVinWsTfS9X0B7ztcq2xv6r2Vbdsm4fZosG
YzqLdS0dGuy/nSX9rcT+0PGJ/RD8EfDTDqrbWcd+jj8buc+w78XKuMkmkm9p
ezc1JoB/Sf0WqvNmZexgi8p2N331aL47tfmTZA5urWu4VecZqTqbSj9Z9X/K
XX+70LfbqvxQ1TmJOoVt1Lm65nVVfoHKr4mNSy+vz5iv7WbmOsnnVG97+p+O
W6b/k1XeS+c4S8dswZhQM+bH85lb46J8LG1spPbXwd7XeTeUvkj6YOnjwrH4
UfjJ+MtH6ZhXKvsAm1e2A3er2657QdfwhvZ/gz1cGWdvIXlvwE9Xl3yoMg67
Fu+0Mk7aSnJmZZy0peTDlTHZtpKPVMas15aco+1W6RuAyWgbis/KcbqGHnX7
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
4/8DK2e2PA==
            "]], Polygon3DBox[CompressedData["
1:eJwtnHfgTuUbxt9x1nu+LQqhhGiiklVZkS2JVCRFhVIyMtplhgYpkcqIhiga
GkpTtH+VFEVb0aBFqfS7Pq7zx/l+n/tZ57znPOd+7vu6r/vU6Hd5t8GFXC53
W5jLBfp/YimXq6KK/aNcbmyayx2ko4vqD1bj4yqvK+ZyL6n9cNV9rPKP6n+1
/k+VPFPlO3TcpvLj6t+4LJdbqnm+VP8T82pTeXWcyz2v9lfV/r3m66i6jmqv
qPb1uobnJP8p+UrJz6p8WJLLfaX+w9X/RvW/QnWj1X6Q6r5V3SrJeZ3/CslD
Nb6W+pyj8uFqe07lE3Q9ldW/vPqNkXyb5E8lf6D5R6u8WPWfS24i+U6VB6vu
Psn/aI5ZOvf7krtq/t8lHy35c5VXqn2G/n+ho4bmPENttXS+p1Xurf6j1F5Z
dZeqfwPVPaXymWp/W+WJan9T7Q1Ud47uxQjJEyXvrfN3V/83NOcqya0kb1b5
JLVXlXyArm2cxv+uul9z7kPfmqrrIbm25n9G5Qnqv0Ztx6uuV+yDchfdm1/V
fq/meV3trTX/WZGvgWs5Xe2/qf0Sjb9L7RPVNl7ynZJ3SP5D/aervJFrUrm9
/m/SUVKf/6n9PR23sBZ0HQNU3qC2Vpr7nsjXyjV/r7bjVHev2spU973aqmh8
Z7VVVdtSlavr6C75UMnLVT5Ux5mSD5P8rMpVdZwq+SDJy1Req3s2V9ezWHWd
VH6E56fy02r/U+3VdHSVfIjkJ1Veqd/5gPq/rLo+qhumaximazkrO0c7jW8p
uYPkIbrWKzSmncqJyq21nnupfSjrWXV9VVdNR6LfcwvviMo71D5V8jzJT6j8
u45bJM+VvFTly9Wnvcq/6FybNPcBksvUfr3q9udZ6Df8pfKBrEu1v6S65ZJf
Uv9vJW/VHCPUv7rqG+p6JqnfLF3PwerTUL/tpsjP72fJX2vMiRpzt8oL1fav
ynU0/x+Sz5f8qeT/NN/9mm+26raUPH6mxlfJeQ3sVt38oq+Za/9X8jzJTSSf
J3ld4PdTVbm/9Kee5t/BvdH8n2n+n9Rnf8m7in5/G2jO5pr/BNWdpT6nar52
kv+VfL/GjlP7HZL3kfyF5n5B4+9Hn6hvXr93oPrfqfYtqtuh/hdLniH5QMln
q9xK49tm843WmFmq+1vyDj3zu1Q+VPPtrWu5Ve01VZ6muu/UfoTap6pcV+Mb
SP5B7S00fpnkzZK/k3yjyj+oz+iidRy67jr9pimSj9JcHXV9IyQvL1iXHCP5
cf3fWvA7c4zK52vMtZIHavw8XX9bjUP/DtNvvSH1PMz3qOpeUN0o9Z+gDq9I
Hqny25ojUvt1kidwTzTmQck36fhF7fU0/s6i78kf6vum6jrq3E11jNT5fol9
r1D2x+n6/uR9L/p5nK+2azTmFo39VvKRmr+55FMyfXix5AbqM1f9j9PxW2Qd
iC78Se1f6v/lqrtU/atK/jn0/R6p+gk6/3tqOxadIHmc5Jlqv0DnH6v+T6CD
dH27JN+NjtHxWsl7CnvLE7reJrreVzT+ackvS96s336M5Nnqe6bm6635Dlbd
aWqvpvYnVP5Z429U++2qm6PyZB3v6HzbJR+h890u+QaVl6h/fc1/OvpT8vua
qyR5s+TLNH6s6r7h/dWcb6j8odpTtX+tukvUPobfr/Jp+o2n8vt1PZ+rTwWu
UW17af5FKpdDx0mOJT+U+v73Ut+e7I+6noaSy2v8MvXZIDmvo5vK1dV/ivof
ofmPVvtm9iPNX1vykZI/k7wWnaf7URN9pfIE9a+l9iPU/inXHPj51df11pF8
vMp11edK1rraVqNv1f9w9X9HdW+r7mvJ1Xlekm8Nrf/OyVuH1NW1HaAx9VQu
U9+HU+/3T2p8bdU9pnIP7onk6hqzTf2HqM+bavtIc+2l+9eT65HcWfIvartB
/ZcVXHe9yt/qGKTzD1P7van3nPbZHsxe/IXaB6Bb1H8Te6/6nK5znan+rTT/
r7H34ryu7wjJo9V+VrZWjpX8lcYM1PiBqqtQ8v78Bvpf8vW63rM1vqXGj9P4
7dn+ulrt7dV+rdpXSD460/cr1Hc/9TlE5Uj9H1R5GDpbfXfqfDV1vsN0T47S
+I3cA/WpiY0j+W3Jb0k+U/N1k1xXYwZr/uW8L2p7UON3p9Y/v6v9KrU/oPZr
U+sD9EJbzb+f+veRPAT9rTFPs9+q/LDK/6nvNo0fp/bpqntS5TK195RcgfWr
8/+ETpM8TfJslZ+KvTfsYi1o/GGqSwqe88XE9t9fkq/W9Two+UD1H6zx16p9
jM75GPpI5X91fS25PvW5RvLJmm+W5ntU7XdInq++f6c+/27Nd43me0h960ne
W/J89VkjeV8dV6vcUuNnYq+wL7M2Jd8seb36n6fzj9L48tn+W1nyJMmPa+yv
kiugLyUvk3xV6vIGXd8ulQ/W/5o63wua8zWeufqXU/+J6rNU/Z+VfHi2nz+n
c/+oo7zKfxatv7/jear8mOpWavyPPG/JS7lf2XwTi7ZRsFUOUXstne9Fya+r
vYrq/tW5JtOu8x0reZ+C98A3JT+k801Q+Xbdrx3ofsnjJU+V/IfkhqnnOldz
va/ykbH3hiWqe1511XS+QzXfSsmr0Hmaf1/JC3jf0YdqXyr5UMnNQtsn52v8
aF3Tu2o7XUcX7G/JX6j9+djPZmmIEtBepnM+XPQe9pvmPkzyuewlOtfz6ELu
t+RTJL+h8tvq84vkUPOcXGb931Rjz8aeUPnPyHvBAPSVxtTVuU/WubdiQ2r8
1altt7/Ur4XGn6v/vdSnpfrUV7m3jp6Sm0s+UuXviratmed7lY9mDWl8A839
usrfo+NVf7PqvlP5ytj6d5bab0HX6bgqW39rVO6DDZ3Z68eq/KrGnKjxTdXn
Ao1drGOWyk+p/z/qXxsfgb1H8gqVr4/9W3+X/AWyjsWMV31n/Z7O2fq6MtPn
d+scr+h8zXS+4/CV9Mw2qfwLtp/aW8a27X/TmK0ac5au51z1v0x1+6j8pNof
Rldht6n/E5IfYi1L/lLyTs23UX23a76Jki+L7V9MU3snXU9l1bWVXEXyY6mv
k+vFB5qquknYKDpfI8ljNdejkueo/Iza/kptTw4v2OY+B19T44dm9zuKbH9X
U9ufPG+NbyO5WcE+Br7GU+rzW8Hv95Mqf1T0vcAnxTddEtveXa7z7UztXy1Q
25OqexdbS3MOyp73rfiT2L9q3626yioX1X6pyg3Vfpvab9E55nM+1f2hukDt
l6ncSOWp+D7sbzrvadg3Kn+u4yLJ/SUfgL+k48KibYxPS7bHOkhuKPkG9Jnm
2A9bVnUPqDxW7St0vpk6bz3d7zckt1bbIZrvanSvxgxT/6Y6/52p/Y/hah+v
9ney9Xevxu9Un+MS+7fYo7XQJyp/pvZ+RfvX+6t8lObop7ZjNN/LKlfU0Uxy
OcmPqBxqjsGSG0ueJvlkyUWNHaW5vpG8Gn9J8y1Un1aJr/chnhf6Gl3JO6Ly
Udjy+K8a17ho/fGl1tiRqjtf7XXU/iL2jY7zsG0kr2Rv05yXS24i+XbJy/R7
H5T8rOSC7k+ceK87QfJ0tQ/U/BfiX2j+AZHt54WSK0i+sGT//wHJ77NnsNfp
eERyJcnXlLw/TC56zbJ2K2nO5iqX1/yLVb5WdYsyf2BQYv3VWf0bo+MkN5K8
v9of53kn9l8oz8xbf/dLvRfsq2s7QNffT/O+xLOgXeV16v+iymt1b8rU3r1k
fds1sr3UFz9f7fvqeEPlfdVvteZ7muevcrnQ9uuz6GuV20X2HZ7CZ1e5W8n2
aZfI9utB6rNO7W+ofaPKh+j4BFsks19bRPZVLpDcUuVC7Gf7muQi/q/6fMze
JHmTyhfqml5hr83bfryAdcW7kLd90ynyvV8lubPKZaF98Sf5PdiX+PUql+W9
/36ve1ZZ5apqS3S9+4e2v1eo7n8qv6T26So/ktk3X2jOg7HH2WNV9w37Oe8H
e7bk49RnDFhPaP3wjO5HbbV9m+3/x6fe6z+KrK/qp/Zd3o+MJ1QMbb++oLoP
VF7Jnomtktlnx6IzJC8Ire/fUvssyU9k/usbidfCsmy/XIGNL/nPwP751aof
krc+Qt+s1Hn/wZ/FRlD5DR1FXe+l6Ez1fS3Dvwo6Xle5bmYvHa1ns1DzddMc
8/K+R+z/H+p8icoF8D6d/2KNuUj9n2HPVF0l7p/KF+sYpPIlkfGcF9h31d62
ZP/9x8D4wUK1f1AwRobNvX9q3+oMlTeofAprKG9MATyCNcJa6QxmgQ2eWFdd
oPJG9W8huaD2vzN787rEtvh9kfGrs7GvcvZpe6pcP/FeMTwyntIrMjbZWe3n
oKN0H97JdM3e+r1N1P9v7NnI++2NkjupfU5k/Ku7zjsfXyxv/7tn4neTZ/2D
2jtLTlmbkrdI7glulXcdmOaXai+P7an2WOdL9H8FuiQb84Ha4zwGj56j2k/T
mNmS785bp52u417a896ju+q4R+X/sj26o8aXJL+i8d+x3iWXk7yf5EjzfS55
P/Z6yaHkrpL3yt6trer/G79Jc52vuv70AXOVvDib82z8OJUjZOwH/FSVw7x9
7hfV50F0iZ5fG9ai5Gc1fhF7MPpGxyl5r4kFkdc56x2duF/k95S1yJp8Bh9Q
62kbz1vlGbq+b/T/Pd43HQ+r/95q367yP6q/S+2H638NyR/r+EHle0Lb70V8
XPVfpOc9E32S2Ze857zv2NRtubehfYFA/b+MfD92qX8/1Q0Mbddg35wt+abA
OCR45OlF2zfbA6/X89R+EZhq4PWHzYoN+nNg/KsP+43aO3FPVN6iY4fK54X2
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
dDs6H+yAb1IQ3+kTmt+EDkYXg/Hfw7sSO36Fj4CvwB7D3sEeMlrlj2LfmwNC
53tckvp9x0fCV/ovOx97ytWJdTa6m5jAfYnjkRvYS3KOp6SJ8X50PLr+zNS2
B7408bl7E9s62DTYNuTTkvsPB518Z95nYu1rdPzC2g4dd0XnbMt+D7ldcKr5
fgL6htwqct72fC8idm4V3zwhHw0fBV+Fdxb9wv5GrhYxcPw13kneTdYMa+ed
xLkpD+iaHo+dc0eeCnXvqq114jZyWN5TuU3i/DxyVv6X+J3m3WZNsjbbJc43
vTezJ76KnWuGzuH9+jo2dorO4PmTs1M99PMnl4ccOHjZ8LPxj/hGA7xs3tHB
qXPmKoT+xhC5dOS4wctmTeE/8XzJ3YKzzfpfGzuXDI436/3D2LlzcNpZ7314
R3LOcSDXAZ2GbkNHo6u3xubG8E0h8gm/j819IQeDXIwuiXOvySlal1hfw23g
mw2bwVoT5/6Tw0EuxwWJfys5EeRGfBo7144cA3I32P/gAsBRAA9Ah6HLeKd5
t89J/NvJofs6sX8zEN0UmZ+AD4sv20l1jRP7uPi6HSU3TJyTCh/5+sD8PuKN
5F+1Vl2FwPEy+L/gL+Aw2HfkEzWLzBfA/oZbcHHO/PHZiW17bHps+9NT2+7Y
1NjW3VPb1tjk2ObjEvsaNwbOHyslfrewqbCtZibmPvTM7Em+10TuTq+c+edD
Y/8WMAGwAfiVcIfAxOBbwsuHn08M9QDN2S82n3Vb4Pwz7Blsezgl4CPsGewd
6EB0IfqWXClyDNCv7FHsVejMLzJ9Sq4XOQ98jwh/itwJvqnxidrOSOwbwCHD
/n4tdu4UOQjo5x6Jv28CpoQ9Tn4d37M4Oud8KjACsAKu+RiV2+vcbfL2H8Cx
+R4K37dokzN+eE5ovg94MN9E6ZP5D8S+wXa7pP6+BT4dvh0xmB0Z3gqei30A
VwAMCE4mMRVyYbGB+2f+JrlqvNPkkmN/En+eS8yr5BgXsS5yvl5OnDNInJd4
L/gOMT9if8QXP8nsNThV2IN8+4FvIMGJgU90aervUbCXkePD/gN/mW9zgenB
RyYGSiwUn31J4m8QwVuFvzoodYyOPYT8rtsTY7Jgs/B5yeWFn/6/yPFhvu+D
DUGOJPnE2BbgO3A58BmGp46JExsn3j68ZM4C3AX4eUMS59iTx8c9apaY4wBv
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
iA9wLfgrxF/AC06NHLMldvt/Cz1HEA==
            "]], Polygon3DBox[CompressedData["
1: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
7WYwKGoF3/8B3Vnq+A==
            "]], 
           Polygon3DBox[{{2057, 1192, 1387, 2639, 1940, 1941}}]},
          Annotation[#, "Charting`Private`Tag$1389983#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, 
      {GrayLevel[1], EdgeForm[None], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtkEsOAVEQRUu3hHTYgYmpLbQZITESSzBvLI4Q2qeREER8tmBiAeZOpe/g
9qn36tbndX04HowCM6uhEGV8+gWzDbwoTuEWxRh/8IG+xHNYLJndYQvOYJP7
HWzr3vM3+b2uEpktYTnK+02CfIazqfgq/1v9PNdgtzPnjPgEu/Kk6KN7z79Q
Dy3QWvv7Ozqqcf8RJvAAn/J7nc+JNeut/r57qj6Z/kEiz0/nqd7j76rCVZjn
9/APkAoxKA==
           "]], 
          Polygon3DBox[{{947, 700, 745, 971}, {951, 745, 839, 975}, {965, 700,
            842, 977}, {966, 700, 705, 996}, {963, 621, 571, 959}, {967, 705, 
           700, 947}, {952, 842, 700, 966}, {1796, 838, 973, 1860}, {1859, 
           950, 838, 1796}, {958, 336, 572, 949}, {975, 839, 838, 950}, {960, 
           572, 42, 955}, {973, 838, 700, 965}, {946, 42, 621, 964}, {2568, 
           42, 946, 2572}, {2573, 962, 42, 2568}, {948, 571, 336, 957}}]}],
        Lighting->{{"Ambient", 
           GrayLevel[0.8]}}]}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0jtI1WEYx/HHvHQza7JN0dmjtdfcYBBGROikIqblJWkwQzEoTqKEEBRE
SkMKKaJEzSE6OEnl3TyZkCHp4hRiRZ8/wXnP9/t73ue8N05JXdvV1qyIGDa2
j0Qk/gZLyaWjEWfkSizGKizH63gRG/Ay3sUafIiPjGb+Eu/ha3yM4/gc3+Io
TuN7/IizuH8sYs6eqeyIBfm7MxQajTkRi/JNXMImXMZmXMFbuIq3cQ278iL6
/a5FXpdb8Qu24QaeNdfOM8k97PUjN+KTfcv5V7UdeUHe5GPW2tD/jf9UX1av
0LclZ9SX5F3n/yz3yRk+w9N8nr9L3oR/4CN8Cp8l74tpvHM84pX5Tl7Le/kL
c01yD3/Aq/l93sEr+RCv5xf4NUzhFSxK7ugNzzvTjp7T8iSek3Pdt0CekHP4
KV6mns3z+Q13WpMb3LdWz0m1PfddVTvBU9Z/qscRo1fPoB5bRTd/wv+a0xID
/A9Xjt9oiThE28QB+sQvX9pi1+RK1v//3D9qVlZN
        "]], 
       Line3DBox[{996, 966, 952, 978, 977, 965, 973, 1860, 974, 1859, 950, 
        975, 951, 976, 972, 979, 971, 947, 967, 968, 996}], 
       Line3DBox[{1013, 959, 963, 964, 946, 2572, 954, 2573, 962, 955, 960, 
        949, 958, 961, 956, 970, 957, 948, 1013}], 
       Line3DBox[{982, 981, 980, 953, 997, 995, 994, 993, 992, 991, 990, 989, 
        988, 987, 1861, 986, 1858, 985, 984, 983, 982}], 
       Line3DBox[{2570, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 
        1012, 969, 998, 999, 1000, 1001, 2571, 1002, 2570}]}, 
      {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzz1LQmEchvG/EKQFzTa6pKtLL1aDEKbg5CAGTUGpp1LaS8pqz+/TR7I0
U1v7neHivu/reTicp3A1bA0yEdHE+WbEdTbiYSOipj9vRUxlHXv8i/2lN7Cv
j3GUi/i2b5wf2K+ocDOuyx3abzjm5lyPm9pFmaDK79j57Yi+/WiP8IRb+0NO
UHb+k/6f3kEfJW7BXeh37l7KU+5T/vInsuHb70j0JXfv3pm+617Cr+wVv0zf
bRf4tvOBvU7fpRe5ruxhzf/xQ/kPmfooog==
        "]], 
       Line3DBox[{1867, 2575, 2726, 1866, 1144, 1868, 2694, 2040, 1869, 2634, 
        2695, 2295, 2041, 1870, 2636, 2696, 2296, 2042, 2518, 2884, 858, 2297,
         691, 2162, 2797, 736, 2298, 613, 2852, 2164, 697, 2299, 615, 986}], 
       Line3DBox[{1871, 2044, 2556, 2160, 2857, 2411, 2043, 2167, 667, 2853, 
        2397, 633, 710, 1693, 595, 2570}], Line3DBox[CompressedData["
1:eJwVz7sug2Ecx/E/adBa0M3WrQhmi0SlUxd6WA2dpSKiTJQ2oa1eBzfhtNI4
rC6CG6jyeYdvfqfneQ+5+kG5MRERNexOR8xlIm6xw8/TO5T505mIEc5SERW5
pO9irPuVz9MRLazORhzqgh/rL+mxc+v6I/2k/Ke/oGu6drLrU3TBuW+05Be5
STv0Gq/4sTXR1nflHvL8FM3qv9CRlzDUbXn+G/3AO670+7SPDWd72ONvMEBa
LtJF95aTd6AgbyffwJ/YC7ZPeUXu45F/wgM2bff0GWGr+s9/bg4slQ==
        "]], 
       Line3DBox[CompressedData["
1:eJwNy0tKgmEYBeBXQqwcNKkF1LjSNhERNBHS0srUYaDgyC4WCRqE0MU2Ycuo
cSvQ9pDZoInUMzic9zzf/69WG7l6IiL2JJ+KWF6MGMq+e0W/SsF9Ph8xkwv5
YgdsNxnxZ1/KoT3hV+7EQkRb93SRf/Nre86+0Xe6xKf81k7aHb2WjmiyI28P
dpc/6ixv8WPetVO8p5f4CXtyf7BnvcNm7jL/8c+Ale0X/atP+bYeeVtn97Ih
RVbxdsbHssn6kpEq/2RZ95vvtvS7rvF/Jlgo8g==
        "]], 
       Line3DBox[{1893, 2582, 2731, 1892, 2583, 2732, 1894, 2189, 2312, 2733, 
        2637, 1895, 2638, 2830, 2313, 2190, 1896, 1164, 1897, 2699, 2049, 
        1898, 2700, 2584, 2734, 1899, 2514, 2516, 2515, 2892, 2687, 1900, 
        2567, 2563, 2566, 2564, 2891, 1901, 2585, 2735, 1902, 2676, 2883, 
        2517, 2395, 2558, 1903, 2782, 2098, 2197, 2099, 2375, 1904, 2668, 
        2783, 2100, 2198, 2101, 1905, 2843, 2376, 2102, 2199, 2103, 1906}], 
       Line3DBox[{1908, 2586, 2736, 1907, 2587, 2737, 1909, 2588, 2738, 1910, 
        2589, 2739, 1911, 2590, 2740, 1912, 1176, 1913, 2701, 2591, 2741, 
        1914, 2592, 2742, 1915, 2593, 2743, 1916, 2594, 2744, 1917, 2595, 
        2745, 1918, 2683, 2879, 2500, 2554, 2553, 1919, 2784, 2104, 2200, 
        2105, 1920, 2844, 2377, 2378, 2201, 2414, 2413, 1921}], 
       Line3DBox[{1925, 2702, 2050, 1923, 2703, 2051, 1927, 2704, 2052, 1929, 
        2705, 2053, 1931, 2706, 2054, 1933, 2707, 2055, 1935, 2708, 1190, 
        1937, 2709, 2056, 1939, 2204, 2314, 2832, 2057, 1941, 2206, 2315, 
        2833, 2058, 2366, 2642, 2710, 2316, 2059, 2367, 2644, 2711, 2317, 
        2060, 2368, 2675, 2851, 2391, 2318, 2061, 2210, 2669, 2846, 2381, 
        2211, 2402, 2062, 2401}], 
       Line3DBox[{1946, 2415, 2416, 2202, 2380, 2379, 2845, 1945, 2209, 2400, 
        2854, 2646, 1944, 2208, 2757, 2643, 1943, 2207, 2756, 2641, 1942, 
        2640, 2755, 2205, 1940, 2639, 2754, 2203, 1938, 2753, 2602, 1936, 
        2752, 1189, 1934, 2751, 2601, 1932, 2750, 2600, 1930, 2749, 2599, 
        1928, 2748, 2598, 1926, 2747, 2597, 1922, 2746, 2596, 1924}], 
       Line3DBox[CompressedData["
1:eJwVz0syQ1EQh/FWpYowIEESQ1OMWIMNKIpKGVkAhUyyDcojcXOTWIBl2IL3
+7EOvx589e/++vQ59y7tH24ejEXEFoqJiJWpiDtcq6/kzGREX91Vz6pL9a66
l7NKRJUbcK3cyTNcjRtye/oCVW6Ou5cb0xEP8gmPeRZnOMeqs2vmp+pnvOIl
d3GJLm7HIy7kGz7wjnl07NbsFtl7qyc/8Y0vLGDdvJTD7PO/5A/+8Iu+O+qy
bjby/dv6Eg2uwd1wO/oBmlyTO5bL7j2RbSwm/JH8B/DsK6Y=
        "]], 
       Line3DBox[CompressedData["
1:eJwV0D0yQ2EUBuCTRoJSJwmCli4TNqCnM4bCAmIFdpEiMynIf24wRiZsgSXY
ASMRFbXnK555z/ee7965SeXy6qSei4hjevmIvZWIV7rmfflG33xXiFhfjlhb
leaB7tTulqK+qPuQn5zp2pTMHbq0udYdeb7nbtl5wJA+Vf1Xmu02ZMaYmr4h
Z+m+3aa854EDu6acp/fYbcn3pYhH2eKbkb4iD919khNuWHDuezpsm595YcoP
F+k/YMdc8o6h3/vrnJl3dWU50v3pxumbyZz/AcGxL0w=
        "]], 
       Line3DBox[CompressedData["
1:eJwVz81KQlEUhuHVpLIuQs0kUsKyaNDIaYMm3kDiBejc6zEItaP5UxJOC7qU
GolEZgX1OHj5vvXudTh7Z+vNamMjIq7Q3Yoo7US8oqNPtiMecGz+RY/rmac4
MS9xx13LNp74NN5SEX8I7nLXDjdDBm3+jEv0vJ6Vt/Kc6+sHetl3X+jqcwz4
Q3nKrZDoC9zzBdnivjFd7+IDQ2dF+b7pXnKET9Ts3eBI37PzKC/8e6SX9JxM
vOnHznj9Tm5f9rmKvWfzC/LcgPsHaTAvFQ==
        "]], Line3DBox[CompressedData["
1:eJwVzklOAlEYReG/SIjdKpwYB8YYhojYTEgYGZbgAnQDhiWR2FOWgmADNrgH
0Q0YYxgQm68GN/e8cyv13uLeQWM/iYhdOZ6JGM1GvEphIeLIuYwvZF3e5iNO
uApOZUPG3Gn+nf6RjKvKGffuvImvZUvOuV+ug5fmIrr5v7k/7gYvcz1dc3eb
/3RObH2uqG913dbEqf3LXsB3/BTf5++0p/jS/q0fuBU90BVbhjPbRLeKEat6
aLviwv6I17in/N1cwj3jEveiO9yhOz9k23nA7+gu/w/SOTM8
        "]], 
       Line3DBox[{1985, 2115, 2255, 2116, 2789, 1984, 2117, 2256, 2118, 2790, 
        1986, 2119, 2257, 2762, 2619, 1987, 2620, 2819, 2258, 2120, 1988, 
        2621, 2820, 2259, 2121, 1989, 2791, 2122, 2260, 2123, 1990, 2793, 
        2124, 2261, 2125, 2792, 1991, 2126, 2262, 2127, 2837, 1992, 2263, 
        2355, 2264, 2838, 1993, 2265, 2356, 2763, 2657, 1994, 2658, 2836, 
        2357, 2266, 1995, 1469, 2358, 2267, 1996, 2794, 2128, 2403, 2129, 
        1997, 2847, 2382, 2130, 2268, 2131, 2421, 1998}], 
       Line3DBox[{2000, 2612, 2764, 1999, 2132, 2269, 2765, 2622, 2001, 2133, 
        2270, 2766, 2623, 2002, 2624, 2821, 2271, 2134, 2003, 2625, 2822, 
        2272, 2135, 2004, 2626, 2823, 2273, 2136, 2005, 2795, 2137, 2274, 
        2138, 2827, 2006, 2139, 2275, 2140, 2839, 2007, 2276, 2359, 2767, 
        2659, 2008, 2277, 2360, 2768, 2660, 2009, 2613, 2769, 2010, 2661, 
        2770, 2286, 2011, 1304, 2404, 2423, 2422, 2012, 2848, 2383, 2384, 
        2278, 2426, 2425, 2013}], 
       Line3DBox[{2027, 2388, 2389, 2287, 1318, 2026, 2446, 2447, 2424, 2859, 
        2665, 2025, 2504, 2505, 2427, 2860, 2632, 2024, 2291, 2777, 2664, 
        2023, 2663, 2776, 2290, 2022, 2631, 2775, 2285, 2148, 2021, 2630, 
        2774, 2284, 2147, 2020, 2829, 2146, 2283, 2387, 2828, 2672, 2019, 
        2145, 2282, 2386, 2826, 2671, 2018, 2144, 2281, 2670, 2825, 2385, 
        2017, 2143, 2280, 2824, 2629, 2016, 2628, 2773, 2279, 2142, 2015, 
        2627, 2772, 2141, 2014, 2662, 2771, 2288, 2289}], 
       Line3DBox[{2571, 557, 603, 1630, 567, 599, 556, 1628, 601, 598, 2365, 
        617, 1857, 997}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1015, 1138, 2688, 1016, 1144, 1031, 2728, 1149, 1036, 2730, 
        1155, 1042, 2732, 1162, 1052, 2737, 1172, 1064, 2747, 1184, 2703, 
        1077, 1195, 2712, 1088, 2760, 1200, 1093, 1444, 2812, 1205, 1099, 
        1270, 2785, 1210, 1104, 1278, 2790, 1217, 1111, 2765, 1292, 1224, 
        1120, 2772, 1305, 1232, 1128}], 
       Line3DBox[{1017, 1238, 1139, 2689, 1018, 1145, 2694, 1032, 1352, 1150, 
        1037, 1353, 2800, 1156, 1043, 2733, 1369, 1163, 1053, 2738, 1173, 
        1065, 2748, 1185, 2704, 1078, 1196, 2713, 1089, 1428, 1201, 2835, 
        1094, 1429, 2807, 1206, 1100, 1271, 2786, 1211, 1105, 2762, 1279, 
        1218, 1112, 2766, 1293, 1484, 1225, 1121, 2773, 1306, 1500, 1233, 
        1129}], Line3DBox[{1019, 1239, 1240, 2690, 1554, 1335, 1336, 2695, 
        1520, 1337, 1338, 2697, 1522, 1354, 1355, 1526, 2830, 1370, 1371, 
        1054, 2739, 1174, 1066, 2749, 1186, 2705, 1079, 1404, 1405, 2714, 
        1534, 1406, 1407, 2720, 1541, 1430, 1431, 2724, 1445, 2813, 1272, 
        1273, 1461, 2819, 1280, 1281, 1473, 2821, 1294, 1485, 1295, 1487, 
        2824, 1307, 1501, 1308, 1130}], 
       Line3DBox[{1020, 1241, 1320, 1242, 2691, 1555, 1339, 1340, 2696, 1521, 
        1341, 1682, 2861, 1342, 1683, 1523, 1356, 2801, 1357, 1044, 1164, 
        1055, 2740, 1175, 1067, 2750, 1187, 2706, 1080, 1408, 1409, 2715, 
        1535, 1410, 1816, 1411, 2721, 1817, 1542, 1818, 1840, 1432, 1847, 
        2889, 1433, 1846, 1446, 1274, 2787, 1275, 1462, 2820, 1282, 1472, 
        1283, 1475, 2822, 1296, 1486, 1297, 1489, 2825, 1613, 1309, 1502, 
        1310, 1131}], 
       Line3DBox[{1021, 1659, 1660, 1321, 1243, 2692, 1556, 1249, 1803, 1805, 
        2884, 1804, 1806, 1707, 1708, 1685, 2863, 1687, 1686, 1524, 1358, 
        2802, 1694, 1359, 1045, 1165, 2699, 1056, 1176, 1068, 2751, 1188, 
        2707, 1081, 1412, 1413, 2716, 1536, 1414, 1740, 2886, 1820, 1819, 
        1823, 1821, 1822, 1741, 2868, 1434, 1546, 1447, 2814, 1448, 1463, 
        1284, 2791, 1474, 1285, 1477, 2823, 1298, 1488, 1299, 1491, 2826, 
        1614, 1615, 1503, 1311, 1132}], 
       Line3DBox[{1022, 1662, 1663, 1322, 2796, 1245, 1324, 1580, 1581, 1343, 
        1710, 2797, 1709, 1807, 1711, 1712, 1684, 1689, 2862, 1688, 1525, 
        1361, 2803, 1695, 1362, 1046, 1166, 2700, 1057, 1177, 2701, 1069, 
        1189, 2708, 1082, 1415, 1808, 1810, 2885, 1809, 1813, 1811, 1812, 
        1742, 1825, 2869, 1824, 1828, 1826, 1827, 1743, 2870, 1435, 1547, 
        1449, 2815, 1451, 1464, 1286, 2793, 1476, 1288, 1478, 1300, 2795, 
        1490, 1302, 1493, 2828, 1616, 1617, 1504, 1313, 1658}], 
       Line3DBox[CompressedData["
1:eJwVzj9LgnEUxfFb9keKoLWahCShBtGmFp2anFrcQnwBOVS+jKKpIZKipTFf
QG2+AQcbghwqiMxAlxQa+jzD4XvOuff53SdTbxwczUREhVJzEa+Un4/o4/ZC
xNpyxI/c4At4hUW8xirt8+XFiC/7JVy3P+CLydxsF7/ll6WImjzk73V1fpTc
0x/LY36KJd//4iS5o+skc7sb8gleyn94Sk1qybNmZ/wbnuOdbsu/pOUc3uje
+T1v3/Ir/AOG3MZV+REz+ISH7na90eOf6UK/Y3eT/6AsfdI/f8YqgA==
        "]], 
       Line3DBox[CompressedData["
1:eJwVzr9KgnEUxvFjWvEqCG0OLhK5NAVmf8aWNgchaVWCNlvErEvIxa4g0Foa
6yq8g4YglxCCmmpJgz7v8OU5z/e858db6Vw0u5mIaCCXi9hZjfhEay3iBJVC
RE1/t+vpQ2xxN/KYv5cPaJmP+Il5jFN9V9bxmo9o61/eOJN73D7e+JI8xAHO
7b59M+N/9SUW6KPq7Uv7srmDNja5P+4K17hzl+VH5h/zrUzS/5ELfSKL+pPM
uH2WAz0vP+ynspC+x5XkC7LrESsYcdtu5txGesMleDT/A7rWJwk=
        "]], 
       Line3DBox[CompressedData["
1:eJwVzr8uw3EUhvHTpK2kLoHSLhVGykKrqP+d2juoEAyMmliRGJDoBXXnCkgk
BgsL0ehE9dPhyXPe95x8f79887R+koiIBlLJiFdcpCOuMDUaccmfqYh5XJun
dQvm2ZGIORTR1Zf139wb3nvjJROx5+7LvM+L+jE3S3wgd/WHXJLH9WU+kiu8
jGPzCmftVrklV3kNE7pz+ccbN/IdZnS3nMS9Xc/327zt5k9Xse/zP8I/J/Dm
5kz+ddNxu26edLfBD/IWb+Jx+A7n7Hb4Sa7xLp7NBbyjIdfxYR4Ap1gqWA==

        "]], 
       Line3DBox[{1127, 1231, 1499, 2771, 1119, 1223, 2764, 1110, 1216, 2789, 
        1277, 1103, 1209, 2818, 1460, 1098, 1204, 2761, 1092, 1199, 2759, 
        1087, 1194, 2758, 1076, 2702, 1183, 2746, 1063, 1171, 2736, 1051, 
        1161, 2731, 1041, 1154, 2729, 1035, 1148, 2727, 1030, 1143, 2726, 
        1014, 1137, 1319, 1515}], 
       Line3DBox[{1133, 1234, 1780, 1505, 2829, 1312, 1122, 1226, 1492, 2827, 
        1301, 1113, 1219, 2792, 1287, 1106, 1212, 1833, 2887, 1450, 1101, 
        1207, 2808, 1745, 1747, 1746, 1095, 1202, 2871, 1744, 1718, 1720, 
        1719, 1090, 1197, 2866, 1717, 1716, 1416, 1083, 1190, 2752, 1070, 
        1178, 2741, 1058, 1167, 2734, 1047, 1157, 1527, 2850, 1632, 1631, 
        1038, 1151, 2798, 1360, 1625, 1624, 1033, 1146, 2852, 1641, 1344, 
        1639, 1640, 1638, 1023, 1140, 2840, 1576, 1323, 1244, 1661}], 
       Line3DBox[{1134, 1235, 1572, 1314, 2774, 1123, 1227, 1570, 2839, 1303, 
        1114, 1220, 1565, 2837, 1289, 1107, 1213, 1834, 2890, 1849, 1848, 
        1102, 1208, 2809, 1749, 1751, 1750, 1096, 1203, 2872, 1748, 1723, 
        1725, 1724, 1091, 1198, 1722, 1721, 1417, 1084, 2709, 1191, 2753, 
        1071, 1179, 2742, 1059, 1168, 1852, 2892, 1854, 1853, 1048, 1158, 
        1839, 1372, 2864, 1703, 1702, 1039, 1152, 1696, 2799, 1363, 1627, 
        1626, 1034, 1147, 1858}], Line3DBox[CompressedData["
1:eJwVzT1LAmAUhuEjZEEOSoPREoQFLkXO4tDsEIhObelm6dbeFLS5ij+goT1c
7EPCJWgJSmsKsvoBQjh1Odw8H+e85906bldaiYg4RHsp4gU7yxG5ZMTrakRD
fkJON9I9647kR2zqsqmIvr4qD/CtK+qudYWViB/5F1N8Ye79hPbM3+kHxnjD
PS71D3SINXfu6C0GODEr+SOjv6LNxa57+3wPN/w27aBsp+j/Df4Cf3bTuhrN
yOeY2K/KU77rfgGni39w4G2TruPTfE+e8Qk+784Zbch17Jr9A1uHLM4=
        "]], 
       Line3DBox[CompressedData["
1:eJwVzT1LAlAUBuCT+AE6NTTUEg4JBQ0VDkoG6dIWBG26BI1ZPyNoa/cHOERD
S7Q0FCqJ4CK0ZNQilPQxtvU4PLznnHvuvfmj04PmXETsc5aMGFFIR7ynIp6z
Ecf6AT39UF9Xd1i2c2fWNzvU3zM1285FXJl/qb/55INXWuZvs7cZU7L7Intc
OHuSfbpsOevIR5rOdrw/b9aWi2YnZg/+3tC3uFWvyEuu1UvynD97e+41ZDET
USbNrllKZpjYa3hzc/YXa9RZpeZelRt1wt6vrLj7IxdYdzblHx7QLZA=
        "]], 
       Line3DBox[CompressedData["
1:eJwV0D1LgmEYxfFLqIwKWsLAKYd0KCr8CtosiKsKQY35An2EKKLWJjUMGlpq
jhpraAka3QJDamhryqXfMxz+55zruu/n5snttaqHqYio0GQ24nYu4hMLOMbR
QsTBTMQbvfN1fNKvmT/iymLEMn/P/+AdbqYjlvgNvHHmSvchDzCvS/PreG12
oXuVz3FVl+Iz2Dfr6l7kDk7pUtfGrK6Fz3LRewb0wOexm+xTybvm3dO090e/
5g08Sr5FZ/K3/SH/hT1s066dHWwk/0Fflsd4Kp/QsXPbugy/hTXcp3/b/SqW

        "]], 
       Line3DBox[{1664, 1666, 1667, 1665, 1713, 1141, 2865, 1024, 1582, 1714, 
        1583, 1345, 1642, 1861}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
ni7cTkOz9QauPb+zgbHtKElbngZRXapxoWN1ZbKRh7bztjbCeZ5f5rEnqCh8
wXcnnYhrWeRZ+0dHXHpguleur1KWioyTmx/eU6lDVknpuAvHO+CdY4TGrQMU
VL81SmpR78OpYt7Ar60NMBpVxJBfQ0Tlth3z7+fHMZfeIvqgTSVECSQNPiib
Q5ZUZtajl2dwcG2oWci2EBQnVbJuGk/jg2Kt+HS3eewsuHcu5UomnEoxbRA5
OoGtGrYNov+IuLqv7p7Iw3h49N3m/O6VIczUyEolV5Jxi+5bXo1nEXAj35Vz
/41eZJDf9/zUGgX56h4gX+xnODa6vfk7dwfy1Rc6ETupiCvykw16AWCrpD6n
er4elytzr60Y0vBt8Pew6CF/mImrOyWxJRenGUn3GidpuHTNWtB7/RPolN94
JXmtAnI3T9jlZdGwmurOwCjxBbYrG7zRPT0N39KsNu9um8fb8fE3oqdj4YRS
AKP4Lxq8t1+vWY9KKJNmXy1afJEMwSkLnP/ldYojFOquwPdlgeGXFf7L6yxN
fA79l9fNyYmp3PuBODlXVv5fXidQ3pDwX17XxezN1RLcjqNp6u7/5XXnO8qo
WacoeODejeuJFgPo0ari0x9VDJ8ar5z8L6+TuOESzrixfxj1SV03KhO6Gi+s
xQ/OYXfuk1Rm+Rn8MlH0qYUnFtTMn+UXTU2h2alnqf/ldSXNTYmO/J+BPPGn
657WKP6KeL/N4QwZS/edWfCt8YAnm/82/ZfXHaq4tfhfXlfyA+4Vb3ME43dE
T7YddajMy7f+/S0NF+6/vW7gbwvpTH3hbz5nYsHe/JD/8jrBuHOXN6vawnRY
M6HDqwi2XOJz+C+veyjjpfk3xx5e5NpNWaWOwsOcMxP/5XV/NytxFRJc4YLM
QHG8AxluX1c6Kb5zBF1GVWaIfIEQKfHx/+V1tKiOYVXmz2WUtdY9TPIRMJMf
tJeEVFwYoYtvX2pDDpGW815+ZbCNesLQIoWCde6/Dpmb92GFBJP+lH82lOcz
M/o0krDOjHWn7OcxPNTl8vwNZzyEj4fX7m+YR97wFOb6K9OoJnfVe7z2Mxx3
SXzazD2NGqUrZ52G5/HaU9MSAqsrcIVMeWhvHcL95zpEiHQUzGNcudpibQUr
l0v+SI33g8/p+69zrSm4Sfvy0LlWK1CUenD5cRIN5EJWlX5LV+L1o/DXb0cg
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
fpe+pkPRqHhNMc9VUHOa+Mnh1YJLI0z7n2yhA3e50tbp4idw2GBEafupTmzq
tmJcEZmEcUaVPpeeH1z8tdcqQ7kTy/JXWEsyuU7XjttfIp/BMuGBFY9VO1H9
3bZZTuFJ8BQ4cyr0rC/sm+LedDhpHFY/8DDguDQMzn0NNSqpCvC05FvOtS4G
FLG9uPZS5APyfu++/6pYGjaT535zsf8893tHnvvdNXso+3YpHQ8aZCVf5GyF
cZUeZ3Udyf/fXkrf2f5h49eT+Mty4eo1uu3Y+KOqK4ohAbIPxj51KTJwrlCy
gPdICs7yChau962ADtF9CdnVdNwQlWJ46L5FfmzstTtilxrggvvhuoSLDPzx
rOUSHCpCbT8bDdXWQkhaom3oy5xbjVjcgww/V+PFzjPmdlezoG7AWuzyNQbO
yEUb/DZ8iCZ3Tyio+X6CRCg897SbjiJB50zZF0C+/Her0DvUejAtz9Fpy2Rg
qffSkhJdbwzwVfvJ+rkAEu00+p/3Me+zs1Orhz+/xgcvd2k5fM2AbRHHTAuY
c/H9HUdjRnqDkL7V7vzcwThQ27V/UeVvBkgEzKkv8LmR79nKz8qoeA33dE9P
/6dn5NYSDt61ynFgx699U06hAoI41i243EDHE6qymv4vb8jnev5i5z7UAIxS
TuNURwZeeVW6foNMLmzRSZoQCSyEt4fXaxTpMNCvXEsG6stAPrCI5dK2LMA1
Nx3SmX/ufbXLZ2OUreVrDK93hh7yB7WWg+5sK5jXDR1Fn6zKHLhYaFpQmVUF
B8dnhp9F0fFZyH6Jpp928rpFuQ1hRo3gfqLS4U8JHXVqKYkjv6tBg4djXdxA
MRgfO3/RoGISL7OOCSZeaQWbXR63djOv019lbmxy5qThsbvRZSfv9MIyXeHg
IIUU2EJ63LaSHjfh//a4/dXXxkX62nzJ8/nNfz2fP7pkak9CYAe26/nPiGpM
gonmXmtLLgcobvHknNFqQtb4cPaCh3QY1Ysyi7lpBeeSFf3W3q3GiBdLdWcl
GHB2W4Bbo4cpHKwL3hK/OQNa7W/vWTbMgNVPEoXv89+Cx+36v9+WjoBgnU2J
meUY8EB3rslHW1Bc1Tr1IIwOwtsOGfA+bAS7MHepy7Ee//ZRbiR9lEtJH+X1
yAtX+TzpSO0J6VzqUgK2u+Trkjnrge0RdV2qKh3v+J5LGLjjKr9yCf7Z4tAM
+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
eFsOyoeKef3em50jezM/sjf7f+2oto8=
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{363.7791442358106, 229.35760578225302`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0., 0.9999999285714286}, {0., 0.9999999285714286}, {0., 100.}},
  
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.270547052127807, -2.038312894525674, 1.4628385516126081`},
  ViewVertical->{-0.3216969241335208, 0.2887933936344136, 
   0.9017258257342696}]], "Output",
 CellChangeTimes->{{3.889175142295648*^9, 3.8891751575528917`*^9}, 
   3.889176404068787*^9, 3.889176752446184*^9, 3.889176863045034*^9, 
   3.889177082369033*^9, 3.889177248462007*^9, 3.889177577589595*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"af14b2c4-c4d2-4fc7-b6eb-99107263a6a4"]
}, Open  ]],

Cell["\<\
But when considering the same function but summed over its channels, then \
they are all gone\
\>", "Text",
 CellChangeTimes->{{3.889169978405177*^9, 3.889169983047619*^9}, {
  3.889175073010743*^9, 3.88917510571064*^9}, {3.8891751744559*^9, 
  3.889175187220731*^9}},ExpressionUUID->"0692318f-a2f6-4234-9340-\
8c50596e2d03"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"NInt", "[", 
     RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
      RowBox[{"\[Sigma]", "->", "Null"}], ",", 
      RowBox[{"sampleID", "->", "1"}], ",", 
      RowBox[{"sectorID", "->", "1"}], ",", 
      RowBox[{"useIntegrand", "->", "True"}]}], "]"}], "\[IndentingNewLine]", 
    "+", 
    RowBox[{"NInt", "[", 
     RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
      RowBox[{"\[Sigma]", "->", "Null"}], ",", 
      RowBox[{"sampleID", "->", "2"}], ",", 
      RowBox[{"sectorID", "->", "2"}], ",", 
      RowBox[{"useIntegrand", "->", "True"}]}], "]"}], "\[IndentingNewLine]", 
    "+", 
    RowBox[{"NInt", "[", 
     RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
      RowBox[{"\[Sigma]", "->", "Null"}], ",", 
      RowBox[{"sampleID", "->", "3"}], ",", 
      RowBox[{"sectorID", "->", "3"}], ",", 
      RowBox[{"useIntegrand", "->", "True"}]}], "]"}]}], 
   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "35."}], "}"}]}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.889175117391955*^9, 3.889175156349967*^9}, {
  3.889175196358161*^9, 3.889175317033966*^9}, {3.889177585198743*^9, 
  3.889177597459052*^9}, {3.8891787839546137`*^9, 3.889178784001137*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"e5df2be4-b8d2-445e-83c1-1d2a197d7f52"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
knzw5R0PDXXUVab+Bj5silFBjqkW2Q3yNYJnf1mpbkocv9eml09cK8r9J8rn
rBcNi5KwIo7yrk6+857Vm5PfQPmUQQcqDj1zpHZBebNDVke6L7eh/obyFx59
t967oQvZH+XXvL3Zf/IZB4rnUV5nyGCnEebcb8CP5pzb39tmGF+3onyxdD+Z
cz2UyZ4oH1XbcLXvYQuK81F+mu3SmKURmtReKD8tbl+rbJMm2Rl84s5xLV+f
8vgH+luV5qjLnDMgDvvFab0a7axlSPbHOC6a47+uyZrbHzxy/N6709z4/IW/
75omWp2YytebkKdfcNSpvMaR7InyQwpu33BwMCS7Qf6qPoZXwrScyW6Q86Nl
ffanA12ov0HOZFXtY2NTbMhuKB83dfCTsV2syW6QPz7F4sqoszyOBe8hyA3a
VcLXTfBPVnIz51vs4Otx1Hsg4dDlfBFzshvK37k0WVP7kynZB3yPanjjkI+d
qN3By9QMLrzO5vMC/l1vpQPhq4/zvBzFiWFfs7oN06bnQvkBnWyOdZ/C1wWQ
P/t6qFGXzto0v6P8hknPTgzYwvM24LqdCjaE/9Sjdsd46nFvRerHgI40vlB+
r+2TllNZfF6mvH3F0PBRi/m8DP7oeO8vz0ZIUrvj36Vve2v86Zkscfy7fuP3
DOoSwfdPaV14MGXPp3l8HKH8tYLV4pu+yZE9wd0uPL3UaKtMdgN3X9W445W4
GtkN/HhCtI3MDT4/giclLQl63JnPj+B3027cmt3LisrjOX76xnRzvcvzk1Tv
iCnL5b9rkxyMG9lFsg/uTbCidkH5mxY75n5WMSL7g5vmvijSD+J5eHD1FbZz
XtRLkv2hj3lqf8HSTAmyM36XB1cuHrtOmuwJ/sKwm0SnFm5PcN1M2bXDbbg9
wUdKFOZUNauSHSDv/i61FZqruZ8BL+gftLnRxoz6D+SsVPY3sZgsRs8L3kfE
bOStpeJUHnJs56/Z8eQEzw/AT3f9tHhN9kbe31B+8rC44i4GcvS8+DU2v3fp
b1yH5wVPSMpMHXWQr8fBE31q9wr7qZN8/LuN77x6L1bi60HKb2uoHrpwn493
/Mb5fXuxX0GD+iHKqyVMmJX2Q4vsSeWDz4nkBXJ/Dr1C7asCDivz9QjKqweP
7+Gfx/stymubOJvckTOm8Y7yvbol1Nz5zdfFKJ8ddbPs0m4zaheU/3Cw58Y3
AgdqF5RXEETO7J5vRf0T5Z2rNW/deuxM7YXyUyNLRohOsad5FuWfXB+SkXJJ
heyMPNmYDduCLVv5ug/86+ivn90ceH4YctwUzt6yMNQk+9M5l6t3+kb353lj
/H2ezpbV1uLa1C4oL1ssmbsuQUdIcRjT/8Is+UpZ147E8e/O2c0NLn3akdoL
9Xzxlly6oj9vL3CdffO014bydgEPzJXq2687jzPBnb/3Dj6cbE12hj7nBtg3
XK/h+SjoY+fUZ3FyX2PyqygfLT76xe1OXchu4JP9rB63TrUhu0FOeKD0MSdR
KxoX4Lf3Rnwp2cTX79CzOvz4bJ9RVrQ+pXm4q7HQ3o6vT8EnFy3/X34Y/hPc
V3T7HdWF/JwDeMVVzdJ983jeD+uhwd3Gjar/sz6F3Sg/beo+5O96k/IvjBev
Tbz6uc36Edzh0rBDxW3Wj+BqSZsCZrbxG+AC9aYlnp6qtC6DnpfH1Pq1XZfh
7y99ThrO+bOOg31gj5sa9rJNDio0LvB3xW7He3QaIEN6Yl18ds/hppAgCdIT
fEOHxdFTw2RIT3DxgPNLcrbwdQHtlyqclA3bqEp60rlas5279U9pUlyB9Zr6
uLl3Wz6ZUT+nc4NDfDOcnvJ4AFzxo63i/Id8HQc+2uOcwuGzfB0HvuvUh/7u
U/k6DvzWi1dvJvbl6zhws7u97YeE8nUc1lOjVUQdDfS5PwTX1vlyQj2WnwfD
em1PU4+3LnNNqP/QOcChvpfuhP+m+Qn8WJ9yj0WSfF0GXr8pMNf9Htcf/PeC
K+Yyl7j+4FXb308/lsb9HtZTnpXio08ulST90Q7xva2m9h/G43bwN6bFUlu2
8LidzlkdWu9uGc/zdeA2VnaxU+MdyW4U/xu76C+8xfPz4MHHBmt0ecDzh+Br
vBprFj9woOcFL9jl6nt7pBVx2NttmKXkTD2e9wBvDm+tNkrTIDtg/hlV7zP1
9hAZsjN4aIDlGIc6eZIP/mn81iOPzvO4BXznu4p7VWt5HAg++6z/6BoFLern
eD6x747Ky214P4ff/eZjFdzTlPdz8D2i/hKXpvO4C/zGIbHleU487gJfIDfP
X/UIj7vAK6JXn3oiwvUHtxAkmmx4wuMu+IlXJ20L+7vwfAW4sdn3qb8f8P1x
6LVCsuvkO514P0f5yUVbJqRpipP+4N3dgzbaLuT2B1cLs3q1Q5Lva4B31o6z
iDnL9Qd/VzVmV3iEGsnHvCR35efoySlcDnjUz6ANV2XU6HkxX725mfBkS0c+
n4LPG7i58ZYFn0/BN1e7emdV8PgT/MJTyxDxodbUjuD+P4pSe3d3oPkd89qp
dy4/rs/oSOXBX78dPGZ9D97/aX/WwzLaWZuvT8HTrCZI3ImzJv+PecFm5HSZ
v/4fzws/HBQ5ZEyRJPdj4EojLWSuFPD8P/zhuKrrPtNq+HwHf+Ljkzc6SkyM
9ER/X5Ik7zHfy5rmHdRzOsr/sIqOC7U7xnXMpLI7O3qaU/yA8vuiohYrvOPr
GtrHcTmeOqyJxy3go1SX++4wMqZ6aX+muSC4MsSc+gnkrbOSeLdDwpLiGdr3
e1fmfGgcz1tiXKvWmJ9NvsLHBfjEsTvUjZUtqV6KFyYFz1mfLk/2hL7Duh0M
Mg7uTM8Fezydu/PIrZ18nxR6zQ/qfCLNVpb0hL03j7pTPf4r93t0Tued2ZCB
o3VIH/x9gIfoGlMh39dD/zlyb6hpt56WFMdSecPcmCSvjmRn+DmfvIudDxwz
IX3ARyVrHNo2issB1zi+t8J9mbbQU2r39LLMKoH/pt6tWaGpApfeYo7BwcZC
8dluq0y83gjGPQ5YW5ZZLDjgKDGxbpu5UH/zYcs4k4/E/e5danqxRZPKa/Vs
3m/i9UzgOfSwy6PZzsLLT4v3hJa9J76tuDxy8mIrkgOeVGnSdGSGtXCyiZSy
V9xbwaMjCdmhZRWCkRrHJBa4qwrx/9A3TupSF/3+eqQ/fvMDklz2ZXP9Ub+b
vshKx83mJB9crnGk/rlsddIHvE/27F0lK7RJf/y9zG/BqysjbKg8fm1nL8rN
VLchPRf1jsjMDP0TJ3Y/dElth7Uw+cL0htbWV8TF9l/eKvbHP0Mf8OtBY5dl
u6kI8f/4DX5TY7T+lbYwe72NmojIU8Gzop2Oll5xgvrYn0dyPE2Jox1/h3U3
fv7BjPRB+eagD11b6juRfcB1Lw3S2PvH/6M+8IlzR2lOD9EWaqc5G3vFVQrM
dpalzyrLFEiWC26HfjYSRk4SPR1a9lLwu/PWxszQR4ITalcW9+jlQs8L7pT+
uHn2aXGhU+H+W5mhNdR/Nlw7U/l5hqUwZumsUWWZ74i/0765oEFCVTioRm62
idcnkuPWUq638gjvb3ju56bP5KvUXEg+eKVt+vr+al2Io79NuJ7SW2WyC9WL
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
5zSwnkpm/hP9Vp/tWxmze5rA7Rg3YRzt9ZL5PZcFN0W/R0sRR97747DFLsmG
nal/zmF5ZvuU//LMKI/37Mbvll3vmWFC/m0yG7+ui7OOHYnk64I3GKfyL7aK
DuD5WJyX83c/v7WjLvdviN9+O22ys5XVpf6D82yauM+I6YP9927vptc90ud5
rXksnzmK3VsEPp/x0YxDDsaLbuxMfTcRnpeTZNwouuX2F1c14jgXFC3e40bJ
Th4fIo4ae1Z1xtfjPL+E9yUHsHuFYGdvfFee5Q3oPAbrJ+fkHiYnL+XrHcRR
DaXX8tJ/WZF8EZET/5tnzUv7jf6bT0McmMf2Kz1fvX50YjHPY29h+5IX5jhn
hknxebY/zoGye3zARzG+l3H0z3QWzy9j52bBJ7N16062boU/3Mv2Aef2Kjo8
80gLnc/rz+Kxyitpde8aHaje0WxfaQ273wd8AuNR7Tjm07B2+z4P2f6RG9v/
ov6De6tbPTcf3edCctRY/6xl9/uAd2T8YzuOfhvL7v2BfHBz4Us9b39bake8
F7j0ueHvICcdnpdm/XndDuPOig38HCP2Tdx3Dh1wcTjPOyFv35WdJ0G9OSzO
/GHap+zaM/68JUzetZJ5S86qy1J/eMfmryuC5oLpNdrExdj8pXlG2u7SLq4n
3kONnb39R/BtPq/Re3jsPiD8/7F2HP0kr937IODv262LUS/y5P1CGzqNDhAn
jnzsLwfP+nu/7ahezI/h7J4gcMynM9txzCf17fKci9k6upHlh2FPrI+SFVZa
OYzk8b8rG6ee7FwfjQsWtz9tF7dj/nrB7hUCx3xX1Y7DD/iy+4bQXsgXBe6e
5PdkSGfiyP/kXSqsjhHh8R7eO05m9/ugPPZ/Bzlt8/H6zN8TQXnPuyserNkk
Snw3248uZ/f7gB9qd+8P7It5p6ridXS4hjo/V8zW6TM/adw+O8yOuCjbV43J
eGZ6YiDnWF/nlasO0uzFz7XmsThw+aZz29J36/N9c1a+fvqj1dfe8fNRWEd/
mJv8dEliG3/I4sPTN/+7H4f8NuOZ7N4c2A35HJ81t5VdrnYkjvxMyMOtmZGZ
/HwX3S/g/aTf+dfmXD7rdyOf3NxvlitNfCLb17jB7sEBx37HPcbhZyBnksuI
bCkbTbID6vUPuRGc8YzbH+tx0Z2l6tqRNsRxLuv6iG8eU+I5x7pbXv30gCeN
fJwij10f/f778e08fkD5fb0L7U1H83gbvIWds0J5xEXzem51eRBmRhxxlFJ4
j4awQjN6LsgZrX5w+5paTbIz8szbDXr4j3fl9p/H1pvb39l1ttGzIr6InVM6
lTr3Y2oMz59rsjz3aVXfFZ6lvH2jWZ5B9XymWa9bfN2Nem0GVLWsvaRLPJGt
rzey87FoL5QvuLCxaMtbvj41YPXe+XZxV88unC9g9fbQlN345pQG2R/57dqQ
HZeys5SJP2bxQPft9c/u3+DnXhaweEBrmnuHsdd1SE9NFk9+ZedsEUfBz4jr
+wzJF7EkXsjO7Wiw+2XA8xnXZBx2K+nTu//50KsC6e2/Lsjl6xPvxc4RiUTG
p4xT534M/idwRP7dprW8H4JXTzVWzp/H8//gfedqjTN9pU5+D/5nFLt3hvwP
i5P77Xo2La6O74upsvxAbV2aoWSTI/U3+MkXB+3UalfxvDfyFa3i/91HQ/lw
g3/vqcFzIU+uLxQdGDyRr48Qh39j98vQ+GU8px1/gvuO2b0z4PcZf8o46oXf
q3ORW3EsgO87iDJ9Klb/994HOM7HqrY7F1GM99HHf0j92oHHD3iPY2pQ+a/s
eH6OBec3DNn5W7QX9LnlnzJC14efw0HcItE74OHyG7z/I85xmXnJLM1Yk/ob
/LDGUWfpb+t4/C+B75Wy+2LA8Z7FScah/wBB19TQsteCd8LMjbNC+HifxPbx
a3udLLZO4Bz+tvbL4em7rfj7O+CSxjNePRuiRvbEekGF3SNDfpitO0YJ8u/t
TbAmTudlVs//cdGXn4PKZ/a4svfn7r6ifH7EPuP7VK/qSZ/5egf2+5i309hK
zo78cFcWVxxk63TwrWy/7yfbH4R809b//Ofbjgecpujw8xVGzH/KXB10RTyL
r4/wXZHcub23uX2SJrutZOcnK5cMKsvqxv2ACzsnueFjbJPgfCdqL1+2Hqlj
97aAe/8fXJKdMxzN7nMBV2R8FOPon/Cft9m9LeRXmb/62aVGqutuvn5xZv5q
qYzk+C2bOPdTX7LQK+6OYOdApeY9Y1uJp7JzgI5ZwVkera0C9AfEP/7snhTo
A391kd17gnYBn+3x7/sF75kfk4qSzfbX4fkruseE3UtC+2uMF7L7R8Cx/spv
x7FuesjuJaH5iOVd3wa05Ko38PxGL7a+azI8db+nsRa1L34NLAP0gkr4uNvK
8n57vLTffh3A82kT2d8T5Cxv9hDl761sZOWbld5NjtfjcRTsWcDuMUE/pHtM
Wv1KDOycyW5WLF9q3/hKb+Rtvo8DOWtrTa4WfOrC993a3QMCjvXjjXYc68Fy
dj8I2gXvL/Rh93RAf3yH8mm7+JO+T9vuPQJndv5qe0v8BM86XeJ4fy3s9KpO
JSG61P+PMnlv2P0a4HgPrrodf4R7vNm9G/Q+CONjGUe74LyZM/seIOU/8f0k
di8G+Unmb3OM5GUjG8WI49zU/yvsvON63t//bzS199Ye79KQ7YQn2Xtk5CAU
snfInuUoIzJComNkZUYyTzKiI6WsjCKrY4dC/Jzv53pcT+d1buf2+8vtdu/l
+Xq+r9dzP6/rcal1rWu2yE7u+3a9V28c5/K0hdao1jsHNldnDj8i/YBqU789
VefxFuvbPMorwftTGoffUf4Ijk8hHkdxEPiOOL81p3wN4IizsCMO+5+hfnCj
fNTBSE3Zzm/T+PxK543T4N/duD6o5xTKv8D3dHQ+eS8wqW/AaOnnGUbnnMfW
+Nx12iL7Nc6XEijfATj8VQYrOPw6ViSXbPpb9wZ2QHxZD8pHgPfivCJGO+HY
wxHy3hnzkWFeX3W7eFm+Uo8d5eOc01txfgVddIsTPRaozspzBqw/Z08N/nJ4
rDynqqHwbwfHvXMJ6aJjHMA4H/W4mpbdcXmvBG5O8Qt43ofmo5n+fXISFkv/
t8U0f3m3WRccHSA56ll0pYPJXD1ZfrjCfx7P59P8svrrgH5hRrIc1P/7xbWp
J2urcXuGLqIl6avjeax73wU3sh44Wvqrg08iv3Q8v4j8z3V7bP0r5ry6PEei
OLhDEbrebr/J8yWse9v01JnT9Js8z/Gl+SiI1tXgsTRflFOcNXgpjasDab7j
fT3dcw2puLZGO0CO83/SPddKF7vyW0vkOQ/mo0Gku47yyxTzKfsN0jrz3o4X
V8+nmshzRbrfiSFdcfxejFdxQUsDbO5J/0/wc+R/y34LdJ62vf/2tJ0R2sxR
vpZVZLUeJ7S5nWM8j7u+YWdhK7n/wjq2b4PHz3KHyPM0+IVWkJ8q+73DL4X0
xjkugMbhjmqrmiSekd8d/ro6O1vnD90iOd6bferiHf+f4hrAi8ivlc85ady+
pSEaFCfLclCfewk9zAzWyzgI2G394kfLR1+Q5+0ov0na6L8+nTfg7wg9xWDS
Fef+Tuv2cNIP5/GT+GgFh79oKsXN8bkunc94k644+wPQvyb1tvgUOMjvGEfx
euU2xUdPb5Ac6/y31c2t9eOknwa4A/m7sj8JzV9HSt2rlrSS57SsY1P3wNff
SmT5N8gP9nOWzhxHN13miPu7VdX8zLFResxxzlM0q+OwZk76bE/E9+nTvgP8
Fu4fKQ4aXE0xb6I/Yt5pkrnrVOkzuY9GfJ/mlS9NDRfXYTvjvNSL9MlRPuIE
86l8jjuj+WjN6OVlw/Tl/hQ6G/dJ9xt8MvQMkK+c3ov9byrpfnN9iB8jjvpD
x7Hn1eXaNz7WlHagdhVHut/g8Gf+SH416Nddaf3/SSRMKUvzYZ5G6/9ze78m
ePSQ9wLXafxvpX/9SbJKxpd9p7jm/uvO1LoTJDnOdQ/lP8r+ECJ5B3pvQnmz
SR8nS55B7x3jd6V3eoYp1+cldCQmd2plfF2ez6TTOarTqdI3KTUk307t9kmX
aSnXHOvIdQ6tu7TcN5rY35f7F/iZH1LEq2LcqPdpXf5sZ7mvR//akvGkUeEC
ydEvgg7Z1vCMkxz9qKrbiB05+ySHX/r1nckTn9SQ54GIm+/91luzzVe5r8Q8
60F64BiXsM8KiI23mdtPxmXgHkeb9LpRPvYLRW1GdrMeLdd7dWl/cSuwZVXS
EsmryB8j1iT0wcqfnsd+4e6cBkdLtkqO9tnqwLmxf6TJ9Tzr1ZMuN9ozxv/6
tA7nOAXsV0jvmvfL1B9/9T/9yry19E+zp/uIyaRfDQ7dg0kKjvPYFaR7Cd6J
1p8nSNcavAvxDOL4vahP1szMA8MayfjuPbQenjH/RXuvZZJDb2HbXI3cgk6S
Y/35ef3IRnszpD82ync/NLjageVyfwe/KQfStea4POIq4uwHSO1nLfkJgx9R
+A9j3Bin8O8FP6sY3ziOgvr7G/L75XMA4u+J4/ei3W5tfOHkEv2fzr1pn+63
qvnY2y7SP7Ml7dPj06YP6bNP8i20HuvdebDVnCOyHebTeiyxXrdXXWZLjvVY
8seoSdkPf4qzpvVPOPnPgGco/G/Bz/yHXy50VGJVOk2SJsv1A/aPjRe+Srs8
Wa4fEI8TSfeJfM6JvFo0nuO9VjTO6JP/LbgdcWPiaLfYJz7ZlKCneVe253N0
z2hPOszg0C1xUPCX1L5Okj4z+Ov/4JhPq5FuM+yP+tit9H2s3VV+ly7kt3Bt
/JAIp/WyX0AvZUo9jTprqsnnh9D8PslwbmPNLvL5mTS/22bkdzneUHLUp+iP
7elHh8t4Ok9qn7NJzwp8LM3XcTRfg9uSnaNJrwYc36GQ5lnMLwHkfxi+7n/6
zOz3SHzW2n9y6B7PUjwfSfG2R6DbDF0LGk8S7MNLL43zl/syGn9qt7rZ1fmQ
5NBbtns5fpOI9OdxGO+9s+NUcvl7ud7AuejT6OGLVgbL+33oGKdRffDdsS56
Hdij+986uuAzaVyaTfrDHH9LfCZx+GezHlJOyN0j64w5Pwvr2tY79395wDEv
gk8b1bn54SozgfUHeMSzEVFVCdYC+0PwWxWnRxxd78D5hsCLrtUYU7BSl/ND
gReuvWHRwNeI64n5OsW2oXrRNllP8MXFUe9/rie44YE23067mnM9wW9oDXm3
XMOG6wme1c9w02o7R64neOWMumFG9WtxPbmcbPeARQ8NBOYV5gnnv/S4YML6
5OCbv7Z6/tnRin8XdHp0Gy14n7lD/i7w0E9u5T//LvCsyNGDe6rk7wKfXdE4
7fhXaX/ws7fjCr9USfuDe2gl9jz5Wpt/F/iQ058XrN4kfxe4w/M+Kz33yd/F
Oru/PHny8+9CPEFw1z2+mr/L3wVefjf6H78L3Hmszauz+vJ3gQ/W+LP6yfXy
d4F/yrn87cRoB9bDBx+UeUc96qkL69iDW25eY7VzjBfn8Rmv8H/A/pzfmzIz
yzyyGuf/Au/lW2wZ3qEm51cCR9462Bl8RE6D08mndNjO4JVuSRUmlwzZzuCd
toeP7NTTlO3MOnuBzyt/tjPiCY6u0mqxY7O0M8cLaif9w87gu6qyWh59Jvsv
eOrLI+rbbKSdwXu6dr83aZk925nLmbL8cERfZ7Yz+P33GR0+5Ms8TRyfevOt
6+JL3mxn8IrKMyPU+/ux3cBVxvPbNzxswHZj3Rfn1DOOxcZsN/Csg/u+FDmb
s93ASxyme3z5yW58/u34wmPkT+MeuNOt8H/YDfxO9RmhI69Ku4HbVs6/t/OS
FdsN3MO8T1etc7XZbuCP3xw/tnS6zLMAftVggeXR2m5sN96X5M0pPBrnyXYD
11wyZrruNl9un+Aba6Tl6k6W+QfBJ34rDux/uT7bGfzwE63NK4Prsp05Li05
qaLwjhPbme9LtxW1OWou8y+AG/b2Hv6znVnfvc3EweZrjJljPtd3PFBZfY20
P5531nzxf+M5OJ5P/qX+P8Z5PO8Vci/58UUz5ryOOKq5pM1d+b3wfNTqkJqP
L1oxx/Nx207nlVvK9s/3wCkuW+rn1GaO52tP+2yx9KDsF3yv3jpaL2eZzO+D
5+Pf9z56cr3sL7xffFprxZg+8ruDe59Y2rT8pvzu4Jk9Kw6EtvPi7w5eYm1y
bt55X/7u7Mf3da7+ldeu/N3BFyUenloapeLvDt5n/uKk0+3c+bvzOUGtiTMr
kuR3B29s6jf65++Odc3t6EMt1X/6vuDxXYb+Y10BHuPgte7jO/m9wPXPfvFo
Pk9+F/CSp10THkU48HuxbnKPv9dm4Er5XvCo0o1vf34v+Mrixn0qy+V7wbut
HfRYI0m+l/V0+yfNqnfUge0G3uzxpcEl84zYbqzPOvLii9Zn5XjO69Apft9+
Hs+xftzYfLXRxGhZf/Cka1/f/Fx/cNXmZpO33JH1B783+/XaowNk/cE/q12v
vjBM1h+80SavJV6nZf3BfT91GuX/QtYf/PEz0xo/f3fWWWl5oOH8ObL+4OUv
Ev5Rf/CmFsdmrd8v6w/uvqeqdOodOa7yvnB8SFj4LNnvwDfVaVbY/aDsX+x/
3fHix/sBKu5f4HdpH4H+BX4p3Hzd7LUa3L84Trpe5euA2TK/JOuoUX5J9C/w
WwOM6289bsh25ri9q0fTw+xM2M7gmtp/+RueN2M7g+9crmn5s52x3z3R/FLg
4ghpZ/BGpxb+w86sO9jepMH6xdLOfO7eLmRO2wHSzuDnNDcmb2km5y/woCL/
XdNc5fwFnj4+Ny3DWo5jrOv2rINfegMvtjPrwdwPUxtU6c12A1+xO7C5zngT
tht47pDQUS93mrHdwA9E3EjNO2jBdgMvHa1q/bPdcH7zuHb0oxlTpN34/vbV
iX/YDdz+U6XumSnSbuDJLY6t3Okk7Qbe+PKacv0UO7Yb+OWqsOA5ix3ZbuA5
rmNLygpd2G7gpf32mHn86cF2A39Uvcql0WhvmZcWcUKzHsV4tKor88kSN3p+
2fjdxXoy3yvKD/3i2aWmnPfBb7y5/0xzuhfbmf2i3RzrjZ9uzXZme57znfKz
nXH+OqL8y6GNkcZsT/AFZvmBI6KlPcGvtlv8y7Qe0p7gvz4NL6isJdsh+IqH
9RfNfC3tyXE8IZ23nYh1ZXuCe57q5PP+sYrtyf74ufUi7b97sj3B5zdbZTmr
n5xPwa1MHT7Vv+bO9uR4O0fL3Q8MPNme4JX7Whu8mSDnU/BzrnuyZv7gsCe4
2PtnxN/2nE33yqyTHfl60oe1ZgL645w/5JnJAi9zawFdb9aNGNg56LJwEJPo
vA/8a0GtbQ7qrgL5tMCDLxye/ae/g4BeM/ivpNPuT+du4DGuD1zzkmsK6BeD
TzBN2DWutaaAjjD4mY73Qppc0hHQ8wVf5PqlxDTDUEBXF7zx1gXrWnQ05Xxe
4LEt55Uf3GMpcA+E/bXltJoPvv2YL6BjzrrmTc9OutjGQcD/CbzjrY3bd090
FdA15vyDOYVFxfe1BM7pwJ+dys7v5qkvcN4NPti977WZe4w57y143Sfnzo4/
YiGgn479cseq+MPTmtgL6JiDP9v6fMbCxi4COkfga0i/HTo+fG7QJj7HuIaW
gI4MuJt2qm2hiZ6AXgx4pNXwauc/GwnoAoN76U3xzs01F4MU63NdWp/vUKyr
rWldXVuxfl5B6+crinWyDa2ToxTr4dW0HobuOa/bNcaHrt7sIaDrDe7sOXt/
jyoHAX1t8MafRlQP1ncT0LkGNyoc5XzYsI6A3jT4jJR5hvdLjAR0n8FnPuxa
retQUwFdZvB1s68smf7WXEA3GfzBPdeGf/fTGdRPsS7V9kly1f/NTLylfsp+
TCVhLaIrrAR08MHXeX7p3d/OQUB3HnxyVZNDcakuAvrv4E8+P9eICrUTOAfn
9/YbEuifqimg68066I8ObO79tpaAvja4x9iK+os/6wvEs7H/qa1tnVvvjAT8
jcAPaHX89LbKVCA+jXUTQz8YHky3FOeoP2J9G9x0Xdt7M6zEJuqP4L+2bJU6
8qK96Ef9kf3C9Px3n9/nIhC3A95GVdNu9FlDgTgZ8AOib2HuNROB+xj2mxsb
aLKg3EIshK4i9aew+n6JQQ1qC8T/g881a1Jwv62zwP06+POhHjf2n9cViINl
vavCNj4lSYYC58LgffrXfz94oYl4Sf0LfIv52KVX+1iIWPKXwjjWb/ClnuOb
OIrrdI+C/vj2VKcvAcdVIpb8GsE7/9ln1MQ1LgJ6/TgX+jWy04sPBb5iu4J3
Jw5/C/AWo51+S86p/i8uiCNOiZ8vdvY7HG8uwhS8JfFkik/DecvcJS0mJNn6
iVPknw1eFvR5fkuruqI6xZWB9xr/2KNPRT1hQ/eU4MZDFnyY3d5N3KTvAh5R
c+iBjSv0BHS1uHzS08Z4CL7P4kRpnaNGYgbdW/D5mJr5NRM9Ux4nwW/0nB6y
76OpgO4w66Avzxs9rK2FgO4w+JHmbVfNqG0pcL/LfpefvByCs10F/OTQX3o/
25z8IchBwI8f7TZNd9uJLcU2AvrU4AO/N/34ZICrgH40eJbngCGhBWoC+uDs
h6Imht628RDQ4wb/lKluWvrSSUCPG/uLZY+a/ZH7vo7YpeBDiUN/ENxs5vpu
hl80xUoFtyYOPWXw6WkxnV+FWohhCj6XOOIbsW6f37XjyV5B3gJ6GeD9Gsfk
mBv7CsTVg9/97U7sDG9/AX9T3h+5Ct13y1wF9OPAky+u1k1bbizgp8L3h7Zu
eTXCzQXincC/quKn7tKyEPCn5/3LlMcFmm0tBeKdwBPPnY6NOWEp4A+NdV3K
lLCFgxf+WK/SPSX46OQtlidSfQV0pTE++DzdnHejkyGve/neZO5Ig/5b5foW
/K82gy4UX3MQiHMDL97xPPOsa23Olw0+bvCXFcl3nDiPM9Ytq0n3GOtSzhNk
oKP293yHvJicN+OF8SCNZ6bCjPoD590ivWLUE88n7119L8ncmdfb4HfMz7rl
jqshoBeJckxjfT4PnltNQBcS/P0Wr8WPO9XkcQB8EOkMQ0cP/Hb01r7HahoJ
5Inh8a3Hq25FE52Et4K3Io58LeBzVuukzs5zF88VfAFx6NfjvXsWG3Y4pmXN
+w7w1GCD46NbfGd/RJQzUd9T9/0KN6HkQ4lj3EY5/XJeusYWVON8r3hePd6n
cOZ7tX9xDeLwSwOfQn6hSh5BHPfK4Omdh9cfoKv/L36SOOvfET+08Ld0o17G
/+JHiIfQ98W4emlKRtWNtrW5PuCPO4ybVuerLr8X/FbWkKpePYwE/E7A1Q4k
NitNsxDQ7eU8A7+P1cjI+rHvpvhS1l/cU8vOz9xNQKcY59uulxvlNajjKqDn
i+ffBVZ8KctWCej5grc3XZU8Jt6L7c/6ZH/e/fAytR7/Ltbd0fifHxHsA964
oNImZKwz/y6+F+jRtPjuUCsB/WVw37iJpz5vcBTw88B8FPa6vUWhkRPnmQU/
1PGam1VvFx432E/qL7c+6os8uP7gu0f5jp1fz5vrCX5wa82uJ7/KeoK36Fu1
Ima9lYA/CtbPKp0x0zzi5f4d3J7W/6gn+JUzQ80tX7lyvwDPMp5U2fWlHdsT
vBXpzDRQrOfX03oe9QSfmDXWqYG9JY+3mK+fRtQYGtZOjrfg0Y55ZRvm2rPd
wCfldtKquCH7O/iC8zrt1zyW/RrcvtXuG8dynbhfg3fo9bDQI9deQJcW8/7U
62fDLedq8vkDns9pc+R9VpSBgH4KxxOTfi/8/sHHXUna+uiAmYDeEOt9UtyH
BdZbtH7oS7q7+F54vqhXsUPpMiu2D3jzTdPm3bztxHbg+PWShc+PN1fj8R9c
J2rSDrXbGgL6yHiv86qwxR1WqQvo8LJ/qFHIEsu+WgK6NuD9SEcXOi/gdXsW
FMScNBbI14J1SM4Gk/nmixyFn4IXEEeeFfDMtmGxlXXcxF8Knkscus98rm5q
02nPKBu2A/iguue/laaqCcRVohzVtMXxN/e6Cn8FL4/4H0c7QTkvvuQbxpap
C+gm4PkBPeIKGjjoiFcKPpQ4/FbBnck/GXlBwNdsS9vTZ6uR2K3gG4jDPxh8
bbe/NovWpkJLwTcSRzwP1kuT1vdRz98px3nwlIXbyyqDjAX0HcB7/6ZhWZJt
yv2X9Q6/73oatdhSII8O5xvJ2XBu3kcHMZjGSZxb+n84sGfLj/US8uLgeePY
fuOmRToL5MXhdWBGTpMXCS7CFvogyBd9bfv0hT/GPeiw4/l8yyYn5mS7C+iw
c32is6Yc6K7icRXl3DFMXmAY68924HjiQf/zz8R8B96i87O9I8Prsh043vfX
ie/2engK5Angc90L5RfHjrAVyG+E9eeDYtXe2GA7Hp857vx+fHhxqAOPw+Cr
Y/uqLic687gHvt/xVDO7ZHce38DvzTnz9HjnOlxP8ISJy5IyVzkL5H8Cn3J8
Sq2hHQ35fJ51/rQb/9/9Hc5jsS797NTbene2JtsTXHwYZVVUqM72BK9jevdZ
eaU22xPccOHOJddUBjyvgevv2Oh9LN+Y6w/uNPjh7pgCc54vsI4NTTmR4m3l
zvYEf7zw/Emzk87cf/n88PXsRU31qnP9eZ3sP2V+2teaXH9eJz/8U+f5KU2u
P/jdRj3X+e3Q5fqDe1eNv7V8sxHXB+tGV5s+BUkLnJnzOQCte/Hd8XyRvuu9
rDOezPH8PFr3sg4sPd9iq9tvplNd+HeBp8fPWaiTXvP/uy7F8y3b+vT7OE7z
/7suxfM3JlZ/2rW77r/WpScU61I8375el0Ozphr9a116mNalqCfWdeq5U489
LXFmO2Ddta/3wtAnKrmOAjfYu7p5/VYe3C9Yfzf59nh/HW9uD+DBS7+Mfuxc
l78L1lGzH27Z+7TIgcsB97/VdOmf7WQ5fF//4Jle2yXebAfwF5/2u6e+8GSO
9c+oHiqNMbYmbAfwqknfS53+jnMkO3A+Uts0sxsHtfm7gA/9dux6wlA9Lp/z
yy3LvzW33JDLB1/U0L/N9NMm3L/AW2wd0HGbpwX3L6wTAtN051nXd2P78Dpn
Rq8n0U6yf/E5ZNmMyNEL1bn+HCdUvfuTyp5yvwNe+/msA12v6nD9eX3y+/5j
4Ray/uB1izsMbPjKmOuDebk85djAzzucmPM6gdYVaD8cN3a8frO11VTM8fxl
Wlegf+F5vX5PJ6+vdObfBf5ywPwW1zK1mLPuMs37+L143nPq0YBfhC5zPI94
JdgBzycs37vfqashc573aT0A+3Ac0smx77KsZLvi9QOtB1BPzI9WXyLW+rs5
c/ngHc51y94VY8r2xLzm+fVkgpW5nKfALzZ6qN/JWs5TrAN08LtxwCm5Dgd/
UV7mcOGuJ7cfjov1Dyj846WvQPwk61CeWJRfK8qGnwf/NrKNc5qX7HfgxnqO
vQ7nebIdwO/nm5Ws3iLnC8wvYUdt9vXOl+Mw+KNzRud7CRX/LozzHx+fMDw9
z4Hrg/EqKD5q7YMMH64P6wW2eha9KL8uf3eOT9Lrmff+mhzPMQ5oUh7YU4r7
lwC6f7FR3L+Y0v0Lvi/4Ak/15/HqKt6/gO+iexnYAeNAc92rLas2STuwLpG5
tp/VLg9+L3h58qs7+ybpsH3QT19fXrrXdklttg/a1ZkdQ4dt3liHvwu++3mr
R4bXDlmzfVj3UeW0KUdLJZCPEN/FdEfyhcO9nHldzfdEpCMKXSrU8/mopDfq
eTZ8zgnunTijV2SCs8ildSnKX1JS17xbsIcoo/hSfF+fA37eE3TrCeS1Bc8d
Ob7THnsPgXhs5qRzCz0UtIcHrnd0i03qi5oKfo94XYrjYh1970PRbU0aiHoK
nkt8BcXDg+uEjpuanK0SqxRcjzjiJdh/8ljE01YPPPkeFrw1ccRLgK8lvdzX
Cr6OOOKOwD9Zjjhi2tVKdFHwCuKIi2Odp+/NntmpPAXi4sAtn3zacFJbJaAX
A+7pb/fx9y1eAnoxHB9j2O78zfQ6YhXd04FHv12setXdVSC/L7gR6eueVvS7
FtTvXij61xzqX4jTY7++iyOq0jq6CcTpgX+t7LQ2289dvKb7QfY/HOurfeOD
h0B+X/Ab6tmqrbU9hK2iv5tTf0dcFutNrjx0zj/SSiAui/UpnQYYxxi7COgj
cNwS6QBDHwHc2qVw8IlVVnw/hfdOoHMbxIejH3km9X6bmesuoM8L/q7MyfP6
fXe+R2A9m87L+yeH2AnoSoB3fdu0vPKBjoCuBHjn9X91+u2GLpeP8WTjlczf
C7vV5ftZzl/xomz6imHufA/LeZnKH+VF/1h3oZ+CZ5BOL+KZMS45lXRT++Oz
v6ih4HbEEecMXuTyWW2YU31RX8HPEoceIu8rnabsadvVi+9hwZsTx/kSeB/S
6YVeIXj0mpub1jh48b2tkkOfgvMxfne3zV7hyedUSo44Z4zDZdtOuWeeVvG9
LecTLvV5HNtQJaDDyzq7zSdcTl3tLKAfB54bl2uS3t5KsA4v8eE7HIeqRzmL
DtSvMX6mxMy4rP2rB/u9gDumjnnTtlhbIF4d/Oyw0kGdG9gJxA/zOfP2Wyfe
ttcWy+h+EO1807yTE8tCvMR2OkdiP+eYrhffxNQRNRTzcgDNyz6Kc9HXdC4K
XRiUk33c+0TSMU9Rk3SmwMe0nZB16pxKRCrm5Vk0L+Peh8tp9XCOapeVgH4N
nr9lGly7obOtQNwveMzASJ2gOoYCegfoRz3Kvn8f+cM+iN9D+x8bYLfnQ5I7
+zNwPoqZIb3Wf/ixDoduL3H3X/wjm+8xYfuz36Pf7e67W9Zm+4MfK66W3PSg
oYAOAr67/oDrb/vP9hKI7wLXmRBWs8czZ773B3cdtujMNxsXtg/rZ7fovnTB
NWdeJ2C/af5s+5q2cVUcr4v28PnMrJyVAR4Cujzst096ttsVHDq3O2m8Qjl/
dvl66p26Dv9ePH+f5nHE8XIcQf+9PR+dtmS/JtZLI454Y9bl2h5oPcTZk8sH
vzDhVCOjey4C8W8cX3j2ar+vOi4C+q347tdIhxb6sFinjSedWOi7cR62qasW
a1yryetP1pOo1vTLzQXuXA7Gjc+k44rxHM97TX5vMW6GEdef/Txp/HxN8z6+
o9cVn6rDDVQC+vLgvlv3/5ns7MH2AfeomXjIpcST7cBx/IeuBzXTlnFJaA8j
p/pM/37PSXynOHDOG9/ExWrPNy/hS34FfA6z7I5rxUdXXt+CR1/qsbBggCNz
nGP0IT8QcLSTndUO7apKlPEF6Kdu5GflrxhPNtN4gvUz+PWMtR+u9Xdmv0fw
2eRPtVtxzhBA5wyrFP5UD8mfKkwxv0+i+R3fHe3HdJGxS5y1Fu/j0H4O2qr3
GxBtw3ZG+zk2aPnQ4/kOAvk8wIf0zXq9y8BTIJ8H+Lh7I59rl8v9I/irL17d
G52V9z7Yz0aQvwQ42pvW3vKrW+d48P4CfPujidktj5tzPbHOjyw6+F7D2VEM
ov4Dfoh0R2PonBn86sHQ3apQO7YPeIqpQ8VOCzX+XuCvDqtn/RpsI9rTeMv+
nDF6By1mqfE9O3jCvI7jl/VW53s08AcWWoYuGaYC+cnA80in9BbNv+B/Llxv
U9rFnNsb9q3mVwK+d0iW9+DsVxB8cUIbAys+/0E7X5k6ZIpesty/oz0nDtx+
SD/Fj+0M3m9mC7tq802FOs374JUXS6/kZVgKxM1i3Iv+ZViGQZCVmKHgUcTx
fdE+7V9lVH+6y0sgLhrjXkqt39JvfvLi+xE8/5XO0+Anhucndh7lP/nH+hbt
gfVI3OoGO7naiyH0HPhB0tuE/h14pW7UrsbPZZwOuJfWYoO/+xe+I7j5H76r
Xg8y4/UnuB7pbcLvBXx+65hszTRzYa7wU+pMfkr4Xhw/va0k78oYeW/LOvfN
qyxKO/qwPyH46y/vChzfWvK5AeuArtzTtzzdT0CXgfNIRzwsDNivYj9A1lsl
jnkE5ai977W9y/U6AjojnN/bctX7b8PdBfREeD3Q2XJ3Zy0PAT0RcPNZDatG
pHiIF7T+Z7+a/J4u3Y+5sh8L+JPQhN81fawFdP3Qnn3nHt1ja/mtBcoBz8lT
Px985XuLwf8Rl4py0J63Gbzw/SOqLq+vwFdvnP7Xqvn1eJ5if4m5tXSNG7rz
Oo3zjZfeb7hgu46A3h/av3HrDepDX/iLAgU3JQ5/b5QT89yqVZd3+kKd1mng
B9/3j0/0NBSh5HfNeY9XmdaacbMB+2Pzfp/4q//Y70MvkvfXdeLHZT1yF9Cf
BZ9zrGZxRo63gN49+LqiGu6+Tn4CevfgjcZaDQ056ScGK+ZHD5ofYxTz4J80
D2L9iXIS+2v9vsC3joD+ArhOZlFS7CIvAf0F1kOtlWVzXNOLfy/ru9/ZtNH2
uRevk9Efz4VN+b3fFC2+VwUPKPt4TyNAW0CPEv10xZN5gxo6ewsbBQ8hPlHh
l7iD/BJx/gbe06d4V88ITwGddNbnO7ZB9Xp/TdFRwaek/Y9PUfgxniU/xvaK
5yfR8xGK5zPp+R2KdeNYWjfmKfwlJpC/BMrHuDQt7EzDDaZqAnptrOvwS5Dh
+A9qYogiLiyb4sJQDsYrdb/Mr+sLfbme4BN/c7YIOlmX6wnub5QzxSDCje2A
8eprYNE07VE+7OcJrt76fxz9FOVkF453zD5txL8Xz497Z7d6TkZd9hsBn0Qc
evGcP7NbhNl62wZisIKHE4d/OOeZDHsSsyPITCA/E8e5PFPdn67uLpCXBbxk
ysyx4SM92S8CvHj4+h5asV5sf/AnD9zuJ3bzZT8QHrfjbi5+HegnoL+JerYc
vnJS+idPEafggcSR3wjlJE381jPRxov9ulkvfP7H8KIf63b4jYBv76V2aFNr
L5FB63+Mz20OtEzcauEkkJ8GfEW9X8Ptc5x4n45xG7pkmAfxfJSTfcnLWlX/
8gOcTP5+p/9Df8CC5l++fxxbUeS0zUtYKfhB4siLA74i5lSriv5+YpqCryKO
fT3Gn17pv3w2+uDF7Rx86bNjM5eN9xPIQ8x6V2dH6BU6evJ4iHHpg7FYfbJA
Sxwne6LfrXN7mptyzYHtCe5WTbVx40lHgbxc6I+PKH4TdsPznUZqT7gRVZM5
56Eiv5ozirjONRTXifUM2s+w3gNfNjmtYn9s7l/EIxT9tBr1U3C0nyXLU7a0
L/MVyDPEcW1BkWYFvp48zoPH69Rs3rSDjO9GO2k8aWuSd90afN+BdXKBqLNg
42l15nj+g2lQit5UdVEAnTv6vk0mHep2v41KXFfwBsTzFbwRceRR43PytfMM
Cx18RDsFf0+8vYJ/IL5DcY4xgc4xUH+sEybUS75YMr4W76NZn4zOJVBPtLfa
fbv+MWKdit/LenXrVsyfO8JHIA8Tnz/3K7SZ3tWL47Y4z8CGo1nxo624HMzv
FV4rX32/by+QHx286srL3s6djXj/i3beJ+z+suy2xvxePP8muVmR/2kTtgOe
dysoeTuspybbAfOX/YCw3w0/afN5BZ6f93mLeZN5tbidoP1r7t1yU62tJp8P
83y9e7Gbpq42nyeD9yOO96KcAXVT1gWPqsX3dHj+1fGYw73u6vF8AT7X/+r+
iDRdnl847p44ykH5l6Z3/xzdRZ/P38Bnz2g3zeKRhshQ9NPl1E+xbsfzh++N
/WvxO21hpYjL3kZx2dB5RD/N6lyqob7VXVxT8FPE8xX8HHGsZ8DHxOzMP12j
Dq9/OP888fYKHk58h+KcqoLOqWB/zLPNmiRmZTQ04vpwvrmCMrP2uz24fM7v
d8Zl2+Rwb25v8jxz3h/B6rKds3/XLh2Pxi2ceZ+OceP8qG13a8wwY38M1vkx
bKxWz1z6zbK/EMUBIb4J/VfvnOb2jgk+Yqtiv2xD++XlivgRC4ofwb0Pvq/j
vJxxWUHyveBGtyNuGOZIzvmaKK4EcTew523f569MXsj5i/3nwx53/9WvGs9T
GGdMaF+D/o7fdSjbY9iiZvo837HujXu+YfNoQ4E8eRhPgroP27W1v7sYqPCD
9Sc/2CEK3pD4DcU6djKtY1F/9i/t5NxweUt1fh7tagKt99AeYIfA+Qt3Rxua
8bzD+a6j1K54qswF8ominYz9NuKRl5cz/y7290vv+P3+QjdeJ3B7W6dZv0Wl
p3hB56gc93o54+2GROd/8fbEcR7F81fq999CltYQO2g/zuec29vMKHmizveP
Sv2lyVRPfEevCd6vzU3cxTQF9yU+VcG9iVsq1lGptI6KUKyXVtJ6Ce2Bz3lu
Ruy9MNuY1+2c725/lothX12+p8P3dW7oOCDqQi1e34IPbaJnsqpUX7wiu7FO
SIqjyYMbTuKJgi8jjjgj7i+nUo2qNmjy+Qa4WfPOahp5tYSdYvxMofET/uF8
b0g6hOkKfoo49o+sS7C9NDn/x7prhoJfJj5VwS8Qt1Ssu0bSugt2RntL3i5O
R4zw5Hs99nNTBTZw6GjF50ucp4v4ScW6uietq/F9wRNqvO/gY1+dOezTt3vH
763aaPJ5Js551PrEF252lfVHu91QOufbxXFuIobGJfCpLYc2rj/e9V98GnGU
w/PdTHvPkgtuvM/iPNInfWfp9JPxhqzPDf4f8Z7IE8z5Y61yG46s7iqQJxj8
Q1WbrtGWLtx/8XurQnZ2/DTRQfQjfUOsS516fuv99Yucv8BrzZtTb/Rfjrxu
BG+x6l3EpCArsYnyWsEOAzSGtfm+00gEkP4+uPWAliNmFZgKa4r7A+8ebvv7
BJ/q4g7l08Lv3WQ86v3abkaiiPT9WVft+bNPF7qZiuGkxwqe27dVR7vGlqIR
5bPBOP984YZ2TSoMxWzKmwXe9Ov0KPU8E9GQ8sFwfGv7RXGvRliI/aS/DO7t
+zHkcqWNOE76jxhPhjn3XV6UbCjsKP8B64PVWZ+3O9REIJ8N+NlQ9YAG2eZi
DulFgruvzt+QrmYjJpN/Ndp/Rean2y49DAXyg4I7Nv56/dtXY4G8XOC3AqbE
JnQzF9Cz5nxo+poxHyOthRrO/Wl8m3gpdUivlsbiKbUT8LIWUz8e61pbtKd2
gvHtw/D0+IoXRgL5e8Abj8xdEGZrJnKp/YDPSOwQWNrEUURRO+E47kV2gT5x
RgJ5g8Dt6p2/sXGNqYij9gE+pcfZxMAES3GR2gn6tff5qs+LfvnRbqmdgA93
yDQJ1DEVyG8KXmodr4rZaSFGIz8i8mbs9qo4Gm4r9Kn9YJ7tUzT6rM8LQzGZ
2g/41IMZD7fHm4i61H7Au2V2eGJWai52UPsBXxZdHHNNx0bEUvvhcdK5fq8a
mw2FMbUf8CQjk/zZDU1EdWo/nMemQ0efvaHm4gi1Bz6fyRwzO7jYWECXHDzb
46+2TfTMxRPKM8S6nR5B/gutHMUpOidHO59xeYht5866AjrCrB9cO2GBWzVn
EavQhVhPuhDIx4b202tLYeXdDw7sh8PnbwZDX3xQMxbI7456VnPyfdL3XG2+
H0c9T45Iye4YosXn0uCaU2dpxzvosX8axqVS3UGWa/vpiFDSw8XzloHq5Wuj
jEQV5XvD81e6NLo5aryTOE31xLh0Ti1yZ78SDdb3YB1Fjd4+2dm1xRcqB/3X
M2TU5UhdB/GIfhfs9rHt3JBasfbiukJnw4l0NuAXAbuJ033HaxkZCuj1gy+z
n1u5eKsx+wWhf6loHRKnWIeMonXId6oneHlJ9lWnt458P8Lz0RvVsrQMHb73
x/eaUH3Bieau9sKAfj+4aBd48X5tB/GJykf7vHX62lHde7XFNBrf+HzPpl2I
roe16EjjEr7760uJN2MfWQlb+k4c53KywtrQzVhso3aI77j2cLrO/fFSpxr2
bErxgw0V8YMbKH4QeUpgz4FRzdKa67gJ5FvC93JJ9E19sEzFcWrsR0H5snco
7seb0P04dNtR/0MZWi32tPEUN+h9vE6gfMrIk8fzPuXJRVw851lKL2r5rFJD
bKX6oxy/mekHe62R+ZvQPpH3EO2f/YofZG7cJEwEdKLxu0IzPKKeZnmJWwp/
gDnkD5BI70U9F56bs7JfczeB+rM+EuWzG6S4/wqh+y/YAe9NoLxgyAPN+dwo
nnGg4jw/i87z0S84z1Ltxm3bPzUTwTgnQn4Gyt+EvPKcZ7XHxBBj4cXfl/Oc
U/4jfEf+Lq9Tcs430mD9BNjnBt0ftVPo1lqTbm1DhU5sZ9KJ7aCIn3Wi+NmO
Ch28i6SD10ihO1eLdOc20XdB/QtCDXb16uvE9kS/y6B1fjXF+fY2Ot/Gegz9
q88iy85BxTUExkfwUddWvQ5WmQnWMyKe0ydt3MYXlgLlgusO2VXH57OdQPsD
j17is8hAOHH/BfegOC98V/CBc14NMJqlz3r+4MPTYwZ0/mjE9UF9ywoeLb8c
YMX1AbfuceX58iO1uT7ghc+qOpw1k3ryzCluC/UB/9XpVt/Q7zpcPt7f66vt
kUWDa3M54M0oHgr1xnffMXifVfcf6y6UC26Z+3bbFG1pZ/DF2p/N8udLO4Pf
jBnwoXmpLf8u8JZ9V84ycHNkXXHw/cFFw0ZluvB7MX7cf1uWkWkn3ws+Zsnm
rYPy5HvBV+6sONn4gvy+4OvjrqneGcjvy3pKFGcEe4KPfhs0eN8uQ/6+4L7u
huHzq5lwfVh3yMu/w7FHsj7gaoc7mScayO/L+bp9VtwuWCrrw3mEKG4I9QE/
IRq0rPubAZePccAq0Llm+AQ7LgfcneJx8H1h1+GNErzHdDNmjt/hPmt6+s0e
8ruDBw3vdiKzrRk/j/eP+p7gUNZVPg9u61XjfaCv/F6sCxHoWtE615LL4ft9
jzNiYAdZDngHv50DC4xlOeB7Tq07u2mWtDP4xtXjHiw6YMv6+eAfaV2E96Ld
tfvkZuDeWr4XfN6whdE3vpnye8HH7c+MGddBvpfzGZ5OmTcnULZz8DKvMRfu
jHdgHX4uh+4p2J+MeP3P/ec/La7H9cR89Ol5yNohP/VHcLUg38/bvsh6sq5C
tdjm/p1kPdnvd+p8N6Pe0j7ghhQXoKvYf02i/Rc4fof+nCsvdzeT9QFvQvss
1vFHPFrvc1f7N5TPgztVb3WkXXX5fTlfFu2nUA7fu23LdP/DW5YDft2m2aWX
RdIO4J+ap65vW1/aAXwe7adQPvqZnpdtpnCX5YMn3VrattEZWT64Kuv4yRXF
Flw++HCtsatCUm24PfB5Ka1LIxTr2Bu0jmX9HRpvume7fCx1lfUB//h9b2Wv
o7I+4IPPz3ugypT1Add5u9nkVDsbmZeN+MwZMwKfZ/rzeznOmta3eC94plP7
oNAL8r2st3k1ZqlJmQXn10B5L0hHCBzlJZFuD8dFEPcoGTxzW6Ih5wHB7wij
PN14HzjycXO+VLL3m7djGtzaIfMjo302JR0JlI/28JbyLKN88MGKfPccT0Hn
26g/67CRviXnx6TftYJ0kFA++PE/yurU6WvK7QR2tSK9I9QbfNPo99tSF1Xn
eQE8mHSK8F7wza4iN26TIZcPu43x2/6l1xs5/zL3mty/xkA3/l0oZzLtC2AX
PI/8j6gPeHGdO+b7p+txfdjfoLfZ7bhYI34v6tWtxd++sS78XcAbp0fe2TRT
5o3F3y8t6JN+daLMv4b6utC9J8dnQvePdEs4zxfxOOv6bdc0NmP7oH/0In0S
vA/PC8qTxflzOR/jdKdxsRr8XvDbo9plnBthzOXDfj239n+52VjaH/xAem5d
19cubH+U04r2X7AznndZldNFNcKI3wteond9T94BEy4f/2/Ozo+FV7Wc+XeB
j6naPHTnbjeuJ+uJnR/dMlLPgcsBtz+YkdXinBP3L3B30sVFvdEvuuyOTDzW
XYPLQftHfm08j/YWRzqlqA/qez1it7ftPAe2A+vk0/6X95lkj3V3f/+wZZE9
j4e8r6d4W2vFPsuM9ln4XShfRfr5qCf+PjQ+sdHASyp+nu/TSc8Hvxd20Lny
YeXaMJlXGvW9Tv6TqAf4FYqv5DgT+BVP3hJYeNyHvztz8mNEOeCz7jlWhflb
yfzd0Gui+Fz2I1HEzXG8Af2+ZQZH9j0NsODfhd97dvXlXtVfybzDnO+O/NNQ
DvhxikfjeCr6HS4diu5Ue+L8n+cnKB/tJ9HfOM9+T3V+HnZ7QLperBOKdkLx
JviOqP9lih9h/UGq507SjUE5nC+R4jJQLtrtoWarJrtOkPMa7BS5PKL1xGKZ
Zxa/a0Hw3Jlrjshxj/M+eaVtto1y5HJgH8d2Pb9+TpN5Etkfnvz5UT746xtf
Gq9uVZPtzM+TXz37v1L9Yzct6NN+h8zXCXueoHwrqAf+fkLlPvm4psxPjfp+
JX9yvBdci/zA8V783kdDQyotvWVeTth/Jem95ynOc9LpPAffi/NSUjw1nke/
LxjubPjHVKN/nUeV0XkU3ot6pVCelDzFuVA8nQvBDuAjyJ/2mOK8CHnPUQ7q
e9Vp9KM7XeX6BOUVk0476+kTD5jrN7ztY9nflf5dsCPnjcqIWG00ROZ9hh2Q
xxn1wfv1k0rywiPkuhT131Mwasm8VDm/4+9BpIvFOrmY125e2uJ2Uubt5fyQ
lMcW70N7+4V0XcDZ74j0KPA78XxP0wkpk9rKfKP4fzaiRqfwwSp+HuXkukwz
1w814/rzvRvpu6J++G6VpJvH+aMV+Vs5fzF9h0+kp/Sr4nwvX5GfnXX5ztys
+WS9G9cH9V9v2j3YKseY2w/KR54+vm+GHsUwVeaDljIvHr7vFkW+Wt735My/
vnhZDfH/ALKEWzI=
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxFnQf8V9P/xz+fez+fuykjW1ZCVlb2SGRFhIyIimSUvUrIjlQiIntkJjtl
byJR9khWKTIysv1fz17n//g9Ht/7Pe97Puece+69Z7zfr/e4q/U+vtuAqFar
/ZjXarHSw7NabQmlqzZrtbPTWu3teq22f1KrbdSo1bYTPU+/PayC24veUMdZ
KrON0ldVPlV+rONbldlM59spna56m4veQfQ7ogfpYgN1HKQ6+6nsDqJ7iN5Z
v3UUfajoDiq/vcrPUN73Za22huhj1a9vRa8o+kjR80WvJLqv6AdF36ayE5Su
r7obKn+KzjcQ3V7066LfULnbRXfSfZ6rcrvq2j8VtdpL6v+OuuZUlf1O+e1U
5jiV3VX5dZXprHQvpXvqOEDl1lK5VVXmBbX5nH7bSHmTlLe2jtWU/6LyNxS9
keg3RD+lei25ls5HqPxhKv+tft9ax57K+1hlthXdVfSnorcRvZfoT0Tvp/I/
ih6ivCmiu6juh6L31vvYQPRjou9RufY6ttI13tG93avyX6j/74u+T/SXoj8S
vZnqvFnVFr3kv/Wc54h8QvSbovdQW93U/vfKO0dtvqG83ZS3k86vU/19lH6l
/GtF7y36Jz2nHXV+CNfStXcWfZjor0V3En0o1xW9k+ie1BXdQXVPULqp0rFK
r9OxmK4/TNedruutqXS7ptufqd+2b/q6n4neQnRH0e+K3kX3crbOn9W9vK62
blP+jsqr9FupY4T6/Yfa+13HlzW/F8bzI/ptHdFLin5MdBuV+0K0HkutnfKX
Uvq48tcQraQ2Uf9WE83ceJh7Uf9miz5TeWeKbqf6D4m+Qw2sJXqC6NWbnkOP
qvzx6tv6opfPPR4YGy/xrign+mXaVOEkzCXGHGNvGZVfkfGn35dXukfqObWb
0tdUd67KnKX09Mjzbqu65+iWOlrptwGqs57S5dTOdg2P4U3123l6Z91F/6Ex
/2zquTtR7fRX+XVVflmV30Ztbq78b8K8Yn61VH7XxONloMqfpvytRLdW/umi
txa9iujz1eauqvueypyq/C2Vv7LyX1R+R+W/rvynRO8georoM1RmG9YZlflc
+cOVv6yuswfzU7//VPm9M4+m6j7OV/6mjE/VGyJ6E9Fniz5JdcexZqjusNzX
vUD5V4vuJHq46Ez3/Zru7Tud56K3Vvk2YR1hPWmhsn+o/kfKP0TppTp/X9f+
RH3YM3c/L1bZkbnv9yLRF+o5nqk2z1d6rfLnqPxrKv+rzrdn/igdnvtZXZh5
PDOG32NeK3830aOUv4LeS0+VP17lj1P+w8r/Rvmnqh+TRLdXepnqDNURqdwI
pZfriEUfp7oriD5W6Skq96DKr6V0pPKm6T4bKjNd6Wgdqehl9KyaSv9kXVfe
iNjnp6nOK6q7ndLjWVdVf4DSATofq/wllV6hZ/ObjtE6/1D1vxX9kdKrdXwj
urfK7K86xzKmlZ6nvPk6LlT555S3r445Ov9b6V865opuoefVU/WnKD1VefOU
d7rKb6X6Z+o8V3otE0p9fEjJ87rGdypzpNIhddMXKP8XlfuL/YbnL/pf9g/R
36rcfyrzi67xptqZGvt8Mx3TdKysuvNKr6PrVF7Lp9Y9JrZQ+paO1jXvO0+o
TDuV6ZV4rfte50+r3Rkq80zqfeol5W1QeXxND2Psodj7IuW+z53XivGr8zfr
nmPsZc+o7rqqu1/ifu2iNhfXe7iYOcv8Ff2K6D95bqKHBXoH1hnGhtILmCc6
/lL+j6nTn5h/+u1v0Seq7ZN0nXdYH5Qer/PrRR+jMvupD4fzfDQOT068rq5M
eR23il5R6fncg46LdN4vcXqU6m6t9n9R/rHK20rnq4i+h/b13troWFXnd6vt
30Q/IfoKlXtcaSel17L263iS/il9VelqOm5LvEbfr3ZOUZsL9NsWSr9UP5fW
dY/QNTulXue3V3qinmlL5fdiTun8OdXdTW3srPxllX+y0s9yz6nvVWZabn7g
Y9FHir6DPVf0pWHMra50aub8nfT7c7mf1QzlvSD6BvgZ0d1YJ9WHS3WtPuSr
v7P0Hu/Ve3iW98t6p/w19Pvn7Fm5n+eHqjc193P+SPS7oieL/kH08aJfE/2P
6MtVbxm1cavavUDpDzouZk7qPV2udGuV/V19balyO6r9l9T3IToWqNxA9eFC
0T+Lflbp3jpmi/4ydd5XShdreO/k/V3MeKm73W117V/Zl9Rufx1XKa9ibak7
n/PR6sMI3fsopZ+mvuZMpU+rr4sx79XuQp1foeveo/QP5onKd1B6i/KeFj1R
dT7QPTwBD6pr9lKdMfptkvKP0u+TlS6n42jRq+tYXvSTTc/RburP0srrouNf
nf/HHFT6h9qZpTZfFf236I3U3o8qs4LqHqC6g5S/QNc5UPRZon9mTdXvlzC2
dQxTO4/AH6iNB/XbAzrGwxso/1Gen/JP1T2/qevP0zPfVHWfZz3RcZCudyNt
K71e152v3x5Q/tm8I6VHqO63yrup7vOv1c4SSvsqfxWVuVf0x6LXZF3iHYle
mHvvelBlzyrc3kzlHQJPpvx/db0eoscwZkR/kHp9zNS/r1OvxYXofyPz5svB
B6tvHXVsq9/ugz/Vb0+JHid6NdHLwlPwXHR+jeiNlZdFfhebKM3DuzhD/VlF
dEelF5ceb0uzXkbef7i3jSKXWVr0g+qnul47Q/26Ve3fomNr1Xlc+Ssofx/1
88mG5yx8Dnxuex2wrqsGXu4hZAq191pYKzqo/o06X4P2RXcQ/bLocwrf09e5
f58ienUdC3Kv9fBa3+rYuG4+Z3LT13lW7V+t8u113KffXirc92NVZoaOVqL7
K53A3FKZF3Q+p/C6d4LyD9a7b6v8q3Qv43Ssr/xH4Kvr5ruW1zV2UPklRfdT
+Xm57xM+ZGc9l/VEPwy/1PC72l15S5ae1y1Lz/dh7Ie6zk2px+1SiffY93Td
g3U+gP1D6fVq5wa1c72OdfX7syp3Rt2M76jE63FnpV1VbiBzUOXmqP3Bop9i
XVI7p9W9px4Mb6b88UqPUP6Kau9w5rvqn8rejlyTer2/T/T6mdf87ZR3us71
V5uk9ndNPFfuhr8rzIcXavNknb8Lz4w8obo94NMzz2Hm8lz2+cy8yr/wPCr3
nugVlH6ceB+5Ummi45S6eQKE2zUiv5v71d/+kfeGO2LvKexDl6h8qvSapvmO
z5R/NmuF0kFKE8roepfqt2WUfpFazlhe9bqrzqXqw0L19RH9dofSh5QepvsZ
q99e0IB6Ovf++ZnoI5DZePzISTquY91Snf1FDxX9m+jeou8S3VDaR8fdoptK
e+m4U3Ss9KTc/D7PrZ/6s4b61lfpfZn5kwXqw/nwP6JHsneIPhZeiGerch/r
3toh20ZeQ1k/H1WZ41jfWVcYc8o/R3nHqO2jdRzDPESOU7pQZe4Xfbjqfa1r
HanfP1D5fvptsOr8rvyhKnOO8pbS0Vf5N0WWlVSt9oB+W0bpjqnltTWVn/Iu
1c6nOq/rfG+VOZb3rmeyj+jj4NdEd4s83mp185vcC/e2jOhW8Jf66Ro9l25K
x+piu0S+lz90Pj31HGmr9C0dXVX+IqU35pY3kXe7i95d9JXIu6yFkZ/jkMT3
t0B92UbjNmJtU9krGGe8O6VXwveI/p13p7Z76ziq7r2Xax0o+ufA/yFznZf4
2Q9X+ZtyP0+e63Eqe1/k93GQ8nvxzJR/ZernvLbSiYmf7bnITXouB4d31Evp
3ZGve5Z+W4j8ovaXFp0r71rRvVX/TNF15b2IjCG6VWLe/M/Y8+dh2q57blyc
eE40lK6bek6MVjs/Kr2Q/U3XeF/554huqszq7CM6MuqnnkdxYj6fscqacpXq
n6B6PfR7W+V9oetVyl8iNc97gsqvFHudietet3jmPN9uyK7w5rrvC/T7I6o7
jLUa2Q9ZBtkzs7yyregXMvMs24j+RO1fznhBdo/N98Dz3Kn80ewRPKeG91Dk
i5661mXwFcp7puF9Ctl528L92lhtHiV6gOjbRb8j+leV2V/0fqIPZx0W3S6y
rMQ4vFLnvyjdV+nx6sO6+q2/frtT538rv63Su3WtPfTb7rwLtTNf+evDmxTG
anZVmXVUZmrk84PAqHT0VPmTlJ4Yu0/dVb6X0htYK5S3ROT5+ULhPeJw9h+1
83Xk85OVbsUcEf28yiymdGtdd4byWkTu92g9q3VEj2Guq8whKnOd2tlL9Hjl
faO1rtS1Fovc77UjPweeyy661ruR+3SV6vymvAOUnlEa7+oi+m393q3u803V
5gKle4M5qM1D9Ntg/fa08guliyMTiC6hkT9U5qPIY7S70pMYkzq66J2dqHa+
A7NS+YHsCWBHhdeS9VinC4/BZ5UerONo0bcq/8PC7+c20TshI7F/iX5S9Omi
7xV9jq47WMdQ5qyuNULN/qlr/asyRyrvFpUZBy5VNx44o3C6F++RcR75WXeG
z1P6gPKXKDyHthA9pmn5+D+lj0XuP/P54MjleRbX6/5n6Xx99v/Cc3cz9iKd
H8jep3ezRVhvwcduFv266BI+Q799WPO+/Kvmy7O8N/3wfODTp8IrK/9ppa1L
84Tw52/pfK3SGMMGuuZvKvOc8t5Se9exhgXecqHSV+rmOZavzE9uqPLrleYn
24u+N7YsOKtmXhQ5YJrow/Ucb4rNEy+juuPhudjrVO+GesA+VP9G3iPXVdn7
6z5fV+cP6Pc1lW4Ym/d+hFeuujfXLXeBrdxatxxCXdrnHk7mPsEm1PbDvMO6
ZbNbS9dZR/mbJMZdM/jVxBjOjezRKvOcyoxXmcPU/54Nyw9twxgZrnJ7Ku+s
cL5EYr7uGKUfp37HldKz9fvAUGb5wuvVDnqnZWJ85ShkxMLrVZ/S4+HSunm1
PPEa1ldpWZpXfFx1h8G/R5Z3liss27NOLpb8T75P9PuDdfNe8PATWA9YQxOn
ryNzJn4eq+tddExcdmOlbdXm9YwN8E/d41zVH6vzR3PLsazP8xO/o62UtkjM
c16odNnCMgtr9VKF9xfkXGSy23RMYU1IjG+31/NZPuBht+u3L/Tcd2QvUt7S
sdeQPXT+mfJ3qRk//1x5+9bNH4CJ7i16V/gM9iDR++uY3TR+uBp8kPL3qpsn
OELpfnXvx18FjPpw9WV06boN9XdW0+19zLWargeGH+m3ripzBWtdbowJfPjZ
pnGgfdXOL7nxKfDbF5vGOs5Q/g95wHiV/pobY1pR6fboZWJjwe80jYv2APcA
29Oxi/J3jF0GWe/lpvUp3VXmNMZXZAz5k6axysPAcETvzLNS25NUbyI8lsqM
UvqUyt8letUwlu/QMaAwBvs1WEhpTHE95f3S8BiE33g5sSy1hdKpieXc5fRs
7yj97tqp/I6lZcZ1RV/F2qDjHt6H2hkZuc49hfNOVNmRhXn0Y5X+EHltuBMe
Qe2fo+v2UfuPq893RO5/VhmjvhD8NTa9Fjxow/og9tnumdO3wNFy60aGKv2o
aWy5Z+I9Bd6JveSKws/jLqX/5NbRXAYvqXTPunFexleXMMZOjYyzd2AvhMdg
H1abE3LT++k6lxTmm4crvVTHuaxNzInM+pp7de976LwTOALPSvnviH4XbED3
+ACyIGup6H3V3jTw1MIYykClDyr/IfBa0bNVt7XyTxC9T2FeuZvSp1XmZtX9
RnXvLozVnCD6atHXiL6f+V157XsP3KvynPyQvUb02qLfzP18hiMLK725ME/b
DXxAZc5X+1+Jvr4wv7o3ci1rkehrRZ9WGAM6nWsWxgonKJ2sur+BUSKf6Rpr
10xfp/y2yn9DeSep3BE8K6WDC2ORZxfm7eFB4NGahffivUrz3n1Ep4Xx+V8C
j3ZQ4Mduzi1TMPdj9uTCWBp4KdjgKNErFMYGrxS9kuhD1Z/H1Z9DCq8LrA97
lOYD4AcOVN5mhXkqnjk8IjzSLaJ76NhT+bcpPSb3Psc7OrcwTnqq2unDOxM9
Av6usKzSm+sWlut68gwKy0u3F+Zb1hN9oOo+rr69o74Nov0wj5hPDyv/CeX3
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
+yX7JrzK3ZnjScJXEG8QfRV2zcRtwe6KeBdvZ47PCX+LPpRYk8Q4fzVzzE94
3VfQldTMU6FfJn4o8cvBsMCyFlf/ZmWO4Qkv+kjuWFvE3Po0czxP+N7PMsf8
hEedKXpczbzxPZm/oTC1tH8vMl2i+xqT+ZsRr5XWx4HFE3f05cxxRNnHsX9A
J0fs2HHK76H8KaLvyvyNhjd45pm/4/B6abyF2NfEwGZO4CuHzxw+xtjwMa7Q
1SLLEev3W9V9tGZeeproa2qWF84qjd2B4U3MHa+MuGXEREUfSEzBNzPHK0am
eAZsrmZekRhq9/Iedd23Msc3RtZIm9ZhrZI4lhQ6Pvzq5ma2c55dWI8Aj8N3
QMAT8IXHJx6MBfkcHObpzHFu4ZGwrSJuKTz/vMw6NWQHdNnI+cR8/S6zfg35
hTiuyL/ELHkmdwwTYplgC4udLTLLBSp3WGw7HXDIzfQcCqWnZPanhu/dpfJ3
RCax91X+Zgn7YJfK30phr9+5ctzJ7dEhVI5Vzfzaq/I3Ql4ovQ+xH2Ev37Xy
d0ReVF6PwD/zfves/K2R50XvVvmbKOzp78LvpfZdwjYGm5l6ZpsKZPLbsDGp
/C0WeIzBmXkSvskwQvnDmo772j3w/PD+12T+dsmryt+98jdg4OumV7bBrbhW
4OcZbz0rxx1+U/TJmb/1AP9AHCjiQd1Q2EYF25R3UuueiDtB/In1K3+3Y2k9
k9GZv6XyivLXq/ydj6WU37byNzky0WtV/rZHjpwSZBbm1A6VY4Kz7nUXPb/p
75scUDm2BX04sLKvfhfRBwWZhXm0d+Vvlrwkulvlb6Kw12Dzg50M+/2+lb+J
Qt/2r/ytFObsfpW/j8KzwoYK+yJ4nrcr28ktqfS9ynYPS1eOI70oBktqmz3i
1vFNj+8r7+VgI3y3Ap0kccu+BftIHVsD+zGwJPCHObTfdNxRYugTX45nAhb3
sMp/iHyf+XsoPLf5lf3oWHPuzRxzFbnsU53v2bRfD/b/fPgE3pK5D9Y+uzJW
vw3YSObY+Mgc4P3Yx+JTQWwidAFbqMziYHWZ47Ejcz2ROU47chn2FdhRENfo
I7X7SGq/AGwOwUf4ns/Rgf/key/w+vD8xC5DlwofTwyKqZXtcVtWtvNEP4Hs
s1xpu0HsB4/J/H0Wxs/7lW1lWlX+/tAaNY83nivxkR5IbVuIPSH4IfYM2Dbw
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
RqwH+FG+N8fYYwyyX6NHQ5/2f48BEuc=
            "]], Polygon3DBox[CompressedData["
1:eJxNnVO4NMuyRXu1q6q3bdu2bdu299k4Z9u2bdu2bdu2ecf4Zz3ch/pWRiUK
nZUZMWNGrIk23mHl7ZuNRmO3bqPR5m+zbDTeG2o03kVeadBo/Fg0Gq8gr4k8
I/ISVaMxB+1m6TQaByE/1Ws0Pm01Gp9xPE15a9p9T/tDOUai/Ea/0biQ9lNS
PpP2d9HmTdqOzrmfODcC8m3cQJuLv0P5DMbfg/KB1G/LvRyAvCjyj8grcy8H
Ii+GvB7j/0H9UYy/InXzcz8rMv7JyOsiL4y8MvL+tF+E9uvS/jfa9zg2ofwt
9RdRP0qZ+/W+F0a+n3t4l/sbmzFuo83bHMtTPzLn1qTufsbfi7o1Ob8Q7Uen
/0/Uz8P5RZBP43r/4XofcW52yqNzHEHfc+nzMPc/EW0e9/643rmU76Hf4cir
Md4GyJfQ/lj6t3gnF1Nel/rLkZdmvNUpj8D1vqa8Of3np/19nDuC/qvTf0Pk
4an/ivoHqJ8P+UzqV6Z+Dv5+hfw6fy9Anpz6M5BHpP03tN8CeQF/H+q3810z
3jzIp3APu3D9D2hzMuXbqd+G+hWpn4v6ozm3AfU3Uz8J5dM5dkP+D22OYuwj
ab8C5flovwLt/+Y6l/Fs3/BOXuR9XsixN+UB/beiPC99xqT+YNrNS/t96fcN
/Z/m3ETU/8U7fJu2MzPuzNTvwt+JqZ+RdjP5e3L9gxjvKNpcwlinU78B9YtR
vxr1i1P/EvUF401LeUzqF+d+f6PNYbQ5hnMbIt9C/8koH8yxPPKRyHdw7bW4
r1cpL8rxHO335/jO94X8PuWtGW8U5KkpT8f13uOeO/TvOyco30n9ttSvRP3c
1M+PvC91+3Fs283v+T/q16B+Qepv45qHMfa59D0J+VvkF5wLtJ0eeWTu70Ce
p+LcetSdSv/16L8I/Veh/gfOvUzd9JyfAbnJOFfz7NdwtCh/aDvvnWNDxnyM
cx8x3hvIvyOPwTv8mfJ89F+U/pty7gvk3Tj+pu9onF+Ae58XeS/6zoK8PfIO
fqP+hn4vlPfm2Aa5W+bb+IfyGs5HxlgWeUXXHOcUz/MA19+Y+oupP6PIt3sV
8pqDrEOuR4twPEP70xh/fZ53UcqrUr8f/RfiWgt6P/R9k/PLUV6J4z3KM9B+
C+q35FiDsf6gzULUzUrdhfTfjnO/IB/PMS7lc6jfmPLX1K9O/UGMvzR9N/MZ
eJZFkJ/nfju8z3Epv0L7C7w/rnMW7Z/o5F5e5LiH9zO93z3ljWn/OOWdaTcj
9z897Zai/TP0P5P6qer1cg7GvI/xP3FN5Xr3UX8C5QmoP5X6TxizamcOjc25
QxjnJ8YbgfEvR76V+uvp/wh9dqc8DeNdjnwn8gyMN4b36HzlPr6kPDHHHchL
In/j/dDnc9qvRvvVKD/F9c+gPEW9fnzDuVG59hgcP1D+k+N42j/JGDtyL3tz
fEn5H+5nWerG4vrHUX8JY2zP9Z/s5P2/xPEI9Uu4njHWhcgTUd6Qw/1pItpN
5vpIm+OQT6b+UspdxtuG8bZBLhlvR+c59dPRfknaj0b94dRPzP2ejnyrc4C2
T3Hcy3Ue4HlO9FrUn0b9eX7znD+fMTaivAzHF/RfnTZtxv/Aa7Yzp8ekz1XU
n0l5ONr8QP3VyGcjT4M8BuU1uZ9zkJ9hvDG49pn035W6HuOdgnwW8m7IXeRp
KZ/Ouf1oewTyqIy/Gv1Po/8nnFvFb5AxX7A/L2UKytdyXEj9ErQ/yPWJNuci
j468BuXNqR8R+TPGPpnnW4dz5yNPTf2enBtQ/z/GG6+f9eUG5IupP4n6hxjv
8176j8zxJeXrOM6xPfVLcn9X0P4k557viPLN1F9B+S7q53fto82+lL/keB15
TK7xHM9yB+U3KG/Sj94xCc89xSB71qmdvB/3suG4h7Gov4dGj1C3PNf4yr2Y
+g71V7rntKOTHMBYH3BcqX7SzfdXUL8n7feh/XC0P5vr7o68N3Kf8msc/yDv
zhg91z/6n07/dbmHjek/Jv2PoX4k90ju5VDajM27v5mjoO/GtKe6MTHtJ6f9
EcjLI8+r3oA8IfLqfh/0v5BzHyJfRf2sjHM29Ycx/krUH039XYz/JcczlFem
fmrqR3U+coHj6XOnewH9l6M8j+sa9f/yd3efheM0yrczFl0bH3Dsjnw4/Vfj
3JWuGZS73PPO1P0PuUd5z07m1rTIiyE36fxfyrfwfBXyV1zzWeRVOD8N11uZ
Mb7jftaiz3m8z1/ovwP1TddM90Lu707qluXvt+pjncztNxhvM8Zrd/NbjI78
WTfzvRjKNX/iPg9yz6HuAI4fqXuJPt/X398hfnvU70f5Qc79Qf0R3M8a9DuH
cy8U0U/+y/VXoG59rn8o9Su2MwdvoP43zu9EucVxIuX73Ve41mEcvyOvyzMt
R/kDzq9H/+UY7xj6X+ya597BMSHjT0HbJdS//PaRZ1Y/4Nye1M+PPBvlpanv
cf3tudftnP+MfQrjTsH4V7qo8TynFVlbZ/U6tN+Lfp+rLzsfXAfpfyR/m7S/
wLnYy7vfgPpjKZ9H/7/Uteh3LP1n4hoVbffgOlMi/8/9mfrZqV9G3ZOxpvP7
cJ64N3MsqH7oPkz9ilV0s9U4dxZjTez3hXwD8qe0XQ35J+QtkDuUt+LcyJSn
ov+09B+Pc6dQfwX3dwX950S+H/lT5CHKc3M8hHwAffqUL3U/4F7a3PPClDfi
mXaibk/3SMpf8HxPu3/zPFOpX/uXttdqM1B/eSdr0QMcS1N3NfLElJ/gWB55
Hcb8m+u94r4xyHr1C/JWXONyyvvTZlTGmpp7+Jc2i3ezNz7K8T3lrenTYczL
af8ez7oM566j/2yt7KdHUvc7dZ+5niPv0Mvafw3nNqduSt7B+dTNRL9LGOu/
/B3Ob4s2K9L2x172zjE5fqI8Gsfd1I+P/Afl6eh/A/0XoN+l9B+Xcw9Q/yDH
eJQv4xmOp+3u6tXqL5ybirGHU+frZR44H+ZyPe9E356C+qO5vwv8/qkfUL8b
x9t+W5xbiPqvqF/ONZpz71GejPo31b04nne9Q37Vhaabb2k15Psob1lmPXJd
uon7mVudlmYnUP815W84TqY8A8eZlKfrpm58jiPVLek/M9cfnzE+cm4zzhDl
Vam/pxu7YJh9wLkRKB/OMU4zz7wt93sI8ljIR3F87p7ey1wdGfl0ynMz/j/I
yzPuFdzf9err1N1K28td7zlfei3G35ny5rRfBfku6m/0e1Jvpf9CtX51suNz
7V85d6o2NL/H5s4v+q9N3yP8XpHXR77M51OPpO2Czcj/0mZD6jd3Daf8LP2n
816pu5LrXeOeQfu5OHch565F/gh5bu1D5J/pszL9D1Wv1z4v83v6u16lvtrJ
tValzWG0aTH+ZpS35Hq30fYN5s7ijLcAbS6lzyLqlZQn4Ti+1id9Vm3uMXhX
xzPGBvT/mz6/UncoxyLUj8ixF+1XYcwlKV/vd6J+ijwD7W+i/ef034fzm2mP
aYP4+3VStv/eyH/Tfl3ab+hvru3hN6A+QZ9tnFO0WZq2h3B84nzt5l6WqX/D
1eizFOWOei/XP6aT9Xw09xSxCe+P8Wanz8HMr+OoX6muP5D685FH8VtG/ta9
UJuU9tNpTyIfW6b9HZRvdz4gb4P8MvJtyC+4ZjRjY6rjHKe+QN9t6+/lRI6J
nFv/73uy7gyOHyh/zHEQ5W1pczPlRZ3PQxnzxW6+R/s+zrnlKP+gvtjMGuZa
9hXH8b5/nm/Xbp7f+b5/vae5/99A+Tfu72t+05uo3xV5nmae7z2OvZvZo07u
Zv8ak7br0u9l3yfPe2gza/Rhvgt+01MY5zKOoU703Rlb0UHVRS+qsn8uV+sD
rlOuV5e6pzDmdoyxVjM6n7rf0WV+2+3Vtyg/V+t26njiH6/Tf8dm3qHv0v17
l6Ho1OrW+9BnB+on5NzClI/zG/TdMMbWZX4/9/pdkTep9cdnkCdWz+D6F3Xz
be3C8ZbfazdrySGMtxXli1wTHJ/jGNeEbn6r6+o5dxBj/o/yWpw7QFuX8a9A
/td9hfEvKLI23FbrF5+7t1C/Efd/Ev1/8xrN7BGP8swXlPl93+f8XbT/mfYH
N/MNOD+cv//yLIcjf4q8LMc7yKc1s3+pbx3ZjM6q7ur+Zt2kHCdQ/radd3Fk
rY8d242t4jM+6/fJ9fdtZn26jHv/iesd2IyOpq72Tjd7x9zuAZS3KrP+ug7f
XOvya9XXP8xvgfdxIs96Jc96C/UPuke7dtD/53a+7y0b+Qb8Fir6X4u8PvLD
yHNy3Iu8IfIjlB/l2IjyBK759fdrnTrIVVxjHs6NxtibcO4pyk92U76Oc/NS
voD2m9a/59F+7518C09Sv4J7G0dnKN+M+vIZrkHNYEwXIw8/yP5yRv19XMfz
P+5+hnwf8nq9fD8Nxpha+5l6DYZPXQ95n4tzbgh5eHVyxn6Y+s/pf6P4J/Vv
+D7r/gPKq3HuZ/dj+v1PfID7u4f259Pmes6NxxiPIM/K8Z9O3q9z/1bnlPfI
GKPSdhnOncT3NCLnbm9mD/2D939NmfX/O98z488ivtvMb+Bvca82cDO6xYPq
19zP0ox3MPLzg2CkYqWjaCNQfkU9mfLiHAcinyUeSPk5yi+6P/XS/2OOZ7n+
DOJPjD+nerW2E/JI1I3A8TrnJkB+kvqZ1Rmpf60dbHAq/s6lDuwztYJVPO77
4e83/vbc/07Un039K8gviOVSfyR/16TuBeeP+liZ661B+QXqP2O+3ut8R75n
kHvwXpbi95i7E3zE663ino48Wy+/35mcu5ryD/1c/3fKD9H/nE5+28/8jXrR
twraTsq5fSk/XWY+LEn5UdpPS/93qfuF9tP1Y6/9TfkvjkVps0Av+sCfyItQ
foT+v9Xlh+m/Ui+65teNzMlVesEqFmvk/m9U32lkTO2/Avljf18xLsrPUTmF
9iHlPbS/aVP6W/D86/j9Uz8+chv5GubChtSPg7yj80sbSJsPeRrq725nvn9G
XbN+RvGhLuVFOfZHfrZMnW2+ZryXysynpZFXLzLemH5CzuFe8OFFkAfIKyMv
pc3QyDWtF5+17/DIq/aCI4gneE3xqMWLPM8KlB/j+ZZCPpk2K/Kuv0M+oJe5
2+F4jPP3c8xHeVbxPMb+pYxutQ7yOWW+cb9Vv9kNKH/IuckoH8vp2xl7815s
9UnVwSi/R/0kdfkprvc78uq+G9ofzz2so31Qv1/f51tl3u+mfge1fT0h8rv8
ZtP0sl6Iz4rTPjHI9Rx/90bwgQ/KXNt7GMm51s3Y47Vib33D8+3SyJja63P2
oourk+9K+QrGmIXyT675zr1+9LMdKT/D9c7qBN+YmnPbc+5wv6/6ecRf1ce3
a8Umds1cpQheqW75qXg+39vE4le0fRb5J+5xeb9H8SbKW9NnSuTfkHfoBh9w
PdmYMRbv5PtdFvl7MQDG3on66ZGn5SjFBIr038ZvbZBz1p0yFHvNOehcvJDn
+6Ube9R342/wFfd1VSe2n88/j3OmzLfnN7irWHIv35/TYMFe9hPXenVIdUn1
cX1Z2gTaBrb/o+7vt6x9q36gTaFtoV6vfq/P5C91M+QFkRf0HfHOHqvxggVa
wd9d775Vl2eM2d0jeqlTn9D21D50/T6mEXvJPdu92zH36eX7dT6MX88xdRJ1
E30GQ35vtP+jkd9Qe2ou1zh1Wc7tJtbrN0F5vVbwCfEKyxsx5leuIc4p5KmQ
r0e+gWOuVs6JR2pPb0V5a45T6/F/bGYOOhfd99z/1mllvbaNbRenzRGdrOfW
aUMcTXlV5tOP7re8r5f0n5TBol1DvqE8ZS+6jTbYiY5H+11p+6GYDOUV+lkP
LhXD1Q+HfHQ7PrrlKY/NsRFjLYk8Tj/ve7JGfCL6RkbmmEf/CMcolMfqB8ta
qm5/ZhH/k36ozwb5Tf1ttcHdD/R3+v0c3Mn3sWwRf5Nr2X+R96B+VsfXXqeu
1c/aPTzXOILfagx1+HYw6/d78bHqa21xvN2LDaf9NAfygL5LFvG3uZbuKV5R
Ze67Dn2MvL57ru+f9htQnlL/Szs+QH0IE3OsrR43FB+n/rNptA04//kgmL7Y
vm0mobwwxyGUD+XYqRt/ovjytb34Ixxf/8R61E9FeY0qtsvOjHFrGUxObG79
ut7fw3erj2Zcym+qX4n/NYJnji9+2o7PUfxjnyq/z8XUb8azL8U9XE3d/eqs
1F/Sia2ysZg+fXel/STtYNhTU56yyHrpuvnAIPqhvjgxZrHmW6jfi/L56kLu
/73g7epbYhfn9VLvPXlvvifflz6OtRnrUfofRf3ltHtV/6nrH/WzUT8T9aMx
xgGt6NAPUf6nF13I33BCypf10n8EMUTab8M9j13jmVOX6a9vUx/nBFz7+378
N7/S7zWut2MVLOoe8bIy88G54px5TeyiyFxzrd+b9iPQfy7qT+XcF5zblPoR
h6Lr7DOIjqquKoY1Ti92gPaAmNeolOfuB4uXA7BZN+uttpw+LH1Z63LullZs
JP2To3czl5scb/XiN9R/6BoiHtd0fxIfFjPtxD81Yf38V1B+qwg+L07/Bfc3
F/3XbMemeKyb+ay/fq16vk7GudPpezbHNNpfYqDOd643PeXHaXOk9oq4Rq3v
+fz6/PT9DfObDTWGObW0z+fnuB652wwH48gi/tAnuLcjtLf70W8+6QQf/prz
o7j2c3zvs/Ab/EX7hfRjU38C97AddXPSZymxQf1jtQ0td8P92d9LHW/GXvZZ
91v3DPVj7Vt9FRPV9p/4nNj6NUPB787UX0T7ExhvXbHiTvyjH3NsJH6BvKr6
h/hpJ/iOvvWRmsF75uQ+d25nDXQtnLkbfPRGn8Fricnq6+F9zis+XASvF7ef
k+eb0W9GLFn7hvJZtNmH9idyjY2r2m86FB1cXfziIv4J/RRzDPI9jynW1gz+
oF9Q/+BhrfgTxx7EF+Nc0l82kvgy498pJtMJRitWeyzyl938Bv4Wo3F814uP
TF/ZSO3M/485Cv0a3F9B+y24x0/oO5O63yCcALkBrtEf9jK/rmvEp/ot8tq0
/4t7+1z/Qpn1w7172XZ8dltVaasf9n3Ge1l9gva7NeKfX5P631vBSBalf7+f
/WI2jkKdi/bDU/5dfbCX8XyW8/2+a/tQ3dU2tt2gCp9BXsM7gzyPz3oebV6l
/fhcc/J29mz1AXUQdZFx27GBRuPcRO18g/qHN6viv9aP/a76b5H1bSZ9ech/
Up6WY79W1kPXMNeyOxh/Q3+bMt/3grT/cJBv2m/bNc41TPxwLMoXDUVHHZE+
47RzTjzxP1x/UsovcP/7lfEvOxe8ptfekd/jsVZsZN+PHA25Gs45ORFyGuQ2
+E3IAbq6zN6hT+LDIva0WP3TjH9KmfXIub1/fc/Xcu6hZjD1UymfxHEi8mX0
P57yorQ5vB0fkD75pWv/2lHIy1DepQx+IY6x8yDt9d8fRv1i/fAQ5CMcXsvu
se61+rhdM9xPXLu2qt+5Psc7O/Fn6YucHfnLdjhBV1I/hftQM/7XyXuxL8U7
1Hn0Z2zD/azRjE/7+iIcnhM68Q/K7bG/9vcmrked+BTv7cSe0tc4izY319ua
+ku53mzIX7TDmblc364ciGYwoJ0pzyqG1g4n6eJ+1oijO/GJuXZot2u/+025
XrsGfNcJB8y1QY7Tj+1wuuQ+yQmRG7J5O5yZ2frhT+2IPHs/Pt5b2vF56fvV
Z31bO5wffdnqR9cgX82xXj9+A/0H+jD0ZegfWbWWr+T6kzoH2umjPrW+9k4z
mK2+CvXVuVvhADxRRn+m2zAfvr58fXx7dOLv1fcnBntZvX66323MuRWbwQhn
L4PP6avRZzNfGY6OXB33DDlVE6qTUx5RvKSIzntpvb+pb4hzi3eLaYtt+352
aocjNlc/fkz9mTvV70s+mHjhR7T9mns9qcr67z4gH01Ox02ul41wPZ73/TeD
eYt9/9d7ruWF5HdwbNAMvv1JP/5R+SKL98NX2Z36LZpZ499Wn+vn2z+6/l70
Id7Cc0w/FN/iSd1wIc6jfu1+OFk/tMPBkqs1Fe/79Rr/1FaQPyI3UI7gfc4t
10HKb7fC77mTvq+2YtNp/72H/GUrHBrxIX3Y7n1ySsTA9EvqnxRTlI8gX8ix
3lIncv3qhlslZ1Lu5KAX37w+81HEL/vxB9/Qjb/jUeo/pO0HrfBpLuJ9XN8M
prppzbex7n2Oh3rBmydvhPMl9+vCMr5VfTTrlOFv/NsKR+JV9xie52vKl9Bm
oU7WANcCORliaufT56pmbMSzivDt5IPc1Avf49wyvm99YMuUwbflom2KfATl
Txj/h1Z8/trz2m3ab645rhdnl8HLxc3lj4mri68v0Qh/zPcjX06dX91fe8Hf
bznfK+3f6DWGEU58Jvko+sPkJsiJaFI+jfFPb4a/MmMZfppjf9KKTqaP+2H6
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
SFEm1642kfmv/w+GgFzr
            "]], Polygon3DBox[CompressedData["
1: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

            "]], 
           Polygon3DBox[{{2221, 2220, 3058, 1519, 1520, 3059}, {2223, 2222, 
            3045, 1420, 1421, 3046}}]},
          Annotation[#, "Charting`Private`Tag$3459608#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0jlPVHEYxeEXEJRNbUxcIcSAIRFDNTbyBQQpKCEWUqmFxIAB+QJgKwQb
KIgRC2KiEUSYQhiWQROjUXaGrSIuBQ0JhYXPhGTu/M4573L/985UtLY1PcqJ
iFHXSl5EVifwKnHvVMRZ/j6W42O8gd1Yh8+wAQewBUfwteshPYVP8RP2Yhpf
4DccwW0cxz84h/uFet2z8kTET37ZGYpyI87nRyzxF3AZL+IKXsJVvIxreNee
N2bX6dsFESm7FsxfUd+QDdKzsio9ZbJN2RxfTmfoefrfyYhr6lv8W/evt2dB
nja7LWvg0/wO/UHvqJ5d+o78s3xR3x4/hIt8gWf6wR/wR843S/+lf9Fj9G86
Q7+iv+JA9hzYgztFERX2d9FJektvn7N9VH8ge04fqp9zvZQ1y5b09NP19He6
h75Fd2ENtmEZdjrXTecb1nOGf4IJPmXnab7Ozhm6lJ7GEqxVT3rmDbVivsPM
mHdXI1/P/lay9/x13vp4R1fTa2puGxnvqN1MlWxVlrTXuqjkp2jlmERjMYE+
Me4rL7sXjUajpi85x//T/+RzXqU=
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{2145, 2417, 1312, 2144, 3109, 2311, 2146, 3110, 2312, 2147, 
        3111, 2313, 2148, 3043, 3112, 2609, 2314, 2418, 3072, 3244, 2631, 
        2610, 2315, 2758, 3269, 2759, 2760, 2420, 3000, 3190, 2419, 2373, 
        2421, 2627, 3200, 2316, 2990, 2798, 2799, 2762, 3108, 3270, 2317, 
        2761, 2763, 2764, 2537, 3233, 2318, 2536, 3050, 3113, 2538, 2319, 
        2149, 3051, 3114, 2539, 2320, 2150, 3053, 3115, 2540, 2321, 2765, 
        3271, 2766, 2767, 2541, 2322, 2423}], 
       Line3DBox[{2152, 3001, 3143, 2151, 1320, 2153, 3116, 2323, 2154, 3117, 
        2324, 2155, 3054, 3118, 2543, 2325, 2542, 3234, 832, 834, 830, 1087, 
        2069, 831, 2611, 3002, 3191, 2426, 1073, 2769, 3003, 3192, 2768, 775, 
        2544, 3258, 675, 2427, 947, 2545, 3291, 992, 2888, 1126, 3119, 2546, 
        2326, 2156, 3052, 3120, 2547, 2327, 2157, 3201, 2422, 2548, 2328, 
        2158, 3202, 2424, 2329, 2159}], Line3DBox[CompressedData["
1:eJwVzztOAmEUQOFrYYLCCvC9AERdhEJBwxJcgC8QMPGVKAQrwZLWBQjaCqG0
dgmGHiyM0RDjR3Fyzz3/PzOZjf3D4sFcRBRwnIh4TUbkUhFHvM/z/IRn5yNK
5rY9vRBR5jf8jH9hCe+LEUntDbv2b/S0Z3Qx1Pe0F57x7k20cI8PZz/OuryH
J9zat8yO+xPcuZNAXf+0Xzs7500MZvdn7zfbuNB+8agtm3ntAWPsaFNtBaf+
o26/5H9YRUVraFc8fGfNrGojreL5Kta1mvYPVLosIg==
        "]], 
       Line3DBox[{2170, 3007, 3146, 2169, 3008, 3147, 2171, 3009, 3148, 2172, 
        1336, 2173, 3207, 2432, 2550, 2433, 2174, 3208, 2434, 2552, 2435, 
        2175, 3100, 3193, 2376, 2740, 2377, 3312, 3107, 2176, 2863, 2438, 
        2865, 2439, 3281, 3090, 2177, 2802, 2988, 2378, 2997, 2379, 3313, 
        2987, 2178, 2866, 2441, 2555, 2442, 3292, 2179, 2963, 3210, 2443, 
        2557, 2444, 2180, 3211, 2445, 2559, 2446, 2181, 3212, 2447, 2561, 
        2448, 2182, 3101, 3194, 2380, 2936, 2381, 2183}], 
       Line3DBox[CompressedData["
1:eJwVzTlKQ2EUhuFjQNCYLMI92NuqoLnGKbULiHWwiwpOGY0SEdyBdlZ2GQpb
hx0ItgEH0MrnL17O+53v3P/O7+6Vq1MRkeFkJmIwF7FaiDjmQ77GT/mIl/gZ
H/OMn/PF6YiG2ZAvZyOu0JSbcp8/5COuzSe5ZV9Lb8ov9iXz03zWFdDWL8lf
yHQL5rp5p/vmy7hBHYfo6HLpRj/x7hE/SJnfmj9454/6rtsy6vJv+ta//tK9
/KHf0F1gE11d0W4fW/Kru+3U29/brcg7cg8VvMk93T8bOTCZ
        "]], 
       Line3DBox[CompressedData["
1:eJwVzksyQ1EUheGtiBJMwhgkBhF5cPOQdgbAGMxB3jeRMAAMQcejrYoJaGjo
aFEVqnyn8df6993rnHP3emfZ6VpEdDHYinjYich2I/r8kTf5kD/xFh/xZ97m
Y/7FO3xejJiY3wsR69vOmKfmT7sLnQH62LA7lFVU8GKf6+3zIUoo6NRlAzXc
68x0ynyEA2zqnKTv8sicy7nOtzw3/8iJf+jqVPllejelTi3djw+7qc4vX2Fh
10j34cauLDMcY2l361uT/6GF3Nll6nhvIa907nTavIOZ/Zt8xbXdP9JPM28=

        "]], Line3DBox[CompressedData["
1:eJwNzL1KAmAUxvGjYVQKXYAQ2Id9WFOaVmtjk4si1FBLU+1dQUHk3AWYqUhL
lFaTY1cgQWNuTd2Av+HP+T/POe+bO7uqXiYioor2XMRuJiI3H9HiRb7MO7zE
V3iP7/FV3uf/6Yiy3JLX8Kyb6Cq6tpzHI5bkX1zbjRcijlPemTe4xy2e3L2Z
NTc/btflVzkpz2DAs/oRNuwq8glOcYCuflO/z8/RxFCXQEd/JNf9s8UP+R0e
5D/7WaTldzR0BTdDvqj/wjfPYFvfRVL3ggtdT/40d8wPcwp+6ih4
        "]], 
       Line3DBox[CompressedData["
1:eJwV0FsuQ2EUxfHdpHXaEi9GYBIu02jdWnVrXN7aSQgJEWaAKkFEqOuDEbi8
8SCeTcAA8Pse/llrr7XP+c53hpvtSisXEfN4LEac9UecYwpf5YhuKWKN7mAV
NwMRD/aWU4cVHNn5pJlnPvSDuLdTME+iD2V9QX6McfO2+c7OEm1iBD3dIl3A
rW42vRsNzOk6zqnzec/X0rfY2aIdPOnzKPE5/RgCPTtD8ndMmP/0RWxi1LxB
r9O99dN8VTZDD531S9fNe1nElZ2a7AC7dr/ll7J9c5b+hexHdiFr8G/pP6Y7
8K/8KV/nX/huehf/zJ/w/4BlM8c=
        "]], Line3DBox[CompressedData["
1:eJwVzs8ywlEchvFvY8z8SqJLcAPIf0lWLC2MDaYW7SLcSmt7qyLGWISugNEN
ENl0A+x9Wjzzvu9zzpk5c7XLg4tUROzjKYl4n4qoZiO6+qacT0c860V9QX/R
t/RFvaeP3C/ZpUxEgWtjwn5EndvGEvchX7lPOcAttyv73rf4G/sYd9jjDycj
Ovqp3sQZ7u2Mu02ceLc8/gOf6EWkMW33nF/Lir3iTllv4Mo+H//JeU6uOnvA
L1/mZrg1+8j+ww43y61z3/LNHsof5LHBf8l/3yEozQ==
        "]], 
       Line3DBox[CompressedData["
1:eJwVz88ygmEYhvHHCpV/CW0dBiklB2DaymRiXSdgizVjl7UDMDRkJoX2tLC0
sXICWPb7Ftc8130/7/t9864327XWVETs4Xkm4j0d0chE9PkHP+QDXjY3ZiOG
vMI3+Qv/d2ZHXk5FFHRZMyd/oivP2aeQxoN8pc/wfb7t7Jif6B7lb7lu9s15
/RIW8GN/avbszsxFZHEg55Kz0/4v3/CnpOPnuOUrui/3G8lbUEcHv6jqV+2P
+DGauMYfdu3W7LZ849U7L+Q7ntcVzTfdpe6elzCSJw24KJQ=
        "]], 
       Line3DBox[CompressedData["
1:eJwVz78uQwEUgPHTiUsHSyUIKfEWRP1fm3iAioqmEy9Qu10qMSibHUkXtFW0
/nSis4GYvIDNz/DlfOe7597kThf3NnZTEZFHZzDibThiKx3xyN95kXd5n2/z
J75m5pKIZ37I63xsKGLR/DJHtB4K9gl7Ey000NY39Ts+55vzqOEEn55N6pf8
Che4d7tgnusZ89hNggd91H6Aa97FuF5FSSvgFDf6lHd/BiLK//+GM/xi3W3W
syU3O/YP+y2f0ZbNF/93pDX4rLZivmrfWsX9Pla1nvYHUIku3A==
        "]], 
       Line3DBox[{2255, 3030, 3172, 2254, 3031, 3173, 2256, 3032, 3174, 2257, 
        3033, 3175, 2258, 3223, 2496, 2586, 2497, 2259, 3224, 2498, 2588, 
        2499, 2260, 3103, 3197, 2400, 2755, 2401, 2130, 2261, 2877, 2502, 
        2879, 2503, 3287, 3093, 2262, 2839, 2989, 2402, 2939, 2403, 3296, 
        2919, 2263, 2880, 2505, 2591, 2506, 3297, 2921, 2264, 2977, 1572, 
        2593, 2507, 2265, 3226, 2508, 2595, 2509, 2266, 3227, 2510, 2597, 
        2511, 2267, 3104, 3198, 2404, 2942, 2405, 2268}], 
       Line3DBox[CompressedData["
1:eJwVzzsyg2EYxfFHQ4g6E2YUFDQWYQuxBAUS8UWygfRUJOmiN1lAdCppDYlh
XIK4RGyBxu8rzpz/Oed9v8vyVmUzmYqIAr1kIh6zEbvzEUP8hIv4FT/jEn7D
Q7yHR/gPl/HtbMS73MZ3+J4+5FP5AV/OeTa/kj/1dfe25S/9Ds/LtRnZlugW
0u/Qb+Ai77q3qKvIZ3RMTbq2rfJ9+6+9hU+oijt8iU/own7jbIkO9GPvafD1
6Yg13tcfOrdC37ac83U6Sv/V1nOmzCe2c301fac8oITG8o/tH/exNnE=
        "]], 
       Line3DBox[CompressedData["
1:eJwVzjlOglEUhuFDozjUNhoVKhw2ge7AztbS4QdxHjbgNhxj3IALYAE2JhgF
LBUVHHAoNPH5izf3Pef7bu7NLZTmkkxEzOMpG9EYiEgGI1q8yUv8md/zMn/h
f3yVN/si2uZf86m50B9xbdexy5vbOJIdYkJWk73KOvbH6R2cYFK25FzGImry
N70iP8MMpnSS9D9YQVXnXWeYz2IE0zpDvf7Jz/mHfJQfYAy33q+4tya7QAVd
nXXnBlqyO52c7jg+ZYX077iR1WVbepv4kl31RGzzInaxg2/7S909vo+GO4/O
B/zI/gHv6jqa
        "]], Line3DBox[CompressedData["
1:eJwVzjkyg3EYx/EnlsTWqEiZsc3Yz2DCAXIAhQOIkaS09SgtDToKS0fpCJRG
JbFkCAewxuctvvP8tv87b26hWFhMRcQ80p0R610Rle6IDfeZX3P3cZeOaOd3
6QvsYRrjtnO474noR5vNKF/GGKZssvKTBH4WrTYr8lXM4Fb34b6jRddI/iET
UXeX+BR26HNc22YwSY/4Vh7DCJte+Q1K/Jv+STZEb2MQzY6II/2pbpk/cx9t
BugtNHR9+LO75K9Q02+6h/IcfnVFWRUH/KvuR/bAT/jecfJe9i2r0DX6iy7T
VfqTbrol/sWbOv4Bi5U4oQ==
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1203, 1313, 3109, 1204, 1320, 1220, 3145, 1326, 1227, 3147, 
        1334, 1235, 3150, 1340, 1244, 3155, 1347, 1251, 3162, 1353, 3124, 
        1257, 1360, 3129, 1265, 3168, 1366, 1271, 3170, 1372, 1278, 3173, 
        1378, 1284, 3177, 1384, 1293, 3183, 1390, 1299, 3188, 1395, 1305}], 
       Line3DBox[{1205, 1314, 3110, 1206, 1321, 3116, 1221, 1327, 1228, 3148, 
        1335, 1236, 3151, 1341, 1245, 3156, 1348, 1252, 3163, 1354, 3125, 
        1258, 1361, 3130, 1266, 1367, 3136, 1272, 3171, 1373, 1279, 3174, 
        1379, 1285, 3178, 1385, 1294, 3184, 1391, 1300, 3189, 1396, 1306}], 
       Line3DBox[{1207, 1315, 3111, 1208, 1322, 3117, 1222, 1328, 3121, 1229, 
        1336, 1237, 3152, 1342, 1246, 3157, 1349, 1253, 3164, 1355, 3126, 
        1259, 1362, 3131, 1267, 1368, 3137, 1273, 1374, 3141, 1280, 3175, 
        1380, 1286, 3179, 1386, 1295, 3185, 1597, 1598, 1654, 3239, 1599, 
        1600, 1307}], 
       Line3DBox[{1209, 1399, 1400, 3112, 1656, 1476, 1477, 3118, 1622, 1478, 
        3203, 1479, 1626, 1490, 3207, 1491, 1238, 1343, 1247, 3158, 1517, 
        1518, 1633, 3236, 1519, 1520, 3127, 1526, 1425, 1426, 3132, 1669, 
        1551, 1552, 3138, 1642, 1553, 3219, 1554, 1646, 1566, 3223, 1567, 
        1287, 3180, 1583, 1584, 1653, 3238, 1585, 1586, 1601, 3230, 1447, 
        1448, 1308}], Line3DBox[CompressedData["
1:eJwVzqtPglEYB+DXTZFgNjo/vPwDFjNeC7KxmZjKaMgG2aCQnEFnsBDc5FKd
zULRaLF5SRpQgwY2m5HH8Ox3zu893zlfUq4XamMRUaA/HtFORXS4mYjoyS7X
UxEH8o13tjmaNNMfyul0REM2yfGgz8stis4+uetE9yxfvTGQZ/YfsmT+Kb/4
5Vx/+j9n2fpPXhDO3XPHrf5YfvNDhRddx3ttZvxPV/ao8GhWlfvUnZ2lpUtk
2t1L8tJ+xXdrrLLJULcuN0iYI0PW+SuzBetF5tljlx1Gm6guHw==
        "]], 
       Line3DBox[CompressedData["
1:eJwV0LkvhHEQh/Ehu2yyL40oWEe2chQo1qJyNawjbCsRQcmq3bVGSHSuWkVP
IRGJxJ+gpiHREK3PFk+eme/M/PLmza9ulSs1EbGM+1TEWH3EOEYxieckYoLv
0hE/dREP6l9+0e+pmzMRu7wjW+BFdODR3YGdTnXKThrbsrL+UJ7nDz6WFcyK
GMQIhvAlH+YW5NCKNpy4O8Wf20SfxbvdJdmZbIXX8Spb41rfleU3JGjSX1d3
zdvdXqmPZBu8iT48mZ17q1/dYKcR+7KK/kI+wAU3l7JpsxmUMI9ZfMvnuAs9
6EYvPuW31X+JKfc33irxP7F5Km8=
        "]], Line3DBox[CompressedData["
1:eJwVza1Lg3EUhuEj6PxgXXDJMsEPMAsuqcni0tLCBJMoyGDB6gR924KCfTKT
4IpTB/4FmtUwYX4UF0TTLF4LN/dznnPe9zdd2s3vDEXEBu6HI25GIm4xm47I
pyLu5DYWzQXzg1yVH7lofubE/MKvOBq150/d5FjEoXzhbh+XA/THulN3CZ9w
SV/Xd/lHd8C//MY9/SZfu+vrUvIf5/Rb8jje7SZ4RbfszW05x1P8YdfRZ+Q9
ZHFmnuEyvjCPBAuD97CEpu+e3NW9Nedf53ylq9g19C15Va5hDd9Yxz+j8jCK

        "]], Line3DBox[CompressedData["
1:eJwVz79KgnEUBuATaAV5CTY0BKU2NrTU0tiUi4klSOBkDo0N4tLS19AS/bkG
w6AaGiqnwikNl6hLUXwcHt5zXs73g2+l1tw/mYuIPXqpiLd0xDv5TERxPuLD
3Db35IH9W57bB7Jq/5OJ/V+WFtxQ5ky3KhMuuKTrvqt/lC1udTfcMdJX5CE5
qhzR1x+7HXt/ZJ/IHV1dt8SVOSMbZLm2L8tT1ri3r8tN33Z4oKXb0n3xSTL7
Lwbs8sOQV7e/bp/kM9tsLEYUeDFPAU0dLEs=
        "]], Line3DBox[CompressedData["
1:eJwVzrsug3EYB+BXogeCKG7ADZi6MWOxSN2AQU3tTiKpC1BhMbkAEgklmpQO
DFI6Opsk2oWpia0Jzzc8+f3f05dverW8XBqIiBVuBiM2UxHzmYhF7kYiFmQh
baa/rb6VLXvpbMSXOiOzDDHMhl7BTcXeJ0duT/SO5be6arbDj/eZ3qlZSl3z
/tW7kB3O6dKgZudK9s2b8jqZ6/2pD1hzv05br5i8zUfZU48ld/533L911Tk5
wSRTbOnl3Rz6zozdFpd693KWNg/M8Ujd7Enu8sIzPV55Y58P3lniH4NrNMY=

        "]], 
       Line3DBox[{1304, 1394, 1607, 3187, 1298, 1389, 3182, 1292, 1383, 3176, 
        1283, 1377, 3172, 1277, 1371, 3169, 1270, 1365, 3167, 1264, 1359, 
        3166, 1256, 3123, 1352, 3161, 1250, 1346, 3154, 1243, 1339, 3149, 
        1234, 1333, 3146, 1226, 1325, 3144, 1219, 1319, 3143, 1202, 1312, 
        1453, 1614}], Line3DBox[CompressedData["
1:eJwVz78rxHEcx/H3129loBgoRdksbjCY3KSUOk4GpXBlUnwXLAaTwX9wgzIw
YLCx2LnlKIYbDKLcYjD4LfK44dnr/Xm+3p/vj/7Can4liYgF9DZGrGG3KWIc
Pc0Re20R3bKLT/FjPsIHKrp32c4v482coswPu9/KLaG+JWLHOS+nkHDzqDNn
8Wh/VKZ2Otyv1p6J74aIWXub+k5d0fzKTctjrsglKNhdxLNuQrfFneHQzql8
4sf4WzvbuMaN7kre67K6snkGJb7qXOFH5B/Xhxd+0jfmUNZldL98xvlBNyTn
vOsLl/ynvLA3aG9DX6r9B865AbnOncgDe/u4wz9XLjcI
        "]], 
       Line3DBox[CompressedData["
1:eJwV0D0oxHEcx/GvpzuJATES5alMBk+bSciCqLNIMsl1SGeTh8GKhVkeRnaD
3GDTXSKDwYTBqDwsXje8+34/78/v+6+7lvn0xHJJRCygqSJiHQPJiH6sYRX3
1RGNfAZ9ci9+kOO/zVp+CfXFLhGxYmZQxS0ibX/y9sI8Ryk3hzr7Ed/q5sx+
ir/yiJSupDLiQ3fCNdsbvMmhRr41v7yb8u7YXoYkn8An/+JuXNcld+IA+3jg
3/TDug65HQXc8HnzVTek+/O9d7PAz/DTeNYNcpP2PL9r7hT/G76H/3Wzxz/a
t/kt3Om65Sw/Io9hFNf8JtemS/lth26v7Bu6WTlrXsr/GEY0oA==
        "]], 
       Line3DBox[CompressedData["
1:eJwVzrsrxWEcx/HvcT1FzoIFyWXDwBn8AdhMrotJMTIblCNlpVjkOJMMMkgZ
xFGKwaSUQYjNpYSBktvL8O7z+37ez/d5fg2jk30TiYgYR31xRK4kYg2L6MIL
Dssj6kojalGDbXTqq+UnqlCJTew6m3PPMV8m07oOtOOWy+pSyYhH8xMecI9l
7kpW27uWN0ihAutYsZeVSVxgwfk2uYpWtPzf4cyYfC6KOOLDO7/mjDvfuDu5
ry/UFSCBpf9/4Ib1P/y5+Vt+Yd73ln6W3zBfurdZ14RGvHIz3Ih3hnDGp81z
+gP+1HdeHuLD/p7+XWbM01yvzNs50Q/YH0Q/uvVTfI/ckX8Cdjp4
        "]], 
       Line3DBox[CompressedData["
1:eJwVz78rxHEcx/G3uvMr+1mlDGaT+BeIxRkM7E4pi0yWm9j8KBaU4TIqFhEi
YTBdfnTOj0Hh/BwNHp/h2fPV6/Xu+6NtbGKwUBcRo9jORmzWR0w3QO6XO3it
JWI/E7EjH9gOcas74lOc4Nx2zF28YbtyX5bv5LO04wKXuPfcAX3FXpUXsIiw
bXHeVrTNyEtp1y9zhnd5xP7I825muY9Lug/vfEl3KKLJ/Z6+mW9wjay+nL4B
FVuVn/GEnO2B3/COL3yiPfVua/I3fvCLV/24vpNrWMEqWtN/8qRt3bfNyUON
EcPII6ebclPibu5BL/7wD+IyQAI=
        "]], Line3DBox[CompressedData["
1:eJwVzi8shHEcx/GvwAm609gIZnPbKeYI2BQFRVJsFBtTSJQTzgUkgsIINkew
+XNus52NYP7Fk2wKuyJIEq8Ln70/v8/7+T3P0za9MDFfFxGzMtoQsZyIuJRC
fUQGj/G1KWJJ3+Rf5NC2gQfY2hhR5Z+de+VevmWfK7izhzd8s95l76h5vR2H
3F3EQRzxTIv+wSWx3zaHGRzmGvUKl8A+2wzeygC34xs5fRt3PVPWf/Uid61/
ypZzFjfxzF7UV+VU1m0rmMOkd3/xJ85V5yPMe+da7RuYxRL/Z3/X3+TBnrdV
9B73p7g0pm1Ptjv+EVO2Sa4bU7V/sJW5Kxy3d9ou9DH9HH+wxP8Ds1A7rw==

        "]]}, {}, {}}},
    VertexNormals->CompressedData["
1:eJwkmnc41v/3xyvR1FBSZM9Ce0g4iSJZmWmQUJGiIhpkRfbI3jtJ9l7HyN57
73G7d6lo4Xd/ft/7n3Ndrvt6X/f7vF7n+Xw+zoX/rpWW2YZ169Z9275uHROj
xufp8aUgHRVdnyoQNl6vHMxIGFBkqoJWwd9yV3vpuJC7cVnZMgIXxy8X/E4o
gR2+Ph3lrXS8GhGzT9IsHzd9Tj6WvjUfCthXn8i9oOMc55FrlwbqsPTQcxNN
g0xQYJFye/GKhtq5NrP8yj24eLarWnwxBUJrBFp3qVHQt/L4wYaOMRQevm0z
1hEDqwNKrsMeC1gtPJp2yWsWR4KE1nEvBEGlMB85uYmGExY5bKO8XShrG/Rh
X0c6dIufevDEgIIaruc5NgeMoZdE7ohnTAqMWLCEZt5dQF7t4zXs2bNouGOo
6mVGIpy8tN3ZTWUa512bE2wlSBBqtTemsywbNJsqH2nwTmPh1u7pGQ0SiPMz
O+6azICuSA/jmvppVCv3Er80TAS1s3fOlvFkQPVLYW9K7BwyHXCrzXpNABb1
V9+4C3IgWudhiGQkHdXONOGoXY1cL0+70A2eLxASkqV+tJqOjlv3bIFkqPxf
RVBy8g3UHaRj5JPxGJ/MEHx4sktAMqgYPN+cvzQ5TMcL049u8M5m4bWLe8p4
zXIhV/Ov3pM8Oq7QuPaMHqnCmzutWQNPpkOGpYzklbOMc2SXfdjX3YJN7rt0
zt9JgJoxz0pRdhpy2LdOnm/sQzaWr+8uFAdDjZTnBeo2Guo/I00Vt/ehuGUc
XUYrDTY80yMNHibjHZmUa+lTk6gg67L95+E4kAu4qz63MIeBXnTdWU0C/nrF
VsqvFQRpyaunXVoXsFmQTda/fAYcw2/s25tWDef1LffWbiZiOe+XSYGYGQho
ltocalwOCRY8p463EZHN2GzrWv402HXOV+vvKwIxjtv3OPXJ6L94LVbPZhKa
Vn993H8qDy7qTj1s6aPiyhcZf8G6fniUuvZ79lU2mLXWb7D5Tke+eecNP8Lj
5XbLxy95a2eAnrJwzPsaOq7738dpsuOK0nUVBJV/c7ExI3RMHQmq4dvggrUB
D99NrBYB8zjruxAyHbvXb5S+Xu6LMiJs0f8ycqCON4rL/icdB5IdE5VYAtBl
6JKjTlYa5Dp48H7+S0eCoMf6axouWHT3s+W+v3HwcJ0k/9cVOgaXv+LzUfSG
c7cU/EocguDQ9NaSl8J0fCj4uC/5byuKN54PS6UnQtRl+6Oz+jRM0zhn5abc
i2M8e8Sr/wRDugw38y1bxrmMaXrrZDeCYwYXVcy1HZh2BAb+YNz/laM1CVkd
jeD2aDjd0a0R/q5rqTqyh453305dc85rgN+np00eKdcCR/np6aPX6Sg8MFoU
zVkH8ltNlufDK0BaIp72PorRt6omnpaPVVDLTx9mYy2E3qNfNxAH6Li/Jimk
uiIPJte4EicSskDob90J/EXHcb4w1nUL9nKvasSId7xS4P1t0beBtXS8oaPw
OnXL0cr/VYRM+6JiH0afE0Q1j7vxP4XRoJ8Ytb8YDOT8bp0g0HGDLdPXlth4
sJwOf526Lxd+sW3wIDN0Zpn8SuNMfSHsaT90eue/j3B54vKSti0dk3Lo9U5b
GuDxIw61poAEWLX6vcX1Hg0lz9jqqtJ7gJUjwm+6MwT+3PbZ8Ww9BRfnjjEr
/hiHv8sEqt2xd9C338R+zYmOO1jSt4er1IPlB5NTo+YhsK03xmMPOxX5i05W
psX0Izdv9tyKcSuYHB8PYFOiYvV2LR6VEwO4vmtyw0RZPRzm3hQV5EdFc650
+a29/ajmrx3vRa+G7hWx9KEVKnpeqdW1OtmH/C7d06tjZXBMnrwzOYGGO5ZD
4hXLu7AYnHW9rxTAw9txOY6P6eh2aYPlro/1mKzxJKi+PwuukSd0Kpfp+Kl9
OwbJ+leOxrfkXvqbCjpJ2UurjD6nK/bqR1Dl5P5XK0F9h9Hz60N09H9Xt/xG
0IMxV0UThZ+KwaY8Z2ndOB0XaxJFW0TT4afBIQ4e5TzoNh/8HJ5Dx4KCdY7f
dleBcrkQ8cXNz7A9eWTIaxsdR26tnw4MaIeAeILWNr8U6Jk4mj/jSMV3Qx1D
XjgINaINmZzCsaBu8HKLcgEJNR7xqFvHTMGOg35ii5T3kEwas4hqmsebvhud
bJ7Pw3FWJgffE55gNpy24580Eb9Xpr27nTEDz7ffvezD+H4J2+inay3z+PdM
eseC0DxWnNJR4lirgEOPCcQzOI+PhrzatdXnsY3WdlB0UzGMX7v7w0uegHk8
yRVXB+aQWdT1YV1bHpS/D7iL+Qv49kVVIk1qFkWpvN2/lHIA370sN5om45J0
6p967glMnRR+daUtGw6PJ/g0kujI6nTl+r+jnyovd+TxJZvnQuCD5x3NjD7P
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
WwGgxTR9M7GyDd3fpkXY9FNAKfRqQNHrGNib52v0RpUK9h48+nqsDbCX+0jB
jHcKvFhkbFBBKrbxc3VvZdMq/d/PMrDz9dBZ5J3HSYfzxaJ3+vGHY+DXSoyF
g3daNtwh+ktU6hlLpyPTuOmMsqUSbxSMKNINqVCJfdQgeIfClgY7L2j1jD3z
ASk+A+fYhCnU5pL23egyAfxl5iXbv32AMqWnDqFPJnD4sPHYV5xCyxbW/t8F
vqDW4aA7Q+im/7OkI/8IH3thVt843akFmDMZOpfmKCgYqWpX+zQO9x6tydUR
awMFaU3XV4Q+nmucTNvLVAt1Pm0nee0/gdBsOyub+xQWn20Ib4idgNTpy6/6
+D9CoYXmtqBNM8jMbsexXDGOLvqGtfvcsoFO2We0nWsSX1T/ffx57xRWBU3v
l+cOgpnXcWGnCL1W5aK6in79iuXPgqTOdntB8d6g3PErZJTiqnqrtn8MlErp
+0tvf4B9d4ylZBaoaOR1yHByRwjyupud3iCaCFtUkzgKG6h4bGG/Wm5NAQ4K
CKY8kk0CiWk2+VYNKibN8V0PMarHQhnbIYODqRAn9PK7hSbBexcPesdQJ6GA
JTxHU9oV7MoOVZTTkZHKmXarJ2IMAw4UfF+n6gcHPgwMMg/MIP21w0bP+8Yg
xV8mT+2BK3xd3XzafcMkRmfJizdVT2Kkn0+zhGgFTDx12ZjVT8Xb7+c12Mcy
8JrLYLJyUDp4zOqcXiL6mJqK2HG8XYX+LprM/NQMsMklyc+aU/C+ILdZJWsH
diz12HzLyoKOetFbPERf6JL/4+z9dhJKDJNnh6bdwWfDSxkjxymcPqv+RSFg
AuYY/aNYbdJBe5qT3i2b0H1vqQtVfV8ws561YxSjwP9fNWExqagV437oRpM/
4WNbqrOeuAObKDvVepWCYXsGRpiG83Bn0ozX33fNUBAyJvB5zzy6x/keL+3u
xvs3tR8ljTdAqD7niQaHMbxZRtp0hYsMpK+HIhdG3OGUzqnG1cfj+KL3rRTn
lRmkO8HH9IAxHdY5D2ZYeo/jQojp1+snZjDmtWKaGHcqXH/f4yC/OIS/HJOv
HV2bBekd3Ko89P6gZil7vqhrEhPWNxa8Fp3EhzKPWse/FEIW/xC/5jwVNxUx
x/2TS4FcEd9XgZaRcM+4SESX4NhNajfYjelK8L5iAhNLWgQ0HHGrOpBKQcvM
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
/pNGDbmBgKS/HUv6296kv11CuFFxhBvFTbhRo+vSBLfGjWFtr6Nd3uUesP/U
zLFxuAIyCTdqjHCjTAg3anXX9zK2FSNY/GmDwU/2QRwtMojarRkAZ75Uf/wq
NoAxQ9zvlBtHsMpByVbxnCfwkj52G+ljl5I+9p6Vt+zv727AUankfR+f0LDp
006WRYWv4Hd9dLvXHTrGpu4ymSh9jy/i+PcJrggCJpu0FWU6NFwu0NZn09+A
4g12XY1Nr4B3l2zWMaNBdE9pKVhhOwyaD67v7aLivy3pS7eSvvQ30q+uY1Zn
2GVPxyWzpx3tSkpwZYDkKT7DQNAjPCk7wpP6fe8PT+rxldGkN6ntqK77SfbR
kknM9Q7bG/0uFpbXfm3aqlWIV84Vfp4JoqMrd+Y1GfUYuHo1dauWOx19t6os
V/EtBqUYjtMrOYPAhfR7q0i/F0i/dz/hSaUQnlQI4Unx+cuyjt6lUfXZ0GDz
zTpUENgu5Z1UCBvj9lg8/kzl/ymCp85c9cM9x0b0BORjIMg1/FOczQheXK/o
+UN1AMYvijxYa54BzFOaqxUUmnHR3crn93on4ahM+fQ5+TQ4uOPX07TUYcxe
/uWyvsUgJt413PeG3R9Czaue79rZifOS7YaQNQELTgeYbt7oBrJtWdl2i3pQ
Ub7n7raUcTCXS92UVeEGdhf3Sr2hnlvtom9RnIofYPn4qHpnazBYTh9tLUyh
4ZChWefTsTpcvv/Aymu/g2ETqR+PkfoxkdSPA4ePvpoLG8IvL489nvcfwgyh
upBb91zgW+vd98zH6Xje80D375tluNjkiNhxTIfRVxr8Rq5UvdAixCseXwRL
E4XnV32Khzmyv+8h+/sg2d8VCddpEeE6KRGukyTRzYkuSXRzwm8aJvymMcJv
siD6INF7iX6DcJ0mCNfpMeE6/Zf39JToucJ84+HlNJy4nbS2k7cOpe+9jFxf
EwMLvf70w21JP9ye9MNXWImz2bfS0eVch9OTXREgsPnyrU1P0mEbOXfLIOdu
veTcTY/0c/xJP4ed9HO8Nosu5Eyn4wON0YffxLNBtmvi45Gt6fA9a8fj7vBx
XF818PX+p48YIdOUHPSQ2qfGluvufjCKI7avZI7K9mPAnkbjRf1J8PzuOmmx
D3148JJ6i23fKOwruHXhqf1LeEA+9xX53M3kc4dI/LEg8Wc3iT8h2JHpntSD
qt5s+n4K45C0OcIocn0IzBN+kwvhN30j/KYporsRPYfo9KCE/YFWjSjlxXv0
MbXPw+HLvwp7UuB4syEDt8wAXKnc3L2BbQSzlpxYkvXgPYwfjfVzNB+BsJoF
qi2SAyDpKtrFcygfniXkWaqH0YHv8Zi2ztUM3BPgW7DLjMpTyPyJIJm/vU/m
T5DEyV4SJ61InOQLK3rF7zSK7bPLwwqhH08VFF+eSgmAFLIOpWQdVpB1MCd9
IWvSFzpE+kIPXn5rZWxNRYO6h/CmmA4P2l6YnQxKB4kodZ3k9nr0A0WNNwY0
CE16twgWZcJE2ccEw9fU+8y85LaW7jBsvloUrnEpA74p7ZubEuzF2aNdrzs6
xyAwxuHoArMMeEl4T+cJ78mL8J7+cqBUiR5A9B3keyaT7ylMvqc8yVuWmv3J
W3hJ3rJ6tdTCWGq/ePQp08WSi9ovenKOiRk8gRP2t51fydDRP6/D3TilBCeZ
hELKoQA2k/O4YnIeJ03O43RJPZVM6il9Uk/1J/7hMbkTHlMI4TFtJZymJ0RP
Jjr/F5m6S8NDeGWvdqewyBDuCy5a1eycAcXNrHvX1PThnkqHGuWMUTR8qP1s
5mMGXOU202U2LkEjmXUBl3ToGJ9cJxBfkAFPTjTrbChqwaoPpdyDTpNo9ZnG
NPAhE+5nTRxJzR9Csy1hPSushsC4bfOiC6oe8Jl8f1fy/W3J93ci8f8eif/V
JP6zmf3hN20i/KZlkn/4Tcz/4TpNEK5T2oU//KbvhN8kSPhNNYTrNEd0N6Jf
+rWP1bqyAVJeXhZhVabh9N3FfXs8UuAs60qV7nNjMJxsw+XX0ovNm+fF657l
gDSb7kTE80lgGRIKVDJrgfnTSqKsTblQ6LpUe5EaDc6GxPMYMNXjzk4PcdGW
AkgvNvNcq1MLLl3e/lZNNMg7/U7njHMKZIhNBXJjBV4el1q0ehcdaoy3HtCv
ToEFchYu+3/2o8ecU+xE1whkeqUvmklLgWPGZp3nJboxXkQrfj3XBDC66H3y
jU2BZBI/9+v9iZ9sJH7+5TStJpymq4TTFEr0H+//6CpEZ5OrqmOfGKT2KXmB
Ea5hLDBMdNe2y4RfTXJpqpF0FEk+vyn2bh4Y7Pdoh99p8IX0mfVJnzmW9JmR
Ve7g1KER9PFtE3VtGcBjN2kCW4IDgJX93uefYv1o6n5g72ufUVw1YWJ7+kcw
XL2+5GLIo140vCTyMi5zDJ48jMs6wJYIZpu+XhuWpEFvgN/C6c4GXOGQIvzI
KgfqvdLZrEWTwWCdzOCpD3Ro+rxVrpSq71gIz6iN8IxsCM/o5UKJMIFyOv5S
P2r4c1kyKswmPxe7mwHvCbeI+fwfbpEZ4RaVE32Q8IxMiJ5fwTkLlh/xC2tM
pnLRODK/StlhHpMMzdUJH3MGetB3QU5s5oZxXCNtk1mdnwi3v07eDbpdj7w2
evz+ATSs/tzRwXE5EmqYbT8xaU7gxbyl2S4jnSh6VdbgyqpMCCFcIXvCFcon
XKER0jfwPPenb3CD9A3aPC0fph7sxbsia5udh8bgrc+SqBcnYqD7Uq92pe8A
0NIOXjS6NQK/Vx4ae8CRCJ/oR5xfUPW7qkY+0z/1u5Liz3PNVP2OCx7mWtdP
otdJy4WSy1qwoG346vadEVB5n4Pv3ewkrubfskRCsRl1nhxUfWIVDlyE43OD
cHwcCMdHiOgiRPcgehCZm31F5maHyNzs37qV59KfupWf1K0Oqs30Zm8a2i+Y
3hSqX4xhoK8MVjXAftRNKP7VIDpUOosbBg/DUIejqHqHMxwhfJ8FAn/4PusJ
30eF6NOE+6NI9Axy7nOEnPvEkXOfpeT8a5ycf60n5181xlF0hvM9ODUlINTw
ZBzivVU/9Xe4gAHh+/Te/sP36SB8H22iO975o7cQXZ1wfy4Q7g8T4f4EfSru
zWeewCKXCWWzim6k+0heULANhlpJpisrVlch97PEt7F8dLx4/azh1I0UMPC/
ddxWZhh3JLMnnfrHbztbaWv+dm9IFJ/cYxE9hK7X960q8RzCdzgTaD30EibJ
PEkkmSe5R+ZJAp5tOLyeqs8bR6/bzt0dgtsPVfU28ORCtNnp+31vRzDwacg6
v6l+qL1e1fLKIx96vUUc992exE72zQmmHG0IUqbZ2gyhMBK2/87Nb5PIJ3gZ
tyk148XVek0vw4PB5tH92zQfKl6LHROY2ZmByZU+U2+88kGD8IDyCA+ohPCA
dInORfQqojOSOUklMif5gMxJ/q2LCxj+ty5m2BP0JcB6HGksXZeZ87rwdeKD
PPULlcB0yzi3qH4I9b8kpP7TjyqEXZtmjdxBgHCClhNOkBrhBO0l+lzYHz2M
6O2kz/mN9DnlSJ8znfSHnUh/+PflP/1h8ScqDYKP+rEngq2G/+YoDLEMurB4
u8EVMtfXSub6eMhc30KDP3m7OMnbf5C8PZ5wheJ2/eEKlRCukAvRZQlvKJzo
uYQ3JEF4Q8KENxRmjm03/rnfFLJ2Zt9cBobE1rxbsSMEsJ1RpNFwEpfUx7U9
XtcGjWMpMi5+bhBA+D52hO8TS/g+Kozno2WPjOGUyMWnwof6wMd111w/VSde
1/QzsV8zhq+vPDog39WLlqEJLXMbi0GY8H1ECd9HiPB9uIi+j+jriS69e89O
ncoBbPjlHrbv4Agu8xRMUWh/C2tuD2y7dZaO1ewhEkJLKmAlm1bjVo1AOG15
x3XkCx2PTEomiF6KBDtR1lLPva9B6+YOsbyZUVyw+iTX6bd9uLOj86afJrXv
rN6dyEDlaSU7NslXCvWh7vs2m6qkEMhnf9IgWdyBN7+btm4umYA1Se31Wqzx
INW1oFG8ho4ajbL8Hg5vUO7HlS01eVmgS/g4awkfZwXh44gQ/SrRVxPd+fI4
T/08HafyygI25bpA9dnQexe7A2DMfCQu3GsCA0PPC57J6YQ3z38aRj13gwUv
CwyNecZQQLAx+JdFHwyslZVdI+AFJz/yu4UsH8CDYtxnFkeOYD6Xdv1u7TzY
RDg45YSD841wcDiJXkf0DqJ7GYqObvoxgWrWTDemAtvxE1uknnhlKsx+P955
RGYAM09fPracigdsBwuMxFOTgZNxF8vMFB2lfuWvD9WIxupEPg77uiBg9XTZ
63OAjpUt+7U+PalEXimOlYlzr+Fs/uFFW1SoOHmmfN1T4XLk/CxweufiKOCS
zo/V/EDHxp9hucvKMtFVzD7lVFAMmCzKVjSlfr71tGXfzD1vjL5/RyVnUxxM
kDmrDv4/c1bHyZxVXdWO7tAKGvKJG9J3ra9D5Q1p7GKSsfB48/HdhqdH8VT6
p19bnvfjxGvrVdrHIoAlrdX+0Yp2/PDVMCV+xyQkB0+bMB6Kgo/XX94ZNR9D
hQ08EyrTvcjCoSmo/94LrKL7m0c+DePFXRuL5/YNYm2DoFufgRsUnZpmXUg9
l6u1Cl8PfhzAgAXuF6ISXgBX1az27sFJ7A3gthgNasZWEVGZ+4ejqM8VqF7w
bhxvJv4sben5iM8ZHmY23QqCKxKDSk6NdNTPPp/Bkh6Atw//+lGqnAVrWf7M
x64m87HOZD72vk5ygnHnOK7bnJtULfYRpFxTdZhskkD3VObxpqJJNIqbH5Pl
bwHtW5cbxLyofJcttDfv0QTqippiUUMnBGmah9+ZS4TeX+qObNS6mcpxhQux
V8Dd0ihbdqH3oDIiX/mR2geXF3I+9T8/hMwKtFPx/e5wMHPjxqVqdExRUufd
OlyARSLek2c8CyCJzNnakTnbcTJnu/rd2v4yCTp2Ji3gaDlXBeKBfG6zvW7/
8mWeE76MGOHLINEfEn0L0eNDFZWOUs/P6Cpp3a0PynGo+03IjHMI+L8KPaSa
RNXvd3PyZjYXYLKs+tcrVP147uFgsoXKGLpcUV7ZtKUPYjVKD4d9cQIvDv2m
KGp9lp2sCq0SasKZm6afIuyLYTbxQbIr9bkDd55f4tCuR/nD9fKmwwkwRbgz
ZYQ7M0a4M3mGsXdESofwm+3B6w/Nh8BxQaxZwk5XcI4pu/V9wQCGXYs28J4b
gSx7Fxt6wjNI26JDT70xilJ3Ox5EqPXjpEvTTyvGJJgiPBpOwqOpITyaPqJv
IXoO0QVOM4q3ZY/ijGX6xMSifhS8Fqh++/crUFv7hy/TRPgybHl/+DJvid5I
9GCifybcGRbCnSkk3JmPROcmegbRJdevja0vHMPW4skNFg69OGKeaJK3xRNU
yb0PLXLv4x259/G3r6VA+lrvSV9LKy64TG92AtuXc19SXt+BKTu3f9sQHwa/
bwtK19uP44dY0Xi7Uz1YPnvvaDG3PzSQ+VteMn+bR+Zvzdfo1XA6UXFS+JcE
i0knFHfY9PVnpsIdZTWa+EEanv8Ra2uv0AiP+/LbZbJT4ECm3X4X7kmMMJhc
MLq+HSRro97Wb0kF472FGi4FNGRRXmKgE1IHtJC9bpUsryCb8GLMCS9GjvBi
8oh+h+gyRC+/nHcuEul43Y9pfMsOxBuPQ8pjWQKBaatXUxGVn0j8zFbl6Q3B
woXOTYfLAqCK+YKV38goamtwFouW9sHqHLHD+zvdYPFC75rh2DE8evRV/GrJ
Xowe+RYVdDgfmghHRodwZO4Tjgwnf7WqU/ggrrmvEHbWfRiE9to5/DrzHKJm
bF8/7B3AI66yErGyI3BilzvT98MvYLyNOb9VcRgFTLorbag676wi74TcDU+Q
XmKyVECTWp/Pjzg+bm/DL1IOjwUXhcMTC17XGxp0TExn8EeFMir/NffhOxwB
F0idHkLq9DxSpy/P+HM+qEnOBzPI+aDXUr92D99x9HrPcbxJqAfdfmxV/3U1
HITu8G0qOzyKot7v7bf59+Mlg315yZnBcFzzy9H44X48e63K/sz4CIgbMJzT
H0qFW0Yn4xjraBjXyW3CsaGOWr/VX9+Ih4I7f57P9ptU3a7zzeL7jwbcrTi9
OEYk7F9uy3XCbfEm3JbHRE8lug/ROQjPZUb8D8+lmPBc/nJeeAjnpZTo/+W2
fCLcFjGP4Ru7kYbG0spqancRWN8ltkZU1oBZx36n+3M0TOddm/LulgduvcTe
f3ZlLUSpRnF8151Anbp1N2N72tAt0jB65ZoqiHRPYl1Op/IozxoXJ+YefPv7
6Fx3cTn8IJyUSsJJuUM4KfcJ9+Qs4Z5UE+5JGrl38I7cL2Am9wsk5d7w12QM
YXvKiss2d4aw7YjwrcmEJEgnXBLaf7gkGYQ/IkT4Ix6EP1JGdHaiRxLd9z9c
khTCJYmyHGVtKejFIOsj/EvtxpBeIr2x4kgKPF847TDAOISn18XdDGQfRuWh
PWX/nHffXb2mYX4dVT9yK+udzG/C5fxd33bJBYPX+lshfH4TeHNq1MUpvBPv
WiyZt/seAOKdNX0POMbRN9yFeRFDL0Z4GiQ3c/rCzETImaLVVN6zzqHs8Ys+
ZGSFR92LXkMI4Zgw/Ydj8mvik6b+Nzr6ZbsXxu/yxBXOWy9HuobAvmzruTzL
cVyrYPfx47kerHf/tSUvOxJeXW53eNTWifu/mDz5ZTsBa+vzTKrzY2FW8w8H
pIVwQJIJB+Q44YPoEf0n0SUIH+Qy4YN8IXyQv5yOIsLpGCCcDj2SZ64heeZy
kmf+l+v6iNR9+pcV1HwO0hESnatzD1ai/lLjCoO+QBApvb5FIoaGixkKmXR3
1KP68fSAuZNB//I1OnX/8DUWr/zD1/ir79D7ozMS/Trhbjwh3A0bwt24RvRo
oj8h+izxAzxN/AC3Ez/A/3IxxAgXY91x4feCaTS82zfe/iOvAJO+HVTTUq6B
VbXF8iup+kXu94LFoxKNeDzp+KhBYzU87zIRUF07jGlvUqRe2w6iu66Rz4hj
CRQG3joltWQQbTZdp2+MGsZfB9JYOZsL/+VK5BOuxDvClcgg/AgBwo8wIPyI
BeQeRDa5B8FK7kGoE16DPuE1bCW8htNEf0B0PqLbpQkaHl0zgTW8Le1P4rrx
pN2SOIlRKq9ONEovuDGGt8rtFq/l7MNGZX2jl1r+//IXpAl/wZrwF7SLWfs3
aDVhbHh0uJcgDXyuinG7uoTAfZlfxfPPqtD02yEXw610bH9yqHEzazhsUvnD
O9hBeActhHfAeumPvo3o7UTnDm7W7ZDrx1o/P9nvj0bhVs/Vxs08b2E94REo
Ex7BNOERnBcupm+K68difSvrTIFRWP9i94YX0smwzNrF+qZTN65+7d3qsm4C
Agc+NI12RQE/7//6sfsSP/Yx0r9SI/0rWdK/2m7Ofv18M1X/ymZUjH1rRu1Y
z73bD76Bwqvcuxs20zHhgeORZeqZ2C2lpF73oOJfX3SLq3/m2xn/P77oC3f+
8UU/EbxsofatCdx+pYLNcKoDytgEs54XF8JBcn/hB7m/cJfcX3hsPZyxR2IS
ReStzvSfaoWBHDXxnfeLQOj+E/EaaxomazlflVGthUcj0oJjWcVgZpcneleT
jm/Ht1zlSM5E9VHu/NDnJRBD5udPkvn5AjI/n3BS2rRGiY77HvHs4XyRB2Vc
sY+bjEtgTFd42IvaXxrmfrOuPVwGBfeLGFO3lPzrry5K/NU/EX91dvYJVdw6
hvP3PwW+/NyLN7eoeVy0yAduMpeeT+bSDclc+s7nbOvOnBlFQSN1v/Tt/The
FiY4exzhyZyz/xfvYexkLg73vziIG6+qjVvkvIOUFsvKk9T+ojif7S1zagi/
S5k9XbQmG2ZIXl1I8uovJK+OJPesl5B71vfJPeu/XLAz3f/LBetpqnDWGR1D
q4hPXdqKvVBmwL/lMZc3NO/j1FaVoKHt7YWFtuuboLS4BL6F+kMU8V23IL7r
54nv+i/y8/eS/dSQ/Pz4Xf2Pj3GP4sqXVd4mcf1wY5fno0q51P/jK95CfMXX
VBbtNK6fxI1G+XtNIqj8c07jFY94CaiQ+dsWMn+7l8zfdh+dhvLBMZxdOdIy
mtoDQ4xvakNtCiFbef2VLziK28QcrPwe9oGE4enrrvYFsHp10PYVUZN4XJoz
qWGqBS/sFkzR3B8Ceue++Hp0TKBs/WDGzYJWXLT4dPjFmDIYIHOqDQp/5lQz
/uM3bkD8xuuJ37ir1O70t+40rDOziGSjfYDdV7gT79SWgF+Y/Ck1fTq+vpQl
7bQiCWDTL8ZbYaWwrjLz2uj5SWRo5opSv9SC9crnaxKYSkCHzLXmkLnWXWSu
VeuEhCOeoOOp/MKDjZk5eFVgZ5+DbylYhSoLOlrScXvLza0tFt5Y1V0Q9SSn
FLbH/FaJek5DgdPaCnbJdeDSEbBXbmEuZImZnJZ6RsPEpOMakF2HlerBtQNX
cv/1FTclvuLviK/4RuIf3k38wz8T//BVRP9G9B6i85J7c5+Jr3jl/8dXvIL4
iu9l9UiRuz6BV7afr2xu7EDasqLO7weKwbc5zPSF0BiyXdq3qKanFx+f55u3
UiwEUV5uQbtbAxgRqbuLS38Ev0us4LhUkQ3cZN7Vlcy7TpF5VyPGijzl8mF8
3LFX9MvCQUxPtHASvpoPYU21J8LHR7AyoppXxq8f3Rd0H3M7Ra1zZlGAgkY/
dm1bnZpE5Rf+jN837l+bBTm8rToXH/fiqYnAY/sixzBO3tiLJyQNJi1bp3rc
ejCh826N5qFxtGTnLtm5KhXaSd2hRuoOG1J3GJB70OLkHrQnuQd9keybfGTf
zCH7JvNjs6TrgpP4VNXN/752O7A5iqbt2u8P3dcGW7+UUPWqztSK+zq5kL6a
42CacBBcIP7kTsSffIb4k58jP1/10P/ynhi3Pa1lp/b1XV2hq7hjhtHH/n6T
c1fov77fYsT3m5f4fv+3n5lK+pkfiO93A/H99ia+33lE7yW6PtHtEnsw6C0N
d/PfXRL2rhAenzBjWrO3BmSI7/ch4vvdQXy/tchcjT+Zq/lO5mo8F1ZIBEmO
4w7zNcV3m3sgUccpcUH9M9AXyGnZ/2oMz65P9xOu74UxvvvvTNhfwOx7o6ov
Q3QsbxOr/coXA5+YAiW+nIyHhf0ePzODqXxM1uk6jBZg25CjqfzDeNi6/kQG
ryMdQ3YqBrvvL0ZnKd1NGinxoKmYE8N/g44TB82upDKW4fH8E9aOCxJgVi6V
Kb6FhlGM0v5WvrVYfClvb4FOArypCmJ6JDKGMVP3qif0+zDz+QPemdeecOeD
cY4G3zhu3uRsSP/ag7c3/56P3O4LIpyhTwWixvDwe18uTO4FWwda8ee6F5Ag
xDJfvmGMek959+606wMP65Q9W/1cYQN57+bJe1dI3juWeOsNW8foePpYj9KP
Klvs/Hb5vvqzZBC7HG6ksoyqr83usSz1q0a7rZsenBJOAbeRQys5u6h9dunQ
0887ajGNs2f8hH4KaDMrP3v0hIZD1325bPzrsYDH9UxSRQrkOLUY0R5N4nSF
0s6HSq3YI+x+auBYKqzbHM706CUNPZddeFRQWI85bOwPdr0K/dcPXJb4gXcQ
P/AVeqESUpH9uG7NQSvV7aPIdD6kR7PyLegRv+7PxK9bgvh1N96pPxJO/V5G
apknKjkS4YLA0QsdPKFQZrqHq0uPjvLHDhRLN77HfIl5f2G/EDhr+HHIe5aK
nxW0xoSBAEytUzXJFAwFvRmXEvcKGt6SqwtefLIOTx/8JvloWQjMTm+wODlN
QxE+s1o6Wy0m7WdQmLj9+l9f7hziy83w9o8vN43k4WMkDxckeXg78buOJX7X
ysTv+neV9L5LPXTcahgvXCORgo3WsxtGNCLhI/GvLv2Pf3Uv0b2I3kN0I+J7
OUR8LyuI76Ua8bXOJL7Wx4iv9V+/61KiHyR6WLVHkfw/viWfN58cXJ6Op1c7
1NQvDwfP8521+oxUfbFwbNBsWTO2Jea7ma4PBfmBPukuqh75vaaZpcntPXL4
37GZ9QoDsN+zrODnBJ5x7XultLAD9Zsz4qZXhcBA8YLxxusjyNBF1XSRA/Bh
6fc1ax3egjPxtTYmvtY8xNfaguhWRF9GdAMyJ/yazAkbkTlhE6KLEP0e0X3J
Oeljlf89J/0b31zK/8Q3HhLfosjcryiZ+71M5n5fE12V6CeIzj4dscXdfhxX
eTpNt5/ugeLAvkW3631g/VpLmvu5SfROsz/J6doGCppav3EoELYHnd7MuHEC
GwVM7fpsu0HLOGa439IPQuVbCvljabiqeC65Y1M9dL/JuKDiHgyuitNPFMOo
euPcYgeOhEIYOMXXtiMjBGyNDQo/TE/iKZeVjpVazbB2g/8R31dBcI7Mz3wh
c797yPzM3/nbnR7/O3/7Vy8I/F/dX8C0XDiRquO8lupIdiRDflj9l4uH8sBL
fKFiDKWz51pveG6RjA0HDu2WvZYHu8l5IvfC/z1PBBLPOUg8byXxXJTM37qQ
+dsYMn/LSfRwonsQnUlwr+UAVaccXQ3M8z+b4c7Lh1uuHQoDRuLDfIf4MBsS
H+a//sw2/x9/Zm/izyxG/JldiV7O8UffRvQs4tv8gfg2JxDfZmHHhTHzXeNo
xNMn8OvWR5iouCfjLhcIomfHdRax0PBrZlTJ77omePSF1UQtIAROzCxnCAma
QEXByWZup06YFVF4V3ckCCQGh5+/0qWjk/nohy76ezgMPg8uUr/X+h2cIcNz
dPS74fUgW8YZuM3Oeo4tDAfXAM/vH/NpmOomvP/B8zoo3aK+pOtpKDQRPysO
pj9+VpbEzyqL7NdaZL9eMv9nv75J/GpuEb+a28SvxpTss+pkn11u9meftSH+
zJrEnzmS+DNLEz2B6OFEf/z/+fddxA/Ek/iBnCR+IIaCVuvao+hYL57KnL2r
EHfuWvljmVsQeDxtv9D+bRSjq9RKbGL78IB+YKm/jh+08yV9fSo8ibWBuw0f
XmnH1xuGP1c8DoQnaXGXGDcMo8y1vXfUBIeQ9s3zZqu8D3Ac63K8Ij2GrH5v
qhxP9KGRloBVi3YotP7HR/oQ+T70DkHJf3x0b84bO/7jo8vksyPAf9gP0oj/
sAHxH04h/sPpRNchej7RsbO5ooXKq8XSi/yObvJCL5ulhltSM8Ghba3wr3w6
xkwrtoQ0yeVdaq6TeZmIIPOhX/1QGx09Dfe3PnuciIf0hwRGfJNBI+nmPNtb
Os7sNnLWHsjHaPvifauzYiDSPdFPSJCOyTPhI6HbqvHgEZYHWl9DQPyzlNXI
7xEUuXJ48/WyfijlDj+pIZwO7PeC+5Y+HsPOjgMVUVR8GO8tmRDLSgZpJu/g
f/zoNI5c9pq55IBSBVl3KwQzwfjz3Mj+QjoWMYnqQDhvnps588X6mwjBRst/
baHelzeaB4rEOf0xM/84z4JOqr75mDl3h0bHX1t+yFXvicAV5yK2NrJHQzvH
ug1qE3RctPzZsk/qCSiSEVrmeSsYJiU5tge4UHmggztPUUAdGDlathx6lgO/
LY9nvWSio5zE6pUqutXgon3iidPbNAh/n2dr7kntm8E7NL/QCsHpQaS9Clci
1D79MO9CxZ8Dgh/Xs3x6Lquv9bmm+EAk4Kof7bnUvsbgsGn2qJYcblTsf8i2
OhMW+42/2FVEx5tJGhLM2oJ5kRunNEf5EWwvpt2cpvYLj/yILzd1XOBB6HPF
PZ+SYDp/o0ToOB0P62kyzltFA/PpJUGJz6KhXPONJlsFHeeYf3Var8oBrmPj
swwrQsCnOTaDkdofc7j5jtE2FWFfX/TXL2pU/X0/jEEqiI5KBmf0CmXyMcpP
M5VnYTp8vqzluKGRji/kbhkcZ0tDGBblfMuQCBXGQ358VBxITj2x71vao7wl
uheOTN2NgJu3LsNj6u8Vtv46XYTzMYjNtBZJqGdCX93pE2XU7zXrrgtOdRtl
29z5ZoLm8yDr4aLD3/voeK/I4JKTxhtYWbdjyC8hGVhLXvj/4yefvIY1T8Hs
HbzQusO18G0sOOY6ZfMepqMtO6+oRG0FLNHXuprlHga/Za4ZTc9R9cu2jfnr
rzVD2PECI30GP7C94aVpUjWGqdph9nKWvfCMucJscbkLBJH485jEn0RSL3yV
tNy6kn8Mc23nP8o/6sUV/BvV1lW9hx10p/1JLFTd9/pAxp3PvTj+7pKp/vdC
kCfcOnnCrdtMuHUPzi1k5t09jgpSG0zoL3tQq3nMuOhKJhTL+TDGyvyTh3A8
Y0nqQuMu9Yet8SnwSb5kv5ocDVceULihY9SIivoHxXcfSoSLa0YXW3+lo+aA
4MQp9td5KrQ1nfW8sZDo1Or7rpWO39MdeVm87UE2oOBhan8mVG8Iuj1OrXNb
VPet5pvysvu/RNUHfs6DZskboTQqP1w/mW3RABGQMpz8Pj01BWTr0DyMWue1
A6o6F95mQ7HUERnNsHjo3ckf/1mZjkJajDXPj5VD5EM9Ob4TkbB5t9e7eHka
3rDkP5Ge0gif3PJEv0qHgNCVrYzrA8axUKBMrnxzDwRan52euuED2q9/FvKv
GsF7mvsvlG4YhMaqgVcK2W7wdLnsqWm9QRQtPtDuUDwM++w8xL1WOsPeWfEC
ffMB3KtcaHLcZgRvMS8p+OCbCBkaLWGN9wZxi6FpKT1qGCMU9HwLQ+JBd0+s
K9+LERwcaDsirDeAKSJWnlmXkuCq2h4PlTI6ag9dCnJ/l5V3z3Td5ocVufBM
KP98HBX3MiXPvFTksoaNl3IZ3pzMgtrWDntvat2WPNyoInzzkOxhMaZjPMwI
fScZ5tYO0PHEzBzXYUGqbmRjFHxnnArs6Udd1o3Q8T6vzOL3km9Aa1NBzyv9
RFBVnhDgpNb52kJxO7WSZCj5ZZhrfSoGPOT333yVQ8fIdJ/6n0sQThmUWB7j
fgM3pEVT8q7Q0ZTzk3KERDkovHaXq6bqX6dLLq+7rWjod37NXsPTDbBM4MvV
KNlA6C0d7Vv9bgKFrDl0WQQ7wchA/PgKBV+YObXX4bDfKAaNPPOoEO+HPiG+
yecy3mAWy5mIXQPYti9K8COMQFV4ULLgYh+IOZL9/YppLw5H7pdxqRqDjYk3
7UJFQ+BFZH7ovt+TKD9Tompm14QnmBzHQo9nwBFrbtcHL2qx+ry2nzxVR04+
z9u3uSoRrN+Pi+7l6QOxdG4DgeKxvO8KX3s2qY2B6KjWRX9qnb/tuaJoP3wT
7o3uFI5Rz4LyK78j1KjnNqbtqVgj/TxuulFylEM4C8rm4rwbqXhenHy7bpuz
hOwqk+QPzfsQVsmu3JNRQMd93y0uu4QoyCae+sa/zhbB3NkTJAfp+NVjttDP
4TkW0XqsPe6mQr+M96On/XSkx59+nfooGAdbSz8PxaRAcuzGhwuo+jrAkFuo
Wz0Ks8/8SMTziZDlfPSqPvWc9Jd4MYSkZaHvNttdPxbFw+o1WhX8pVTdvX32
TpjZOyx29bbN+RINaQY3NJ7vp6Me5+V9+9UqUVXl2dUvIhGQ4+Vx35Squ8+Z
TRU2xpehzEvtOsU34WCnwRgUFD6JpscaZ/mWtGLzubtL+g8FgRwnEwqp0jC0
q2HJ1Q2NWDQdmGIRGQx5tzedWNE7gdZVWavP23VgBtvt9sJmf0jPXp234OoE
6tFfHkry68L9Cnkqs5mBQNvPve5A0hiGb32mvyqkF6VvTG0y0fUH2UuChxwP
UHGp3qeJ5WQfLnoy141Lg+HUBse+7VxDKJL/bPcTnmFU8Vm5wGM+CNolE8qc
S0bw86Zp/gdsA/j72c0S9q1pcPaY6JLB9Fy0OPXVWzKRDi+KD5kdSUiBjI65
qFv8dJBUFZ9xeFAhK120fKo0tBoU4u5FyFF5wmiHo952vAFbtxxqX9iVCWcz
POnqVF5RRFsS6TB2TtY9+1fA1RaEfl6Oh5eo98j07oJXOa6v8FJjQkp0bTKs
8Bf4INlLR9WrRidC7yXhb2e1zztUYmH505e8T/3oyHRsjffBZ0VIC3oeVVwa
Cj5HFpwdo56rTezf+VZ22MDSo4t++/RkAuO5NY/YkY6WQwd1v3NckPUcl7hQ
xpoPbZJuu6qpPGHMfH2W2+/nMCcVemmhczLMrIbIACreGkkrPk5PeQr9SVKf
zqrHQPbskSGeeep5qH/mtGFaD2Zdy0IavEJgX+m5lVk+dHyyTrNkXhuhuK6o
4EZAFiy9KW1WV05H3w0yDa+Y04F7pVg23TQFfJZ9zeH9QseXC3UlrwvYyC5Q
2GjyIykOaN7GpazU+8Lm7viqd6kLHFc5HLxRIQtCC7/1MeVR+kJnCy/V07IC
0Q3KClL5EK9+mX8XtT48FmIScdkRULIqOmXxihQQHvA67FVHx5PygvZmVhmw
T6b5xG6zWMhv94+OdqPj2db5n6tsi0FMmbWgOSIUorv3+Jtb03Dvewbm9xfq
semWGUrwZ4GySXRGmA61v/B3yS/ULkX1D7cO+tWmQPqj0u6pKWpfZl3N53DH
KU/xou5s2ve3oDNqI9dK5Qmn65W+dQW4wtl7FWA2lQXD2s4bruXSMeqhYS8o
HJTds8Wbg+9kPrTyeh5ZQj0nweZ69Sq3qHpnvUZWjnAqWK9S3nYglspLv96R
3PouH74vfjunqxgP75/WHshbTsctUa7T5o4fQLrisFlH9RvwFpJdPug7iZ1X
JD6Ny7SC8yOWBnnPQGBgkRJVUx5D6VdnnHnE+qAEuTQvDLj/nzqCgdQRL2S8
N29aNoDpgzlxuz1GsH5Q4ukOrgLI0btzw379ACY8rmwoChtB7gNLMiVlcmGa
8CXZCV/SnfAl7bUqn2s8GsK46rzDlq+G8FCnVSv9WgZksewsePB4BDHk0cBF
HWp/eyvtVGCSBnRng5o9Zybw86DtvUD1Lsx6drNWMD0Vyj9E7NhOxasFV42v
zSdE5C2IPVeSf5pan8nSZToN1Pq8+8Joz2sLD1zO9vB5ZMO8UvQhCWqdfTy+
JS68ziJrVfZwjl0pH1ZJrpIJ66R+joRFZmRdOKSIzfB/v5oGqyZ/piVR+35h
Lrvgz8Qs6GPuaBoaSARejj16qqrU82+/fbb1SRkUl51yuCYRA5lLlgbuW0bD
owMa9TvGmuD6uhfTWs1hoDad6Hy+dhxl3XjK6nw+gnXAF/PcqAD4allzO8lt
BH+kMdEeWg/AvsYVM+sqXwHHt6MhI0aDqKs4t1YGh2HDG01nZnYn8MpO43sb
14lbLPg53Z0msDsJ5q48eAvrXftl9p/rxk/VLz/4cE9gu2X22XCnBIiqfDDy
O6AX15x94Jv/cgwtv6q31HKmQ/z0p3PDTybx9iG2/s6phjwWy/AeybRWsJzr
+FBdT8cM/4FyL1kDrI12uqjRnA2T83o7Pah1WzJvvfvE4R15f/6fD3f0u7lT
qfdLiSZ87swPLeT4McN77UcaxE10n6mn8u3ElxHRBpeNAWW76kPHk0Cztylp
OfVeqETpLpsP8YAO2dzikE1v4bOg6osqqu6YcTNK2BUeAbFvrt8o3x8FA6cn
Vw9Szz/XEde7ww7pwNW+f/rh8nAQem3R9cCDqneOxynRDhQDl7Fep11TMIQ7
7zff3E5DliJO04UDtWCZt8lJcTYAwvuYolQkJ3HHulGxd+ztMF9cY8G2zg9y
6Z3hJ9nH0J3P6qK+bR8I6ZmzZv/whakVqU6LJibxe2bJjPrhZrxAZy6VU0+C
2vM/Ew2CgrFtzLfwxDQdjS/RbmlLhUNs8hKlR9Sr6yYuFidtMIbthRN583aF
wBZW1XHlFR3yrosq2cxl5UUoCXQyvC+GAfH8okpqne8kdbH5ubpjdD1TQrFV
NkQbNm1LouLbx+yGJKmpGIx+U+CS/SgNbhWX1jpmU3UTd/e2dyY52PHk9Hbb
A0mQPjKjeegCHZstH/O5bSlHPoY16vqnY2GPka/yzZM0rE9pdRSk8mT7oc1e
KRffAJ+5Baf40wksTrFlukrvxIP++1zE7ILhdvybGUHmMdz6YdlUkXcfFqYc
b81o9gXn0YCdpUPjuNTMJ/XBkY8432oU8uxwMGjPNE3o3xjD67sG64U4+jD4
1dD20MHXkMp0k1d0G7Wf7lDsvXG5D8yqbbYekIoE0DrjyyM4gPGbRV4O1I7A
q7fchmUcVL5nKsTdfLUKo5bF8zCJ0cFDZNHQht4IuLZQR7fsWRPUCVW68a6i
wWRpzY5o+yTgf77olcJ3GnypXxT7NLJWlilf01JxRS3IMuRKLKXqxNjYzoy9
1m/xEn+74+VTKSCav+joSAYdZQyT8ho/5mF4iJPwP36hq5guqVUdpOqjfW8a
DFgr8TFqIjCEgfTuG9fll9Lw7ebEuCkm6u/uviy/8aQ3/NZeELXLdBJDQq2e
nuprxd3HLqkFhofDPPFpX0t82r2IT3vl+r0svQtG8NG3s8aamQNQsvyrccDG
Ajh47NfR5VQcXLp9auW6iAE41Sx4ZtuTdxD6w59RpG0EPW6euOUy2w8sh686
z91LB8u4iAsxJ8YwcBH3Oof1fSDXrqNs3JcM3z9+OqrTPYGNDrWXnpzsAAEx
5+6TMYlgJs9Rkl5LxxDc+a3oXTrsWGpU1NgQD1HywykTn6j3K0qaZ2rOH89/
q2Gcy4iF3L3LudypffyIZPnq8cgwXBa05+mCl6Fga2W/6wL1/rY+iTn39XwS
KmWUbXKgecKWLNc3QldouG54Sk6huh6eJQ/G1p/PA4/3Dj1bmmmoEuo1eYe9
FmZvpefYCWeAXVrH515dKm64ce4rqi+Fidf1hy9IJcHBg07cp6h8xoO2bEk7
dzxwXo8zYo2MgmvrLPfdo+rxbeUK6Ve03oGWkZRj3oVwUNf5dej7PSoPWcOU
3b7jPUT8yA5SrvMBCeLf/o74t2sQ//bb/HzvNC/TkeHa/UPDGUX45DqP2sJ7
+bDDSyY3kNrfdTpL7ex/5WNOq47U68pMUNo9PG9F5bdLL8dJagdmoBiz4fJ1
G5KhJumeq8TXf/yKA1nYWTzRQ9Duc8316H/z81KSn4uS/PxvXj1G8uoRklf/
zZ+7Sf78muTP6SRP1iZ5shrJk5+QfNiY5MPdJB/2ND6SUak4hsrZx7PS9vSh
M7PcC/dZDyhaoFVcwj+MQgEu/fs5hvB2xb7oKh4fWOHrN6LzpA9D2FR3rdkw
hoXF2S2eMc6wjYFB653V3Tz673/+o8MRBgYX5hMcss7HzNlDJPvQ2LW7R3Lf
GJzrdx531E8Crdvjlq6m/bjZc6TYS2kUeDdz2y2XSwKXFzFfWqjnv0FTivXc
7iEYbBhvt9yeBms4c+5to/LPFQw+m88w5sk+LRKQU91YDNskhkZlh+kYXWxu
4rnDFbMW9L3le5wCQTasa+Oo+jFumzrNyjke86u+qLnYxAFHE5/wKirPebBx
GPzSCjA6zlMjriAMVtDdL1+rpqGFmu6WO0fr8CU3Q1PJpv9H13nHY/m+/z+j
ktEeNIyIUCkaiA5FOxINtFChRNEeyiii7L032XuPw95kRGTv27pvRErF735/
O999vr8+j++fno/rweW6rvM8X8d5Hsfr8ATu2rcnXEXp49RGetJc8jM+ez0U
8TooEL4LuTO9MKRgbNIbttfcfXC49RHD2v4C0Hw0Wl5TT8HlqbYVydW9sEVv
PHrQB2Hx84od84VDeCUtnqs1tgfM0wfkLgZkgpJQnGqd1AiO9QjJJzh1weD5
yf57ealgXHLSI/PZGL71jOHbc7UZhGs27LSaTYINsJ7/Hz+ikdt7+W22JwOf
hpBzBnMiyE0XTRTQxyPLx+kl7XvdYTtnxv6p79GQdMl2PHKGhnVivsEKjB7Q
JFHMo5UeDOGhG41zftG/c5SgPMyQwcmXnBc3snvAPp2AmyMv//G7zlbGH/lw
iGng6QXxLJDvkPBbk0LDdbt+LciMzAL2IvYfmrHJIOyzZkcDXc8H8chcMjgT
Bixtqm/vnImFJfz7Rt+50ZDLXn8JphXC4YSjQizMYcCjnlU3zUnD1/0CCd9/
VoNoWv3lwtfeEFawNodDagwTPY/a749tRvnhtJmNLXkQkXKParKNis1Xz95b
suMjpqSJrurVzQLNlbYBo9toaPnFL04/vwIPS04Jm8elgNSbJzwt9PHy1f/M
haNNkfhOoGXzNf14ENKW2b92bBjTWvv7+eS7cUs828DgT39IeQQfU4qpaBFg
qXrdqg6qh48Vqv2yhxOyQy9Cx+jzv0pqodf3OJDzO/oi3NEDZhIE87vbKahh
4mEnzN8HmuqLGLadt4JfhJ8h/BnhVkYSq0pWDOMj3xnvhNJu1FKSVVolX/yH
Pyb8KuEyZUoOy+g6cKL0wh7LY2V4tNxa+1BDzB/eT7gC4Vs9FW50qA6geefT
cwdGBsDPn5HHKfYdSG0RupYo0Y9T0usCf3wdBCepddaNIjbgOs2lKGLSjS5f
Dl7+XDkMqMslkF5lAcNp8Ph2Fg0P5B30DUxJAfVHOsLCY+mQ6Spywvd8H46f
MElL8KZgvo7+54XmCaBD/LT3Ej9tc+Kn/TFjgYrzin5UFRF3ZmWkoO48JT2w
PxYS5QXoqn4A6xYcjowfHkB2A29mTok44ObKtFq0c5D+f/I+a//aj64FE1pc
vnHwpLndTn7PCBYdVBnZHtaFZanLXe/dTQYHJ/EQdeUx1Khxfr6FvQXP16Ys
O6+fCudyv24KcaPi98b8Zytj6tGXS6Ndb0sgpH8J0bAWH8bemMkbcLkHW6P5
VLUfu8IV3fDtp9qpeGVRz6eamlrk/qYhHjzgDcsYGO/TQscwJeFuU/SKZgze
u0iYJm0NYh3fPv/j02gueCd8n3QhND88nCO+qxpezH2VbjlExdGNodz6pR9B
7sfSYLftTpCqbOizx5uGtkvUvLI+F4LKt2qeqSsusHvbiT5eWwq6zrc4zb/q
gxNZLgNnbr+Fo4S/INyM8IDXmQcCFvShudIOU95I+nwT1rhtsT3+Fw8h3Mbp
49A9byomewW86B6vQ9WFMqMceclgT7gT4acJdxA5YZ08NYAUe2fx5OMD4FSV
ug+aHMA+ttJ5wUw/DrtvSNqqMAhsJdrPB17YweLWIvudQT2YaZ92/zTTMKRf
e7NRb+41sDYddymnx6GTb94YCk7E4ZX+5XnyzckwoPqIe8vNNtxMC9e46DuK
j+f3+vlYx0DO41jvEN1OZBB95FJRNYIP5/WOXBdMgNiHTVeXNHXhpJXB88eb
RvA6n2L9IeNEaDHfo+LC24edHDcDlzpTMCdDcPTA91x4Nrjtqs5qCh6V9Xzg
+6IPv/os3bc3vBDOfyp99NyUij3sFWKhQg04brhL/QBnGDQILBV9rjWMS90k
bnau6UF/w1bm+Vf+IH1IgFuXHpc9bpat0AzURt5c2UadulyoyD2S9LBsDOt3
6rNxX/mEBrrnGWVDXUFROtn+9N0RLPY5Fmdr2IUuY7v6RtsDIJ+TCRpXj2FV
ZOvxg86f8bax4M6c8RC4fHK88fWeIazOuNp1KaEXZRYV7vkR6wWLie/xcqHf
vsf1xPd4sU5D/z/z+TdlQwPcGnLgSy3XOsZ9cWCVZp+sXEnX845OT5sG02E8
8J6TfkQMLCd+xbbErzj+X79is8o3bBpjGHJbYv3i+y04jp4jYfVuoPR90x6l
vDFU7owKuvTyI4g6aHlS5EuhJJp5X1ohFX+8ZBbcPFmEri7GTAVnqqB82ZFE
ZTYaypVK1tReLMaZzcca31mXgAbxGQ4lPsNviM8w7wjfjelYGm488vidlEgu
ys8UR72gr8tCsjcPUl5RsXiTv9UVgQa48RPu+nj7/+FlhF8hPHt/T9nI9VG0
/vlJtvZ5Oyimaog+++oMWYTbEX6M8PVrnCWKImi4muVjlVaaJkSrRShZvy4A
vqeTUafC6XHcJ3FuO/kiXDrJVnU+tAbmhQT3D7wexc3HhF3O/WqD5lDeVyNO
TsCy9TdnJNwh7DefGlery6mjIi1iVfOP1CJsunZfWc+yEiw/L4tN5xvGEbUo
D53Zboya2/KinJr3hw8T/p5wbpIXmkPyQg1IXijPX/wW4SymW7gXmozgtmkH
0VmhLkzTZ4tTTkuBJX/xFMJx2/yWAcExLPx1A2WZPyMzt2hPaWXCH55POAPh
1rnfqhzu0/DNqkLP3qBC8PxWpGPflQEb/HedfXChD130BRLCPCm4tP2M693v
CbBzRrAvq7YPi1tQM1uKgmriG5oar8TBxMjYJsnZERxQtXWx8OjAwfOjLyUs
U0DxVlql+4ExTBuWPHl1qAXyw+Q0vz3wgw+Tg3sl6POCYpHycQXPNhi1qJGw
+uYN029XO2Xq0HBXj1/P/J4yyFThKQ7UCwLBh/s1OPSH8VuBdWMIWw+sywt2
2XDAFewdLFROmg9hn02/WdTpXnBVchdhfeQMBT+UIMl4EHWv2bG+K+yH8qYi
Ofat7qBN8oimSR7RPpJHJJ7/47Z87Rj+ZJUfuF1WgfbLr3wYZGgA+TPRvdXe
rui08MVlxWwatsm0RiWK50Fzn497OP3nHYYTmQPZuTAoFlxBCQuD3S+31Und
pseDXtrr5L1L8d6MYtdbjVCoPhSaepFCxYHZPYcyb9Wi9JUv+U3mQeBVMzeW
HzOGfesuS+xo/YQjSYcd6mX94L2Jm7Q3wzDOoYCxnX8PSnHcnhh84Aty6wf3
y1aNobzmgHbqs0x8nnoiTv1qEzDt7GDxL68E/pJNwgEDVPgxviQp6UgB2GkG
boz0oaLX/E3PEy/r8f5uvu1tmUHgRPS/OtH/VkT/596ToHyRGsVKY5W4yA0d
6Bug5yuT5wlhlnFlH/YNIYvuR87e6F68orVHIn3QD64R/xZb4t8iRfxb/tbz
o0TPSx9u7rzSPYyJQi6CD5i6IddIaVt8YhYEzpzgDvOkYkZ9juhcRD2qmBy/
G2frDtvk2x5oBQ/j3iLWobtpdP22rKk06qg7BMSt8gjkG8X0fqfBm3c70C/l
XiPlsz94v/ASnwobwMereVhsPQewJMH42pYhS3grkli0vY6CvY9ZOb7u6kO1
ylemN60c4HJn1tbzhjScsp86bbq1APfaocy3pwgH5k8UnlhEw+9tC/TWchTB
20/zdm6bymCgfebYma4hVLwabf7ZugfYO8bXcEtlwgHi37vD97d/bwTx7/25
MT2a2k3Dhcc+1y0TiACrWymZK74k/Kn70Lr9u+7jG/vvuo9/fXcXEt/dL+W/
fXezZpsrRNjpen7uqOLX9BrsXusowfEoAO6yql5QFqaiXFkOn8fFRqSV2CRL
rHSAow0WZ4dSqTh4L0rsF6UAToxoaMe/qYGjljQFhgU0dNvw4oDSnkLYtsQ8
Ue9oOVDa7NrVY0dwI+8x1c537ejvP5vHwFsOp/0iUwMkRtEVH24Iu9CGEofK
qKc2FEMP8dGdP/HbR/cE8dEdYz1WqfyRivyG4gdCt9figfLIYZeKVAiv8jdJ
EaGivdrHjHUyjdCT/EbevTjwn3zI/+F+hDcRzs8ZcTd3cATj2g7lW57ohBLF
9wzXqG7ATXg+4UmE+1zastnQlobWQ8Zv2Vdl4mvtM5dcevLgnIHdh5sBI5hn
+Oz+6avtaBuv8etTawUEre8uY/MYxoXtqoWbK7tBK/F45X1+a2gkPLXtNy9L
/c2rmp6bLKofwU776MfTm9rxnv32NdaxZXCLj+Pt8dN9WC8gdPLiCwoqNqo2
7ZbKgtuE1xF+mPCtJD/5NclPniH5yenXsosr2Acx8WQBii6mj5uqjffqWlMg
i/AYwqsIn1a4M39u6zBeFTiVHA89KNB6t2RfTTL8IFyNcB7CeyIf2CkVj+Lb
5263lxxuRQYVtvtq6Rngmrf1WsmNNhS1YdJqps/Hu0o4i/Q6Y6C98oGCkH07
zlVbXZ09M4rxruxe9RyxwPhu2k2WsR/bIePUexzEXbks9rIK+ZB4FHW3OlGR
kXJEcFdKPVD5N08t3RkGt21SxBhG6fF45otjuhsiIKcIVV3uRcDL6sBb9epj
eHzNT8cEnRawPa/Z+jUuEIoOXYyYyBvFK5cjMy4xtUGwBMO6fWcDwCOdff9s
Ew0Nsta8e3k+DSgXu1uu/giByQ/Oo9Ypw1jiSr2i690N7D67K5av8oTDVA2X
uv4hdKvguHelrAfEBFkqs1jcQe+U0oRiJ12/Lf/w2FqnE2bGPY/cf+cJm3/+
zs80IPmZ6zl+52cuN+NfPmpH/25FvwSL+tfhRgO3a+Pq2SDCw/9tSe4w2GAW
S/rdbrQ4+t2953QCXPGrOVtBpaGG4K8Sqy3usO7o87fUNXHw/J62koA2De8c
PuAp+6sUL33JYFsN0bBerPDF+S4qUiVuNRlZ12K06ZMW053vgXFIwoz39hgK
PDYUPrW0BXNsC06cLgwCb/MvMszqI7gCOqZuuHch76yVqfNGX3jp2rRFL5SC
WTVVnBE3+nDSmPl+hKQ75Ca2scxx98K4i90gg/EQlIp0nrS9kwmKN42S3+bT
8Ny51fKCzzRx2aq601NvETZ4yIQZ5NLQa9X5yMM7d+emzl/mihPOg560SmbW
PRTsUzVYtvJ9Hyx/csLUYzgTDnY2Lz21koJ7Lctz+rAPtGpmF3BN5UCNUtX5
r08pyDXq3LlPuw++1ltaRZxIh435B19FOQ1h+PbeHT0reuFHJ4fQPrFk6Oaw
p+xLGkHZouqCi7md0LAo3+i4RQJEb2W/0z1OxXqD5XsZQz6A/IE1d5y3xQMM
MnLT6PPqxx8KT0t0U7BKXs1wRb4TRNH4hZMHaBgmp5Izy5WEL5Zd9N67zBOm
HskkmPuOYXjTQJn0w4+g1+S0bi1DBXQAll8cGMM4613XJk5/hGnhn4dPZxaB
j4zkVCQ9vtPdcFL8oUgDVJ7jL1KQyQP9T4yyP7OomLm165pYYi2cZxrTMKem
g3AOk42cMg1ZWTf05keUwfJzR6s9ohNBfbu9Yrg9Dc/qa4xIdxSBAptH2riK
1x/dW0J0rxbRvUzz9l6WAVQM86McS35dDylH+UPYIm3/6N63RPeeILpXQcNh
g/IcDV+t5LkmUGqEtnZmyz+ecoEpgyOum9bRcKLlrBjrfBF+3l51sLyl+L/0
agTRpdRsO7GR0zQ0ZLY21JApQq0wt+NTk/+tV28TXbqya4dl7SsaMiF17Mri
Arz+1nFT5T/nsH/p0lSiSwWPlDgtzKKhnTXTtvGzWTiv9zi9qSDxjy4tILqU
kejSPdtYDi/lG0ApYxVr8aWDUDndN+f1OhKiws8tpLnQkJPStuUDexEc1n25
bq1mMCQuf0QTZqSht6nENpHLH2CrXR5t2Yg/rB9XKhvIH0Md9hSn7iefIDZ8
08/3LN7A9UTVKfPiCMoVpV/87tIFCobfH4jNucN3Oa/rFPrv36quG3CpqhC9
XtPkr4qFw+jXWQUq0yjKVCyv8OrpwEWV1VVPebxAtUM9luPNCKYHtNSpHu9C
ORXDU3s5fcD/iyFFl6kXk6zVf4amDqFmzliNgGoQmKdxJl6N68EJHn1Xpr4h
wNMOS++wJ0BR3de7O9P60GtnccLSYxTw/T7dYns1Ec6sUovwS6UgZ+bioCvd
vVD6Ztp8xY88YIybYci4OITRBrw2oTt7Yb1Jxfb75tlw+sAL7TS7YZRma9w8
6d4N6x0TH7dJpsPqOZ+FJy1HcbHCmYcbLdtg4tjjxyprUkCzIVitToSGQnZ7
fF/pVsJJuRvdF1iTQPKLPPu2XzRk9uevnWF3RO3FTQ0hH1yg2n/R0s903bL4
GoZESr/E8gHVu9EnvMH+KuV2aTcVn8aGn9haUAD7+YUX2ldXQsGkFohtoOFD
AbcLXE8KYXvVdc/VXSWguiAmkfMUDX8u5b4udqQQJC+9tRgzKoD79uuS1j3/
5/y9PVAtKh9SE/wfqi3PgV6jHaqLEmjocGhlqoN7FgS3fRB8eSQVTo3ciY2T
puHJRZkmpnGVEBL3QCyUzxfCiK5wI7qilegK9n0LW2O56FzufsvdxEZgL7vd
8YXmALxEV6QRXZFFdAXPh8Wu2fS4e+XL9PnS4Gww2t990lfMFtZ/9KDqXhxF
gddRHx5WtOLEkSOe75KLQP8vPXCCrPuD55VlVTjHcJR7euCsVAteNfE0ThHJ
B0GiByyJHvhB9IBmUErMMwYqBp35IqyzsRG/JqizP/iRBZlED8QTPVBL9EBv
hJFw3S8q+nLa0+a6q/FDwV7/81Kp8I3ogUtED2wmeuBIpk75wRwa6r2xYzEK
TkLTLXsSxZdkQs7Wk/OWR9qRPXL7uZ/0+eY2i3w+R18M9Grf8Tg5QUOuN2Wb
vi72g4IVSSKK2ZHwKPTRVcogDX9ppcQcPhAP3DXW3LYMYbDqh7DTxTwaVh7l
07hrmgvPOuSfBNK/f8FTQjYdq2hYdHjISfJQDaS67TqXruwPP2cbuYu2UzFy
7/sn03sboTZ6aE+IvDfUKpq/v0nXdYkXnjdJDBQig8L+XIOiWAhafFpMYP0I
aq/W4ND72YWD0KbQJe0PmzsFJjkD2vCGlenrW46jIMK5sNO+NAoKD+g6XXop
C6zTD4K0p2hQY/KcmSYXBS+0vqlec6Aim6EWw0BnPRYEyJ1ctN8HxthEPKXf
j2Ld+0bPfQ/b8AAbzU3lpz1kHSv3+ChORQfh18USaxrRvSyC17DCD7Yx39dx
kh5CvWU7vS29e6EzYbAyZyoK+FUlkt8VfcKHVnab/GLG4LLs8MMC0zBgOxje
cuUyBfdszzn/Lb0PRRk76lfM+IEG8QO5RfxAEogfCCs5fwki5y9Z5PxFaIGp
+v8+f9m/YMHDf85fLjuPV6UzdeH5xLDWmH/W1a1OeyQWvoE4ci6jQc5l9Mi5
DHt3/0PHvTTs158yujddiXVdXN99VvhBwNb6wx+86OtmiLD9kEIzdgiOTVd0
OML856Oqh2cpGKMdVb7Hvxcmbhs++7UGYfgy8+nCFCpGZbSuODdWh7xyPN92
Z7vDlx6Oo+0Kw7j2YI/y8X090ByhGnT3OH1e1ZjnH9vUAvcl5LVslo2h094u
qar3BbBp0iBStXsQ40KiP6+HfhjxvVj0Qfs9nJAsZqZepODqVoM1adl9iKvt
dvR3eIAAiUMzSBy6gsShAq1DE03xI/iOjVFxMf15lAfbfl1+2RcmI7Pum+2i
YOlCRVbz8T5cULv1SfmALSzUH+piGhnFIvk7Zsu1WzG4cXuitaQjCG2lSfuV
9WCWNPOCwMEh2JwqcPRN5mu4NubH6mpNw5mYfh1GyXyIPLaRecPlTPhBfG5L
iM9tAPG5dVQfmk6834fzq7M8z3tSwLkxPCjvtiu4Ej77F6c4H9r9XrEbgy7I
e1ZThmFAR7euc4sbjBHuT/gU4UsvHti2f2k/Fmg0bjReQQGKT9XTpqYgWEJ4
CeGjhCd37H3mnN6Dl9/cufeJ/n8Vhw2bLB18D6aEWxD+mPBo4pfrR/xyq4hf
7r/cl/BawuWueU3mzZbgwyWOAyqXaHhTdJ21yEgKwF/cjHDOydpZ6++j+O7x
np7FG1pR0T73Xa+6D8j02rzZpzSGylFnE42CW/DMhkzxnXa+MLtmTOZM8TAe
Kl9xxNeM/jwWB38VdfcFofRXQ673h5Fl9usyTbrO0e8W2Zil7QdGsVcda/mH
MSDU1FXfsAcPhkLsh3Z/2ET8dTuIv+5J4q+7iIy7MDLuYsm4u0rG1zkyvg6R
8dXFu1EtUWoIh6ka5+5F9mJHtt6pl1P0+VIoSOfcQQrWTp26s+hzH25bSrvg
K+sHQ8v5Z7vYB7CG07o9THQQI3c+vhn+1g9OBVy33S4+iG5r8/S2LhpAd4tE
DR5eP1BZkHf1f4/3FwsWmP7PeWuutec6zQIM8RgxKnSjgfjmhN6jUwnwdVau
zOLwGO7SZHsW/jgVb8ZKcvfLtsBn4gNsQHyAbYkP8L69kl3DDAWgubCEabUx
DUpluBrYenNBkuzbpJJ9mwiybyNx5/oe209jGF/c8KN15SfcsaBBpGyDM5yd
ePpSebIfk/dF7pQ/Poh7l1Wuznr3CmLFjiVkvaWhdDWn2LPcHHQMSbPwXohw
sK5kza4fFNx8uyHKKKgXTHJrige1csE2YWjrWrEh/CzqFH9QrxcuPcBTj39m
g+ed5h3LP/QixeTcjXneIfjiV32pNuwNPJ1JEwrvouGu2Zik3nR7fDkn0790
YSq0DOtrRuq34V6pjHuffEbR/nNFhKBhDHwhPr2riU+vFfHpZbShxrktG8J3
VGcLy55eWL6kxWrIwx1YCbcgfAXhLbpL66ovD2ACiKJf5wAIGy84xxPkDnv1
fvMLhDPc+80vSA/6dAxmYp9NWvXuahrWKkRoKToHQSnhPYRXEv7iwf/v37ue
+PdaHi640aJQD7fDRdLF6XHDcECAtcJwBNwh/A7hxYTH+Hlc2pXUBzsbjs48
OkNBta9b+ZQU4qGM8HWEvyL8zSHeaIcDfXjk432X6WwKMFdUTu6LCYd2u8VS
Ge39uHRMMtruzCD8ejA8Hnk0HJpvX6yNhi6orBgqbb49AskDd3SSb6RClI2U
iDN9Pc51Obcvs/0zqJQMHY2gFsGD6B1x6gMUsGjwsxOI6YW262oTp2/lgaxE
Z+8iDxoKz90Q0r6fB9Hr3u7oob+X7GuWqt/O9CHYnf/J6k7BmgKdd46HkyHd
Jv+RAT0euc0cWsmxtgAGVVSyWxwz4MIwZef0pT60PVK6WvUdBbNpLw815idD
096xzrKboyitFD0jfr0d04LihBTkvMEtWpsnb+kofvsVozSf2YEyGg852bS9
4AxZl5+SdTmQrMsBZF90OdkXPU72RVtvZ20w9xnBaGGJwxUCXcgR9+Z7SZ8/
BORHVp5K7cOONVyed6/S739F1FpRd3+w+z/yJSxc3bPcn2ngaIaVIscnGpzb
IvXa3T4DWuqPzC3fMYyJQfuePr3Sg0KMxyZz7gbCdNdbhgst3SjO4CuRen8Y
BL9XvXlOj7PKnbaO339Nj7+WDMZqzOSgybfeuXqxPHCZCzsl1UvDcjv99vRx
Z9yay8bT0JIMQkd3hFsdaUM11UB9qZBR3Hxzn5CSQBy8viX6fUFVGzKvCVz9
4dUojmyJK5VUi4GzVYf2n3k+hs579+hROJox/3vHcIV0BlAiJ5UnLrbhIu9z
K9386OPuwKHrWffjgNFO7bylEH2cZltXCRdWoZCjaeDB1hAQcNRwxqBiMNBe
ILr5KQ3kFXdoNufGAat43Puv2uHY5v90NH6EBj56Zq7OelHAnCWdP+/WDAFt
LJusDMbgbEFgKOtIMnTpcYqlmFCxz8hCRXxvEWo+/p6Y6loLEf35RZcd6Xp1
28PtYtV5sPu7bZvT6gxIJ362CsTPNpH42WYTfoDwZMIr7GqkBJX78GzEIfmF
PnSd/1z87uWdSeBM1vFff63jD570xd/ya0Art1eynXpUzAyPbur5FAWP/uLR
hDv5NUtL5I5gwuPGiQeNnfie+RH33Sh/uCXQlVDgOIw/Xm3J2V1Dj99zrnGd
PRQAzPfKf4097obHk/dKbdoqQDhAV+vw1BB4Ex/aBOJDm0t8aP/2j80mPrGs
STsvH705gtWbNz9WK23Hh7u3OHS+rYJ1Z17wMfTQsPvOt6XBIk6oV5rCtP1m
CjQSH9dl2377uO4nPq4OhQzmmcpt+FHu7ArToFHkCcx/1aETC4vI/Gn117w6
fVzQ8KvYMA4f5D2udLUHK5omnGpvecGmFLdfk5XDKJeyV2Dl4260uM3cv2u9
D3DKXT/KIUPD/MWX7HrPV+IzJbFs/ZIQyHdkka3QjYQVU/ocYYM0ELRPH0hQ
igE+55k1VfT4ZaL9xsKn8RFgskArZoGFP+iFWXGkalDRfJ2h/LDsR9g9u9T0
6L63cLyMfdeDcBrGqS20/vaiAHaw//zZb+IJAY15wyxfaRjy3not65cQ7GT/
4Ra/3QdmSR7IOZIHcpfkgUg996hQ/jaEAm2PXjnG9UCx4mntU+AC+STPSpDk
WWmTPKtoMp8wkfnkEZlP/Ju3+Dv19OEPG1f+DhkKrnfO2/alxgl0/sqn4iX5
VNfIPgML7+99hjCyz8BG8qniu3YJ/ZNPxV70O5/qMFnfA8j63knW99YlS6Oc
6fPmtfMqcQ5zvbDocbfTbucCsNqte2HlCSqqz4l4v3tdjwuKn+0/K1sAl+IV
HolE0bDmSVmLI1sBzCTbqVSHe8Mpx7IlF6vG0K54SdSy05+gzFeL21LKHmxW
rfk1LUHDatcJdmuZKtBvkVUsdnOH5S9820r6aGjpc7xSijMZ2v2/Kh894QZA
8iXekHwJI5IvEZr0auq64jB+Z/Wmje7pATNzc3fbL+4gFp3PwczaheMrjn1Y
4EX/rnkvKsukJMD+ql2WMfR4/NHGxyMtrz7j8TSdieOCIbCe+I72/+U7etKg
1UjyzBhK8Rc3Mpi14OCdT+c/z4QCbb1ThhE7fR3dECmmk9AHJ9sWSD5NywOh
JxmBX+/QUEOzaX1qfz7uj1t1vyUKYU0VdeWG2UGsKMk+b1vVB9bbn5bxyuWB
673a0FkGCnoI8inE1vTBjd4HBe/Dc4F/UcbKAwfG8PkyHc1bYS0g7Mm+Y09S
/B+f0gfEp1SP+JSuvS6XNG5LRe5rV1W93OohcEzZxn5tPOyb0mHaQp+f58dv
B2VIfYQPPbLlRpNVwFCs3XN9kIrKaQwpZfkVKJFxqrwxphDqj7zwbaLHg16h
F2SOr64CTS/7dd82ucAjz291roP9WMvdZz2gMgjff7iE+/i8Bb9V95+uchvA
9dq/JtRcB1B8fmOwj24cOJiLBUc50PBCxBb/ew6I7ucPOI1UZYFusYRJn0UL
mEWKx/x4MIrL2fLvYUAVSBHuRbgk62+u8/KITm3nIKaKci9eq9iPt6lOPeyz
DuBW424rxpOGq666UQeqaGhUPzOdmxsPhWQ/zZvsp3mT/TSNcZMbr9w+Q0wO
j/sBg1Go0GrZZ8paDlyLPlzzzRvF3sXP148ytuFNJeR8vjoQNInfJpX4bcYS
v82LrEPdnNdGUbBt+9Pih+2o+z6z5QRnIJyLvnXPbISGFpo7llOrAg/U7REe
qOVMhKily38U14/h0vz8/W7vm8Df9VHkvsmkP36bl4jfphnx27ybzRawvI2K
rFHHz66Uq4XSbKPaGNYkWEXylEJInlI1yVNiMWo6pFhGxYjrP2/2GNRBVrrf
1GYnN+gIXLtpZcgAdj4O1kzzHgCR5PhL0WIOkLwkfabdmP49dxeVHr1ThYGl
tw6p+34ET62LDb/yh/D2pRZR8a892Gtcv/hliz94CIselEQqvBZZZnp6bx0G
+pw8arkmAR4R/lD0N39JuPaq5cteTQyi7vBqoZF9/dio6mYRdMsNjELLRK7N
D2GFRFHZpFcPCCaES5Yah8HazcFu57opqDSvaNGzsg/qNMefNGeFwaEy9kqr
tEF8mVfZqXmnHyQY+dcc7QmDdxIfPHuU+nHg4OAPbB9EixeVbOe0ncGpnsU7
xY2GYwZ5j4qK6Dpad+VJ+/FciDd+r7XhLRUt9zsdqFEpwrBT7erTW2tBkCe8
+loMFTV2+TdGlBXh1J0hm5uU6j91qbmkLpWN1KUen91309GnD1feqvSxfEKP
r2U/3rZoeQNjz6y7UgV6kOl9eIvJxWEQnio+Xhz/CgTEZNdcC6Xhbm7GqTPs
2VB4SkngkEcGZMZwHvI61ofsK84+cg6moPKutwYW+YlQe32qk1loEHkYWb5d
WT0Ao5+T24PDXaGScH7ChwkXWemVc+ByH5b3bDrfR9fDKVrTTxZR4mF5z/m7
1W/6sE6IkqX6gIJFo9bJGw/Fg/DSstOOVZ/x/YVvB2PYx+CqpSp1mYoHiBEe
Rvglwv+N631IXF9N4nqlOBsn6coxzLxZ0mV8+BNKlEsbHvzpB3qLypSE74/g
o/BTJ8r1u/DJxjUmz3w9oaOBcbvw82EUre7ZpzvRjVPVVIn6CA+oCOxa/0Rw
GBvEFRbeN+hBnatOYQrWHpBD1kdRsj6qkfUxkKyDs2Qd5CHroOM+s1XC/sMY
/l5W5ERWNw6eXPJwyagv8NrvuitS04YBR+a7FrwdRQ8+xqV7PoZCk1Ryvb1g
N257t8Mx7tcwKokvnDv3LggWT/+oHnlXgzPjq5u+L6Sh1ZTfqg/J0fBaT3vL
12cUvCey+e1Trj7oobo9/cJTAOOZYRVTzhTkmk0R3cXSB6HbH7+/cTgfPKIc
xjb8oOEZo3q7r+8CMLs8kHd69s0ffs34Nz9W8ZtfJXmJyiQv8QDJS3xYuJJv
408ashZuf7qvwhvdP65d3t1rC3YqGgJrQ6jIVfushM+uAO5X5ZrvHPwAzwh/
UfebZxD+bx6jBclj7CF5jP9e/5Rcn/vX9Wbk+nZy/d+6MZ/oRlmSLzFL8iWc
SL7E9YF5Ssa9EYyXVVZTLWlHB9XA9+VjleBYbOAR6TSCJ1LM5/SS25F/P3t4
++GKP3VhaaQu7AOpCxOun+csM+hHOMbRQCkYBKsHRvflat7Bd+YqV03pXhyY
ZJh/5zwEygY1U/YHrIC7v1qYs52G1Hzbr0nMIThzszBBXSsFUhefjbZhpOK6
KqZP2wSbYFbO/ZtnuzckEb6N8CnCx7abjVgcbMP3DkuvvAobxSNq3gHxQrEg
3d+t1yA+gk4+Mgr2n7pgl21UgstzD9hDuA/hOwg/GXvlWnR3Dy4yZhzprR8C
WUmbDfpinqBCOCPhUoRbrmKDwk/tKMVVKN4rO4qFF5J+nWaIA634u0KxliO4
baRpfeOJLuSPfagqNOYL1fsjfqTeGMLvY5pMwfd60eGSycNBqgeY5UQuSMuj
4FysoMk1hT504mjmYnBwB8awj88WmQ9gVELv58zsAVzj+qB4t60LPGNYMaPc
34/MGg9FJ1QHUcZ0KvLnJ2cI/ObxKGtnFf4szOxjEKehScKzdKMbgWBA+Pxf
/McByStOa+swKS/S5XsFFbYfr+XnLoyE61GRF0oufMLwsLjH5XljUBT48FPv
gwjIeBTxrmbcAepM9Zjrxmkwx+qtKvQzBuRkjHPcZmlYUsKsutvXCympZ8wM
GL0gyPNcTBJ9HK0LFXx/pNcN585FtXxf4AFBxGfAhPgMpBOfgbEftUr2RlSs
vX1M0epHIcb9Uii9M18LcyQPcAvJ92skeYD/+g+sJv4DQ8R/QHfnN8vS5jE0
VEeBq0yf4O2VkeOrWHzgBuGPCLckPPPZwkxe1RFkqVZW5g/ugqx67Te7Z90h
nXAOwjMIt8+PKanaT4+rrWytmld14C2hJcdki71AKvvyxGrlYTzhNZrxaVcP
XlJ5FaT+zgP6VhoIBzD2oR+TaoHZFwoKXDE54rIvAO4672++ZUnBxvQXjtP0
9VTpneKvhfH50G1+csSllYa03TeXcbqmgarES0ONDS6QfSH1RnYzDa0L+URW
+KfD2OfEduVNTnCX1G8akvrNL8RvTWNcs1lRewSDEg9Wuua2o47Losu866vB
j+TPLCF5NadIXk3WX3Wda0ld5z6NjqNdJ2l4qDLw4FOtCrDvac+qOB0Aewi/
TrgN4clknPKRcTpDxulacdvzqbsG0HahEI8s2yD6qTdnswq5wLdR6cRes270
SLV118gdBvfaavX7PO9ho49XhyEtDg187mXx9tKgSr37Z0JaNISX8ap5fqVi
qvibjIKZIhxq3bfS3L0Mxs/XC51fQZ8/X96TlutugK3mZ58uulYAqm9PHjTb
TY93jE/kyBQVYdDtj02RioWwWfLr5il3Kg4pGa36GFkPnZ6Bc2FBfiBAeBfh
/YTzE95HeA/h8UofGsxLR1Hkzv0OU1orKEbXF4vXekIi4byEKxOeQPgWwk8T
nkn2MQ6SfYwkso8RZdX7naLUh9SWKRZ9bwqKD4mum09Kgod/7UskkH2JRfOp
0zwCYygfvx/UtD7jyAofM3eKDygLvs1NPjyCa5/Ulfqkd+Firg/rY057wmjy
ES1z5i7sk4wOrokewTOn7eYcyoKBx+VGye3lffBKRitObHgQhqJuFV/dUgVM
OmXVVHEKsrq8vZI90oc8pq8cos94w/2mDSzp7D2Ie0SempwdhqaaC+1fSxJA
hznY196QPo7qxwtFZbrA+PAzviGzVFBJ7pCHRb34c83UYd2QIYj2Gze8uDwB
5prqPYt1KHg6KmjxKC89zjq4comGRiEUJMwXStPfo95+FoqYRSHM5BazR3gU
wUbuclP7XAqG10Y/4uvphaHgbR/mduRBUmnwFsnlo8hmquLz2qMNtQ1vBioE
lUDi2Lor+/ho6Ds1K7OQvwhUDOjzY0HxH+5F+EnCGe4KV3kljWL7x8DkVzGf
0WaV0o/PPQWgZ2Ehk3eNrhtPuVV6xRfAnpXVhZdv50H+e5uyj6o03G4TurjC
oBCWNIQHSdzJhwLCBQlnJPxKyqW7Gm/o74tj8uic9ieMmjNd/nQVwoboFww7
h0eQ6amz+ae17RisLVTZwVH6Z5zGk3HKS8bpkWDNq0U2o/ji3K9t6sdbUSMu
Xtn2cCFMkbpsLlKX7UrqshOrmzTNPGh40P15lEFFIUxG92e3YSAkEc5L+Azh
/16/k/ApwkuvSS66UUUfF1bmfrcP10HElxM7jdf6QQXhtYQnEl5OeAvhMYQ3
k30qJrJPJUv2qSxXbjGQO9qGnk/29j4LGcWoV21Mdtmx8LLl9IlbL4ZR//o5
C8Gxblw4I5NycZ835Bdxzuf6DuLl4xe/bXHtx2E/ji7rFldg0k4WMX/wEQ2F
6p8yHaXCaeFLThGzESDns4e6cPsIiNA6M35e6YIR60O9Q6l5wMdTwJ7QQ8On
c+6Sy0LjMS73W35rSBQYpNuEPxmlIfeqNXrShuHIxszCXnk38k8d0AipAzpC
6oAcvb8+ar05iAWmcp7xNf3AKCLjN5ZlDzdJvJxE4mUjEi//XT8SQepHOhOE
Gw1iaKhME587nYd440THrWDTBFhUZCD9s4KGVUWx3LYBadg2Kbm5cjIebEld
SRCpK1EhdSXnL1Xu2z05iNnvv99cItkPD77PqjtkOMHWIAmrpnS6npyuebG4
swiXhbuILqGvFzUkruEjcc0IiWvauOITrlzow3dn5hzn6POSudaZH0t3JMDi
mWszYS59yPIoz5yqT0EdVV6fdNZ4ELEwz9EaH0OZI4tvO5g34Y031q+lk/3/
Kw/2NMmDPUb4COFHCP9bx9oRHat1wftWrv8ILrx5K1s3pB1v3bg6mx5fDpJE
77kTvSdG9B6X5Im1ZjHtKD1YlhV8fBTlnYfvyBvEAvPtveLPuDrx2K++Rwf7
RlD/8lK3xa/iYYMu//3qqDE8Hz25yqL5E5qH1lXL6gbDwSbedQeqR9CLwjDn
EtiJ69KYPql2+cFrtp/P41cOof/nhjLDjl5U37KKnXe3BwDFQuPBLxoqqs9/
P1VujV2cc4q1DG5/uBbhfYTv3LKoYGSWiqrLjoCrSjEubFvHxzVeCs/cDVQX
S9EwULNnkX5bEd5RLKzSzy4A+b/8l4SI/9KbZoF1Ppw0NBB4qJQ/VA13x5cm
ODQEgBXhLwg3/Is/+Iv/q6OMiY6yIjoqg+glNqKXMoleMmvM+LhAvwcj+eYv
mKwehudTi/k5tieA7/NDMktWDWHlh7X7r7zphVLH2Xr1yBzofeFwqkCahmbe
L2xyJgshOOZukcGbQii8y8CjYEDDsvTRzwFmBeBfblDyhpoLPlnCzaF1NMw4
7NK8ui8TKu72fvLb7fCHRxHeSziFq/J4IPsoblXsZC3HNhy/O3tsGV8JvBIv
zwzIGcWMW9++xbp+RkuPll0C9wvg61++FnZk/vzXn/DIht8+hALEh/Bfvp7w
rYQXv3966x//Luq6/Hu6YjngeN1z22qt4D9cmPM3f/cXZyXcjvC9RHepEt31
juiu4xuXOg8+6ELWyyfLJXVGwEZbMvzVzffA8HZYKil2FNaYuGyONW0GNUYV
9qaAKmix+c1rCD9P+N++XqNEV6fu9Z/qWDeM8gqfghTDulF2f2PJ+Zcl0DI5
Rgti6EPm8PCbXkH0dbuwRj9LPw9oEiZ3gGcAHyodS+/YOIj+c0+Ebdxd4Pmd
j2ZV9O+828tY6Ve8A8Q4/qzS7HKAzQsGGp7M0b/n3C/h688+B37X4kfyd53+
8HzCeQmX2C+y7GkWDaOP7BM59SAPFtsnVymyWQFr7gadlAIa2sQ3vJxei7D3
Ose51I/Wf7gH4eyE/13vqUnqPdNyulbZ0df9dfbveW5KtuGrR+vln7AEwk/j
iBEQGkP/ItP40yc+Y5+Rj/SASBB8e3llZrib/v37Wr+UUu3E4o/eUNgfCG/3
xGXkN9Kw8LxLbTfTMzzzUtCslpIBO7mWnmIZHkNNQac428gmjExyS2f44AWt
RR2LKCz076fu2mqd8+V4PPH4dM/uAqh2Fb43U09DhciQPMtIHRh4u0J4sDIT
FDRfmM/10TB9gmGvqa4j7C3lO7L8dDJ8oA7t6GihovWpteadn4tQ/+b96ief
KuBy1NYLUh9oWH0UlgsLPIJ5U/XB861Z8MhLNP9iJw0fefCvKTb0AQNvU6WV
iSmgG1BjYky/f+PCHXNL5JJB/vD0aJFOPPTEP2uhVdLwTlq6D/er2/Bwp0rG
lepsaHrDHLGfHtd7BIRGtbI4g+Oz/MAtq9JA143lYgidRxV9jM43iwFVrwDh
3p2JECJu0ViQQJ+XZg39MsTy4EL/h2OBfNFQOfl4aE05DffdqGlMylWA3axj
cnfcc0Ct7JWjBz0+2hv2aiQmyBgWzszoKK1Ohyn9HwuCB+njQuLM8IN4Gwhi
+XqrxygJJNg2aN8ao+Guy0Wrz3L5wj39rIW7IQ64fXzWDBfT1xEhhm6mcX7c
oS2Sfs8wF9ZUJU7kt9Cfw9hZ1q/Rl3GloQr1S1I6MLOWxT/rp6G7mmxSxCtX
fLDrc7BnexKEMHEnmHTRUKex+hBLVhwOOq5dL5gWB60ylZyZTTQ02r3NFbm1
QKigsbzrfQZct0uc7/gyjGz9l3wv7+/GBOfItTZCnrBE4qDz/gYa+l88+eVi
kClwOXMPng7NhDyWyxf++bt+XQt1Hy50guS7e5dyr0kGPt22hRJvqEjdJbdo
DU8Dbh39vvs5zRmMN7fIQg19HVmy445bxmto9B0JU2TNBhEl/WWBbfT56oRP
R/aDEJh+sUB80jgFqmf639+nz5M5dfR3K5UKuTo1tldt4kDQky/mOv356//y
T9n25Dms0dCS8bufAx1r3X5a0ePQ6493s7RzBIO2elGpk2QaPBeI5jSlP8/k
Xau8eOvS4ehnh8kzVQlAMfnMb6pJw0TJDw82yZfBke77d44cjgTZ5be2RdCv
FxgOExdeugXEZKv2aL7MhRlx0e+N//hWGZuxn7F6CyNGd39hYTpIjp+dT6bf
/wpWkaihdZFgzDToE/oxCYpfJW0wS6OvX4pm9SM7ciFHU9WrRyoO1K+wbpIv
pOGmDQ6HzO7exSpvYdULXAgNa84FKdPfi4j90x3Jym9Q9aLE9jGfDBA6oXXv
Vi8NOyyvqGi6OmDUIQnP+elkiFa4E0Khv5eJgK9rFrp74ASDXpZRdQb4FagX
FtP5lcRrcuE68XgKczZP9ScD9+lXkj8mqOisv2vu0dZaNNpuMSk5EQDDWnrT
XxT68IdrSnZGOAVXfblfxKGZCI9jzLFOmIbfR2+qpwRXofzsDXsqdwiYE1+I
F8QX4gPxhXi8+WT68qc0XCtev+CDbwlmcD9fN14fCC8XWU5G0OepTz6bsPv9
KPJYFhSXzcZAFTVVzWIrDRvMvM5+1anC+AEDtULzSHjisvsH8wEK8iVr7ecJ
6ANWC//jsrcy4Xm7a3Ez+xA+fNxoVJzRCwMsTp5MuSmwT7PbjTOEioxVn7er
i9VBQdWqM997M8HNmJ3zQdkwfjn0qeXOxW6QMllzfdY1Efi6ddWP059n+vUX
tzl2JKPKkhc3dkX7gA734Y3Rh2ko35J8ujSjCJumdihbWeXDlOWZ2QOm9Phu
h/B6P1F6fFS7+9gn/zSo+S7xamsHDU37lIqmTJNgZ6PljO7JCJD5KPDSnD5v
bFnLu+K4eR5aScbzyhz+jx/dE+KzoU58Np6yr4ouYRnGVOd1cRkqPWB+Slzm
eX8GUFalhwpkjeBXq1dUfaNOUMqMyTTUTIU+okOeEx3i85cOySU6xInoEFfG
/s02P2jYuPGLcUODDZ5Zv1fPhdEfpLnaCoRpo6jYYPZtVV8Lnttd8qbXOh8K
0xS6F+aPYuTX2LCfV1sxfAPXCi6eDGhNeziWT6FiPXd0COVkLbxL9Bzm6AqH
aqehAwOTNEyyKJo0jLYBjwtNWtdFoiHXturq/bF/+t5JP1LtVkJFzybB9r0J
sFfTy/9OJH3cnXEp/XaH/nwUHO2OFsVDCf/2owm19HGxYr3pZMk7LJ1rZ74h
kwW3shTXO94fw6d7R8djZpvxTdyNK485XODGX/WDkiRv05nUD9aS+sEZUj+4
ZHjjCSYVKq7J1H5mfusjcuc8vNo56wpyH67winSNYCZVgon5SidSxoQvGtr5
03/f737Z6qRf9n7SL/v/Oh+30FAcD1WmoZXHiZ3eDeXoyWK3rTwnBN6Sfspn
SD/lINJPeTnpk5tE+uRGkj652v1Wu/O1KPj9qH2UJU8fzB5kb5VuLASpTQvZ
/dnp88C3PafuddfAQ3vunsFwp//qe5hN+h7GszZeS8jvx5drih3Vrg2ifXae
+l77WAj/+eiNQtZHLJazeXdvPxXF7zIpZvtGgC7JBxAi+QB8JB+A1+bDBI8r
Fesm9/m6VtTD67X1XFoMrsD4+Xc/O1bSz+4u6Wf3ty8rBzn/OkD6gr0kfcEy
SF+wf+sZa0kfKzbSx+rv/fxGsp+/ItdO6nZXB05MafmvnabHVesu6y5bGw9v
SP+mPNK/6QLp3/Sl/LH44SN5WF6nefpkAg00n6lvqfgUBf4vfvc/2k76H10j
/Y8oHdX63WUjeEzBeOjj5Xa82Wf8hZu/DLzI+dE8OT9aQc6P/vWtTSW+ta+I
b+2/PrGsxCf2JPGJtSf1s1dI/awZqZ/9tey3D54c8cHLIT54X4jvXA/xnUsj
vnP1F16rRi2i4sBGS3OH2UZUfpHoEhH9H3/yL8SffAfR+SFkf/sZ2d8uIvvb
77WseQ4souDlb6Z8q0P7AKppp1qFC0Br42C7MV3P7OHZlrC3IxKPKHMtMFqV
DAcie7+f/8fv97qi5c+STNxrd9xqu2csbJYcqW19QMMzDxhc9LJKcNnqBZuX
ng0DocVhLR6JVLwsKGl883sdqvFxugny+EHVX3Ves6TO6/1rc++TOkMo1ndq
V8CJXtBcrM9jnZwMc3wK4R85R/DHM+Yb+h1dYOvN4i4qkwhXjxmqF9Po63vr
UOtEgzeKNnosvsYRA9oP5GLj6fPS4C63c/YWIdjCdYnNJDcEruiX5TDSdcvK
9IRd3qFJGNYafYerw+tP3ZY+qdv6QOq2Is4N1X+Lo+IGXTtJ8claMLJXWhY6
lAEmt/IOKNLX2fxODQ7tJ+nAnyljf0EzFMZIPZQRqYe6Qeqh0jZq9TTQ9Wp5
lrrmvNEZVDT7WjU5ngFbjjY+a+imIT+j9KetHJ64OkONR5Q1BQzCO+QufaLh
am4Rla+iSeh8tquzuTAe2PkV1ZbY0+Ovp9nqMYJF2L8uQnIXXyS8bqpZ/8+5
W0eKkx2/Uh3eKhIN/+ERDMf5RufNvo+irlrm4en1rZidFPqU750PiLYm2/vS
n0PGRTGxtaI2eHZbKpuJQjLAQZ0PF+l6NXtE4pi2/3tkm+BJM+eOg8npcy2G
pTS88VR76c6cLNw02TFouDAc/FnZqDFKNDyd1rnbSKwCy3+xWCnT/GEBqTOK
JXVGm0idUZHKTPgR7WF0a2EOPfCpG/a7Oy+VKUuHkmvmRfULRvGl2ul3t551
gGa3SOXCqRTQZNbaUU1/v60hvFm7LFzhQWkfQ+XZWGivNrKc+Epfd8y2xC4s
d4YTRh1mHBOhcPv1/W4Z+nyyLClgxRP515hWxpnBLOT7p25ontQNyZK6IXhS
JFp4n4ZOIlYlb9cWgMGdO2ciF+TC7tcLdn0PoeHkxMbWo3wFICjntbp0YzgM
kHqcSVKPo0XqcfSq05fdoutDib2xO96NmWN70GuNS4syYPzBvBaVzlcUpbkq
+B+CvVhKK/6WDl0vRl4tpz9nXjFth5ooB4gPL6n7/CoJKJO3+xvo713i5z6e
2+MmkPrN4by7XAZsX8ViZE7/TgqP9iQmVweCyr50NZZdycDb5iw0QdfJc9ln
Lq1cmgpcKm9q2SzjYKV4qcQlup7clHhmUXWiOSzavGxge3QGjJ2fiw6gx1Or
Z46l220NBOHuk4K7lqaA572pvD7698mRz7ZJ3SoJIr+wCbPS17UEy20aH4Jo
OH4ChoyZCkAqe0VnybYo6CG6SH7nb13U9eG3LrLc2SVpSP89e5KoA6MaT0Hk
c9DLdUyZYLJ/2jKSfv8bOS6sf3DCHiJzw670v0+BwcXHXtVTaIgKUZT3Xd7A
1Hmod5yWAHatFstdhmlIlXllOLQzDLbJOtgJ+MTA85B+vlP059PCcvnBxOlU
SHacSBoOfg9IzimkyTlFKjmnCObaFH9tvh+7jjA2VkgPwoolehK3NNxAJGlA
+Cj9PqcuXSuM9r8Eqw49VLm8IRO23z31Sr6HhlzbDmSFnrLAIA2vMR/6fSbM
FB6IHaD/3ZvW42nvgrDwYTGTUXMC9Mi8/HmFfj99oYk71JqTUXSPhwrKxQA3
qQtoJ3UBiqQu4N/4y4DEXwIk/mrJPu7PQ+cfNV/XZxwwgy2iWxN/FWT8ibNc
SZyVQOKs/p1v2A59pKF39cG9LgpvQc12gyVNPBN8K9mrgK5Ls9XB03hfKKSL
LVnJGpb8J57KJfFUBomnCl8wReygx+9jPgEySw6/BfXz/hv06jNhxkOt6wI9
3mwdv7Zp4/73kG4TsOwfv6ypKL27fUhDRguT8uM/MqHMYFO/PP9/4ikk8ZQc
iafYv2feaaPrurjSGbc9fCZQNJVRNHkpC7aekGxnosdN/KERMT9N/GB83Urr
Sxmp0B5lxRTwzzzJtqd89cZEWHvIcb1TRCIUK295viWChmz5t4QyfuTBWV6b
RBuZWPhMdOlnokstiS6dJzo2bvq3ji0hOpYvZ9HVq/T7CXnt8FgizhBTX6Rq
q73LgqDjzytF6M+NR/FhafvbR+ieqi60QTwNfuz2vyVO/z6tezeFpK1+jIVR
+z/o0eN355+LDmdRaRhf0eW9W8wSAraqC17Sige7AbNe+3fDKCC1roqzpRuU
RPsL9aI9/ujbBUTfVhF9a1AvK2xF/35evVM8nFQQhmsOK5gm0J/Dwxk772L6
fGtQ1c5VczINRe86Bvt8SITTxEcon/gIeRIfIUfi2+NNfHtmiW8Pv2mVoNpZ
Gpa1TLfK0+NeHR+O/bSXZX/6dNuSPt3vSZ/ub6Qfd89f/bjZltucYmMYQOPq
lbMaQoO4RFvvtl937B8fCVniIzFLfCRqSJ/lG6TP8hLSZ9mL9Ls/Q/rdj5J+
94x/7W/rkf3teeJvuZT4W/oSf8tFxAeJh/ggfSI+SNu0qPrziTRU8OVQXnYL
YffXw5w4EfvH78iK+B2lEb+j2rztW+x7qSg8Hje2lVKEqyKHBbZwVvyXT5Ej
8SlawRy4aI7+Hb7073+0cDgXpyPO2PSqJgNfKEvfiiwqTtsv+7Ukow5cjV4W
bigIgLTl98LaZcbwlqbgfMO3FrBv7e15sND9v+KCcBIX/Fs3nUvqpo1J3fRI
ffgZcf0R1C6+Ex90qAuV3qazmV1OBVuBZboCqaNoqc59+3JHK5beZZKyzU4E
nla+52XeY2h8NJG9eVcz8BecizBp8IfqlrHandIjWNqZUcVe1QXiO0yLmdXc
ofZ8TdLEaho2b9QSyWerQYmC/DXb3YL/nHsqkXNPHXLu+a9vyWniW5JCfEtc
A6u2HqN/zxkjd9arqiSAvbwYt1hyIsQSf5LvL3/7kzBW/PYn+Ur6ZO0jfbLS
SZ8sCasKmaCWEbwze7n0pnQ77hwponl7lMJ3c+/KtxlULJfYdCWhtxYVQiu2
5NmngffDNu7Bm1Q8NblJilLQALlyPDLdlUHwsanOJKRmFLUCDItc6lqBt+K+
fbOiFywj8Vciib8SSPylYzZb7TY0gMs0UFRJZACZF++J8ZdOhXQBz3dKGkO4
XVOMw1StF2/x3lKU4U8BR3t/WUv3MZR5/HbKBZrBL+HwIrmbQTC+w77B5MEI
1gtwTtXodUEvn7jt6afeEBK628v9OxUHxdQDbC0/YHk3T8v5mfdgeoBJZNvn
MVRgVEk6ONyEbEtv5liyhoA+8cXdRnxxC4kvbn3xE64bmyho8v/KOvefJq8A
DEPEIrrIiJtQuWgtODNBBIsmE3IQEbk5mApmwLgYQUU3RIxhUVgElG0iVopW
BEYF5KpVLIPVKYdLhww6nCgzcgkV2pUWabkFy9C4Jn1LsvkXfOkv33fO2+d9
3vBNNWWNcmLKeRMjYD9c2Nf+4X/72kZP6QN4ShPgKd25danDkhItHZja8VN/
fSv10NwMrHpZSXxw/92D+6877r/pw/ylB/Tn6mHevbemN6+QLq/Mwv6U2oW+
bR36tovQt23GPcsR96xo3LOM/vw0+PPvw5/f7mxO9qkV1HLr9EFFiJJ+v/L1
2jNJXOICnw8HPh93+HzKv9vjH+c2rn9uR1OXax/t9Em2uVeWR1zBT9rYGvhJ
DfjJCfQre9GvLES/cpWVNJX1s4wmz9upGnzGCNfk9aCprpzowDHmgmNUg2N8
58GI+MBSSldl371du0ZLv4z+ImkyRrTQz92Cfq4T+rkWvP/25tLRm6vZtD+g
aV5JNxInN+5bOdkZ9st+kbKBDAkvnapZqaHdJoITy5p7aUDZtXK/nHzCBJ/W
2Gng0+wSDXzaCPpoLPTRjqOPZsEKSBWvHSEt8aLdkSkq6vWhoz03UfxefmL0
L61hXVhbVzxOd/RECiNkz0huSX+eS1nHgtfrCrxeVvB6Gfsmt9A3qUDfpAj9
kTvoj7ShP5IPb4wzvDGb4Y2xRS8jBb2MDPQy3IXqyAL9+f/6vEeojeYWeS5Z
f33Ippgsz2mwDtZ/33vP5V0NshggKxKX56bmFBDP8MzAj8UjlH1knV+Rm4p2
sJn+ir/03yNJyMxO/XmeIaiQrXreSsb2S5rsNxSQsdMmrSFPNdSt0mr3w4+e
kNrMo+HVPxYTa/D8s+D5H4HnV/xj1uJgNkpbfHNzHgnlROXtpfEtbyHx4Oov
gKs/Aq7+cvbsWLBaQ2Or/a9Wn/mTVAami27vvUwOY28lBXsrL7C30seuYuZa
y2nlJ7Zd8d2j5PGv1hs6n9SRaPDkOvDk+eDJD4EDTwMHngUOfFKjZi/5WkPj
eH8whL8/JROK1b+p+DzyGr73OfjeveF7ZyDPWYw85xTyHDv0qe+iTy1DnzqP
eay3Sv97HYKkpVLHXmoSd3Ki4pyE5CKPKkUe1YQ8yriTwsdOiiV2UryRC6Uh
F3qAXCgUPO0UeNoT4GmNedEM8iIG8iK5Kf+xslZNU/14QkuPl7R5dK6qxLeZ
rIOnfRc87avhaT+/xT8n/YWC1k+pZBs9lbSoJ3TbcVpPGMUGvusY+K528F3e
WwKTtKpx6l7X59Ic+4w8i8mcKGRLCBM7zjrsOMdhx1nbUn3xs1tKejJ/ymlT
loLyo0qy28UFZMdXQ/ERDvr37dCK4/bdbaS2T3IoNrSdyODFMg8yeLHC4MXa
O8Ti3lgmp9uc7ULMKkdpj21CDyehibhjx7YEO7bmHMOOrdHrwllh8Lrw4XUx
+igs4KPIgI9C3GPK3a0/53NafRXbC0U0pzs4Q3dBSBw/X7zxxX0VnT7d8OrV
ohHqHFV8IPEdjwTJPx2YPqul/Lk+7mYvCT10nz07uEz0nt81C37XJHjzJuHN
48Cbdxb7reex35qG/db18Ckdhk/JBj6lbOR7bcj39iHf2z67KIq5TUsDK1ht
M5e6iODA0zGO6w0y4fmNh/fFYRocdkIa/kZFqqJZ3VK7uoV8zBz/g29APiYQ
BDi9eaylR5O9/m4cEJNdmSsDXBrKSAVys2+Rm3UiN4s9eD3lnJWaFkekefoM
vqTppXee6xwk5F91m8dq
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{323.4386526623251, 246.51011016789792`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0., 0.9999999285714286}, {0., 0.9999999285714286}, {0., 35.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.3048642479157094, -3.0711149572375493`, 1.3875556600636139`},
  ViewVertical->{-0.04050687670580444, 0.40805465308798106`, 
   0.9120584372904997}]], "Output",
 CellChangeTimes->{3.8891753280614967`*^9, 3.889176406426379*^9, 
  3.889176755854446*^9, 3.889176866444949*^9, 3.889177085236947*^9, 
  3.889177252136608*^9, 3.889177600478941*^9, 3.889178786849003*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"fb6dc7dc-7137-416c-a6d8-2cda0ccc649a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"NInt", "[", 
     RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
      RowBox[{"\[Sigma]", "->", "Null"}], ",", 
      RowBox[{"sampleID", "->", "1"}], ",", 
      RowBox[{"sectorID", "->", "Null"}], ",", 
      RowBox[{"useIntegrand", "->", "True"}], ",", 
      RowBox[{"IncludeMCFactor", "->", "True"}]}], "]"}], 
    "\[IndentingNewLine]", "+", 
    RowBox[{"NInt", "[", 
     RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
      RowBox[{"\[Sigma]", "->", "Null"}], ",", 
      RowBox[{"sampleID", "->", "2"}], ",", 
      RowBox[{"sectorID", "->", "Null"}], ",", 
      RowBox[{"useIntegrand", "->", "True"}], ",", 
      RowBox[{"IncludeMCFactor", "->", "True"}]}], "]"}], 
    "\[IndentingNewLine]", "+", 
    RowBox[{"NInt", "[", 
     RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
      RowBox[{"\[Sigma]", "->", "Null"}], ",", 
      RowBox[{"sampleID", "->", "3"}], ",", 
      RowBox[{"sectorID", "->", "Null"}], ",", 
      RowBox[{"useIntegrand", "->", "True"}], ",", 
      RowBox[{"IncludeMCFactor", "->", "True"}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "35."}], "}"}]}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.889178608933404*^9, 3.889178620604865*^9}, {
  3.8891786918578863`*^9, 3.889178699913265*^9}, {3.889178772026923*^9, 
  3.8891787816720543`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"1b9ee777-5f74-4b60-883b-7b8ef1ef2835"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJyEnXlczs33/5Nk30r7Xlf7viLquqRSyb5EQiR7ouzZlV0pS/Y1yZJdWSNb
JETKEqGyh2Qt0u++P995ncP1eNyP3/3P9bifpnmf95kzZ86cmfeM0fDI3uGK
CgoKr5sqKNT/53fHgP2ZS2yiPfFbPvtV7otfLWVj7Tw3mPoflYLf6d7syT6H
1rIDrx/WSfwvEq8+0FDj3QYVmeR0G+fMiBvEH78+O++TbxvZrSvmxyT+d4mn
1HR1ueOrLltmdyUvoriIeIDqZOc1aZoy3+ThLzMiirl8+elL06J0ZPUU/v3v
GZf/4t98zjJ92dDjt1ZI/EuJT+1ncXTENUPZudFbtPyTyolHeGV+Xl1pJNPR
G58aUfyS+PDDFf5nIo1lM+64OydJ3hDPaGUSPqqesex+XOMLGRHviHfL8Z8x
fLGhzNX9QWBxxnviJ6qrg0rrdGWJH1If1tV9JH4yd96qn0ZaMvw/9Bo75v6N
P/WM31Ze6+LGyVjP4F7mGUMU7rCewYffXBpfc4P1DF6d577YIUSD9Axu+XDb
4tdXtEnP4E2+7jo5eqoB6Rnc6GhLd5/fxqRncJWYKVanX5mRnsF/He31pIvU
kvQM/thqapnVTkvSM/jFyVZXrpwyJz2DeyxP8FX4bEx6Bnf5ZT4/8YUe6Rl8
+o2/9Qz9HfmemfennsFbPp9552EA6xm/fV/YdJ1QyXoGV+5VqbpPRY30DC7p
k/C9eQXrGXzyq4zhY8t1SM/gD3sc2LC1zJD0DJ4Z28LZJt2U9AxeVmJnqaRg
R3oGP22W8uuEtiPpGXxk13vBQYOdSM/g55SGHjJ0ciY9g4dMnRnWJsCU9Aze
uqtRlft0fdIz+Gs5PUNPGw6G3PxTz+D66tMDDANZz+CBZ7+8v/ya9Yzf4OrJ
hvUr2Z7BU8yShlkvZz2D2yX1St//g+2Zynd70mL+arZncNOGTjE9y9iewZXb
9erW6z7bM3inLZ90JnW1Jj2Dv/kQV3/zNVvSM3jq6ji/I1bWpGfwt2d+v2hR
bUJ6Bneslt3q58x6Bj8tp2foY/mHlL/0DH6jn2K+iy/rGfzNxMZvjlxlPYMH
7mgXl7CS9Yxfb2frwAX72T+Dz7N4tDzAWYv0DB6g4+/i6qpLega3aK/30uKo
AekZ/LzjFe8GWUakZ/BZUs2gc9NMSM/gR9v8VN7dW0J6Bv+9wil9frIJ6Rm8
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
DeZ8CLhS1/vPtX+zPsFTNYcuOXmE9Qk7OTynZn5eH9YneM+tY279jmd9glfs
fpeYZm8o82u4aUxxxnNpd5em0QoKF6Ql3WfPaqFgI0s9M+ZbXV0Z8fPfJx8L
SnOQXXhQuDmi+K1027gL45Mkd6TOHwxXzLpoTPVoePzcJvF/JI3NvLHlYbUu
lSfudrf9NhMDqr9g9/pTEcUlUvspx8YrTTIkjt95F+5WmAywoXqGSxq28k96
Lc1uOupKrJYJcfxKTpb53Pfg99JfmWKZJHkvddunb+bdSpfqB+8+tf+cZaf1
ZKgX/EH/Jx82rTCg+sHPfLLrV6lgIPvg5FFWV/dOGrK8U93JiP1SxYN5MxsH
Gsk0051N/JOeSc2Si49OKM6Qvp15y2PlQFOZU+626xkR/8wnt6St8E+6LN0/
b5vC0obO9FzwMQozIqp3uMhWzZnQvzjjDfEbrvaDrmU7EF8woex8ccZN6Von
j+Gl48xJnlqDhOqMiALppbfJRhIvQ5JnyqfrNv5Jj6VnKya0LF6qK8P/49/D
TtV/vfi2LtUD/WXd8kod7MvvNXWY4uGI4lLpHPMZmVqbTOi9oNcbtZNPuD9w
In5P7U7HJMkL6cwmfbeUW7Sn9wXXnt934hWdjvRe+Ds7/XppC60siaMdVM5Z
WnTbY0hy4t879bJsf8DfkMqjXX4mOr4uaW5KHPY8982wQw2e2pKdQM9bGgXb
rnCxkkE+8MDbpxeabXSUKU1st1Di/5L4xd8T9VtfcSL/D64QmP77wBpnei7i
4fdt+zsPCHGg56Ida+sN/dh7qoT4qSU2qgoKD6Q1Ng+WDg3Rk0Hv6EfOPms2
et5ljvbs1vLkvLgh+iQ/+LqPLfrnnWN7Bv+aP/Ra4AIDkhP9MW5dod3+AkMq
j/a/V1u7oDDSiMpD3gkhH1zXX5IQhz00OPntsqq/A/U7yDX2VdarrpttSU78
zhnbonkbiRNx6Du4abHxq9UOZFe07/h1t69Z49xI//i7ZvW+Oe3t5E76xN/p
dXVoZX7fmOQBH1s78H1xsRmVh30p5L/ce72+LukZfM33uw4NP7I/AW/n798h
8Ca3C/xGcr0Eg8r3uvReKJ+7J2vqsLXcXiifrjMtWjJBn/QJbuPYsEtmpAHV
H/iq6USJ/z/zwpXOBapNuR7wxGOrD4xYb0B8ZqfojIyIf+KLKfkvNxnyuIb6
+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
F25Jl7zqz3kSOv9sueST5XEdai/w71uqDTILeN8gnhu8NTR1UR2PUyj/0fe1
o1c9nrfid2G1+fE5xvy9Fe1L99ud8SCQ9QN/8FhtYZXaBNYDnWNTv6fzCHe2
N/Btx6LfRrlzvo72I+WtkdQz4Hwd+OAZCpvvHufxETxnWOWSqmyOB8DzElpp
hNTn/UWQc8LgHXq/zQ1JHsSHxhcXhicmcJ4W/NiKIScLK/n7F9rX4DzSLaAn
rxfAb+Vv3TVglDfbLbjx4Jc2XqPZbun9vi6Oyghi+4Q/S32sG+t9y5I45Hm2
5em4rWP53DmU/3RxX9OxDztQe8HPnZ5l/qntLG4X8rcFaRrPNmoSh3+zeNTt
R3Fn5vCrefM2bx8yjONJ8BUJ3jUX+mhTu4BXzV+/5+Bzzt+Ct0suWbb1Mufr
4Ce7HD9cvTCUv79GXDSyh2S1gQLbG/xnxYT6XX5+ZTnp3KbOs/V+bGI5wQ08
TJqXLuf8NnhqQaehZ6N5fg2+6ViM2jNTtjfw0/W9078O5+/iobetHuX5Ws/Y
Dun8DOedU6wf8vkDeK9Fex59+ZiqK8P74722B7t/t+2iR/kr+P9z5w/+bz8t
5IFfb71/TuTUMGN6Lni12aNRt9yMKW4E77joqs+/cSP0g/X0/sqPmnW1NqL9
qNgvFNJu9ONutjokP+33LJnWY9otPZIf+0YufVVdZ/tbn+qHvl90yb3kHMXf
M6I/jdijUetgz/WDa+bMKtv+jOvH+zV2Wn5+mRbv74Wdn10ekrn2lzbVA168
zHBvu4+sZ9hj8QWbVSu3cv0YH11GuG11G877xJB3Xfkp9L6nsYQ4nSc5q6vC
6REWFLdgnDL82CBm2EorsitwH+uVc3rcsCb5kQ/+MPtD3XBN1gN9P+3uqDAn
guVEPNVieVD9oCC2Tzw/yXfr4nVzrah+yFv+9Eaz5r5cP3j9+d93afXRp/pR
z1idhYl1NRzHQv+/e9etdFktIXtD3OGtc/lK9G9rqgd8c596i/U+cb+AXadN
a/z2X/tEe0D/krU7ddZsMqLnIr8X+DLe49BYe4pzMO6vMHt3x2+YI3GM70tz
O3WdedCJ9IN8YFUnNYOblzgOQT4w9vPUCd5GtlQPnutscjC/YBnvT0A9abLy
b5esnei9UD7x8Lph9+s5kH8Ab9wqJL7pAjuyB+wPsRgx8mW3Ws63oB8ZD14Q
+CzIhOJGjNfr1zW1aDvGkPJUmHc8jvaI0TqiQfMC+MUhadvf9rPUpPIYx2en
tWvbVlOTylN+d1ZMJ+VwTYrz8dtJ32dHxkxt4nTuyxedKMMO2tRekKfkpfPs
HgPYfuAPXqdfOf7pGo/LkHPVw0kDXt3juB3y3smup6aczutukNcm9kVYSmfm
eO614sFz9zTheTfknOiyVcMsmPOE0EOvq8tkbep4fzLG95GNNoS5PDKldqHx
feUAD82O3F74uzm666NGzbYkDrkkKpGJF5rxfkVab0wrXN75gwvpAXzPhtGy
rZ2caF0J76Ee2X690R7OPyO/8aR7vYYbrbVID7CXjLuy2ae2GlO7o/wWi0MH
gj6pU7ujv3pl765cOoPPB4P/2KbxuKp3LtsVxqlsC62Ngz9rkDzg6xr5fNtY
x3LC30yJ++J1MYnnieAZT4MPeS3Uof4FOZeuHVrTfAjPmzCOddCfZvOhAedt
aBwvDnm+ri/PyzDeNR2gmmcQwX4G77Vx/sCyla15/g6/NEgpqNG0MNYb5jsT
CzulK6/h9Rr4H72EI4/KmugRh//JqXBakWDCeRjw1OqwjIaPOd8C7lLy0Stj
MNsVeMo8NfPGP+ypfvyW98vps8mb+ynmEd6uER+eK3EeAO+R93NV4ZD1nCdB
ecULZ+vVTdYjjvJ+/dLTft7m/An4wXcjOji95e8F0H8rOz/dOymX8xuQ06yr
4q/9vobE0U+XJ3c46N6YOfpplxERuuUK7N/Qv37tqvmsepDzXfCj6XM21L19
xO2COLlN36WNwwpZD+D7L7kc3HuA8x7gUwLSV3hUcd4DvOevXsPDflrROUKw
T/+Zi9yz/NRk2JdJ+0bXvOoQe4DPcUIcsjj6lLHTUO5HsMdgmzkL6m1njnpW
9DrteWsIc8TPb6qqcntP5n6Hemysl/7svYP7Hcp/iI+5VtNfi/oL+PWnfS1W
n+f+gn60+va39Zlnud+BPw2d8HLiAR7H0S/uqyi2nLDUjuINtO9pn6jjZ55y
PAYemPyt8dRojsdgP3my2Ipe/8z7UA/836o1K33nvON66HuF3nZmB3ZxPXhv
9TiViD3evO+XvrNZnjR0doU91Y923PDaM7HLH3KCP0u3jRwSyfXjd9atJfWu
aXE8hnF8+3T/iJjzBsRpv+rZHwqJvhxfYRz88imkY9IhXscHHz5lRkD1Mi4P
v7duc9ninqe4PPGj26zHb+bvJRFvHGjrkFRvkAN990F+aEvnlEevNak8+ZMF
u3zf+PO5TPDn8Qu7lG6K5u+v8Xt76dE1YX14vABXGhWftD+a4wr4mW++OUnf
jmvS90r0Xcmn/WdydvM5XXQugurUz1lzuX/BzrX26PtE3lIju0Vc/fzQlGHm
nficH3A3N4P5+55zXEr+I7rpw3yZHtWDfn87bctupanWVA/45JHvD1xcw/Wg
P23Z9nmEQ1u2W4znhzf1MJurpiODHmEPs9Uld5600qXydJ6AR0OV8DptKg//
tPnoktJeGlwe8cmDF6ZH9zhy/bRvtP/ieUGJuqR/2FVyyeMlUVXcLuhH49ee
VHfbqSlDO+G9rjaWhU6cr076x3sPLJ1h3yib24W+27VcN/vGITWSE/48Qj8m
rNszfi/YYbhL4ykeZ3SoPOUNLlmX9nrD5SHPkOFqXYwyuTzicPerS24UdWNO
57FbHbPJ7cT6QT9dMblDeHAs6xPraGYb1Xrv6Mn1YHxTezAubLQ31wN78dty
cnX1Cj5nAPFGxaeK1V8VeJxCP5U6dO9y9BrrH885P8JsrmMf7l9434cLBo0u
U1MnefDvq+73eLPqF3/Hiv4X+tHzV84feqP16jV9Z/w+qUN5EsjTuWSI/14l
bZIfPGv3rzeLRmjJms2MbFZP4TDNc0dWbp9ko9lahrgH8VJk4ZJGm6QqxFH+
q+0Ei+LxKrJ1+0uGKihco/KjqjS1WqaqEkd59ciNZx83byOLFP4B5S9Mig1+
7qtGHOVtu5UuU2ujLlO9eVFXQeEelX9e/2efmdYaxOm88yOhiwt3acoyhV5Q
fltOnEbzQVrEUd7g2bPVjap0ZIO81zVWUHhM5WcvPbev/j0dWd3//nvK5cW9
EnefuPysq+Pzpva7FM6cNM5MliLiFdRjt7iPyZJUI+IovzL51geFuxayqRu2
fqqr4/0zE0qjG3zaYSnT7tfodV0d3+ux3FNd9m2pkaxC2A2dwxrRpd+vhoay
rFZRJXV1fK/HtnFKTq/n6hJH/cbqqpf0u+lRuyP+HK2k8SXQiNsdvPOICzaN
F3P7gu9qtCetwIfbkfL/d883CJmrTnoDPybuiYDewM/Pe7Wt7oYNyUnnOHV4
3yD6JsuJ/u5d8nvLWGOWE/xCktqVTfNZTv7uOPZmV9s2JA+4ibhPAfJQfsD3
bMTZ3tyO4AUluhdeWltRe4E/c+n1Qa2vLcmJ8a1m4OOkjnosJ7jRvpydSSNZ
TnDzj6ljf5Wqkj7B/d4eeb1ksxrZObj77WYjIrZqkD2DO7746nrlsxbZM7jS
toX7ClJ0SQ/gZuK+A+gBXGtovNWo+Wy3dB+OX+bdqFYmpAc6f1pJ2TReQSLz
E+Mp+MN89WDVrybUvuB76oZOPVCgS3qDfwswio5KV2e9gTd/+r3fkEDWG3jj
XQfc+u5kvYF3yKieVaLNeqP7ESTzLksy2T7Bs8V9BNADuGJFh5b7zPXpfcF/
D2wxynKWIcmPcfDjUocub1VYfvCo7NpkiTfLT+sdyw339lyjSvKAl4pz+yEP
eHmPlAtx/blfIK4Y5Peg6+Q/ngu+OuVZ1O7u/Fzw5nvmtlM/zXqjc+x7Bt9w
D1EjecBPivPtIQ/4+ziPwtttDclOwDV/eDZaaGhEegPX6PbtfW2GEdkJ+Jw5
xje7XjSi90L88+HB+kUuf7wXeLOK5SGxIfxelM/prlIwtYLfC/ykvfqEu0Vs
D+CHIwx1bdrxeAGekNAjKsaN/T+4pjh/HnoA3zw2xdhrrIT0AN75m+15G28z
0gO4Qqcf0rdbzel96TyfoPKtUS34fcH79Bi4v0swvy/4K4lk9K4v/L50zny4
dwOtam5H8CbiXHfIT98fR5pF9M7m8QjczcrZUlvNmfovuO36yqq+pWyHdD55
5zT1ycosP7hWs2GPjnRi+cE7Xd980CaL5QfXrP3Y7Wc8yw9uIc5Lh/zgOUW3
TLxnsP7pfPWy66VN7SzpvcD31ai8j3hlT/IjntdtYFRyobYVyU/cNq022ZDl
p31lGToblkew/OCb6x6pBlS0IXsDNzlx5+vi3epkb3SOet8xK3P+jc+F3wZ/
oqjr3uSDNukBvFacZw49gDcvbfa0bx/uj3TuwuWvDXb95v4IfuXAZN/dC01I
D4jPc1O7Ti6vZj2Ar2z0oeOv5qwH8I0pK5TvdGQ9gKvWnRprvoTHX/Cv4pxw
yA8+/+PwIv0NPC5gvt5vzttJ03+zPOA+7jOinLVYHvDBRedvPevJfhW8Vpyb
jeeCrw9yfb4xneMl8O+utxdVNGZ5EP+vc438eb8R2zl425xpiv/GyZAHfMmS
rk3/jYehH/CjH+5K/417YSd0X8e3Z5J/41vYA7jJ+O4q0wvZL4GbiXOq8V7g
uRfC59clsz2A9+yqlLQ4lf0tfgMy83cOVuP3ChbrhmZHuv5+O5rfa5NxyovI
4lSpe71T2S7VrOchIs7UlYuTFUX9VqHvXk47akryeIv6PXsPDL50mP1knKh/
sFXl8Ja9zEjOOfFRp5Ik2dK4n43+ilfxu7BjzoaIWJaz4/EuAx9nnJOGzK+J
bOLO8eoTkdfyWtWss1IIxwOp/xGvThPPLVYv6t1YwZbs5HhpM7OApONSB7m4
+uvQ9AqJf660MOnLX/Eq8jazfYrMAv6IV/H74NOMntYO3F/0cc+YXLxaKepf
57n29POPHK9ewPc4q08PHO5hQ/Jkan5JKM64I/1ZeP+vuBTrUG7a4fOb/9G+
i7NW+Psn5UvHW89dcekjt+8NuXuyIM9xUf8Kw8vb1lRx3LhZ1P8ucHW8RYSE
2jdW1J/VoWyPbyG3b/T8xL0S/yLpIf8pf8WByFuM66Wm7vlHPNPZ3CosSVIo
HXG7wew5B7l/WeP8y9vp9x578ziyWO7+Kcg/UTw3Nvpwp1HLON6Tifpf3b58
x3sO9xf7t3aXIoofSXt8avdXvIf5t8XtN9fa+rCcdQk5s4ozHkp7rN7zsSyZ
9dkZ32PJxXs2ov5dV6S1nzqzXb3rnfc4I+KpdJP3i7/iPco3Pg6zyPlDP2d+
jFgn8S+RBm4IrLx8nJ+L3wy5uO61qD/X+vmHzt8MSA8nRT0DjUKHx5zjuLdA
/N3u+3v+itO6iP0AB1+Vrln3R5x2xqHeg4yI59IHNq295rzg9sI6eOn3e3ma
x7m9hoh4SV0u7iK/clf6xbvMhOzNVzx3b8fWC9tfZXs7LZ5reTrIqOCLhOR3
TKq/ROJfLpWEVv0Vd+0W9Rko3Z0bPIjl13pxe0RxRpn0ieb8/u2+svzIPzez
6n1bo4rlP/sfcZeDeO7Gxiu3ZZZw3KUp6h/TI8nglrEDyZnge7eNf9JL6biE
o3/FV/XFulbM/dWrazqznNNEfbZxc937XGc5kQebqf7owY4jLKe2iIss5eKr
ePHcng2HSlpXcXylKJ4b6r4ur8NVK5Lzfc32HRHFr6X6S03/iqOGiTz9IK2q
/m1MWM7CbhFzJP6vpZYOBcGPZrGcyMuW+c6qXG7Ick6Xu88FclaI596OWOr2
8CiPd6HiuXeaLgia4cvz1nviuTfXfP85L5X9T9dDkXZJknfSUXP8/4p/zmO/
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
N0U7FihM9lN7xXkDrDd12dcv0yed56dYVxov5rkoPyJkV6/ijHfSivNvZm//
Y30Z8xRXxZOq4xy4n6L9cQ8C2ZXYP6Bptnbs8mgeF/C92LRpAe/GD+R5k4LC
gf+tm3cW96fDT74X4+YrufUFRdG+mmJ9gdbRxDp4dsJsuzUq5rwfXqznbuzT
omv8QgOqJ0is544U5+fTfmzBh8vxEyLeCRB5WshvIcbfMnGuPriD4E8Eh5wY
rxt2ePoyv4sRva+/3H5+8B1inJ0iNy6HCv+hezFx0JZFbJ/LRB6yZc105bVN
eRxRFfvNxonz9mn/83/wSSK/6iPyq+h3v8T+NOmR0Es7tjJ3EvvQtoXNH317
PfNgIeceg6ZTmzxlexgu+PXSYX2PFHL5VOEPzSLO7S4K4304iB/Klxhq3/hh
wnqWu4+Y9png/m25fBrygR8vdvyQ1ofXL+ieEXHePuSsWDZa3z+pVDpn+Ev1
2zJe1/CVtt0fUVwuDbWvi/300IX9p+Bnvx9YNirRkeRBnqGziDcgD9ZnJ05Q
Hn1yD493WWIfUTNxfj74RcEbyHHEsb3FufrULqL+tSlPtZqf4/i5u/Dzm3d/
n/FUn3mo8AML7+yMWBzG60duIu79LfYLgWMdOV0unrko5rvbEk5VTFBg+8R8
v7Zy4E7He/y+ASLPMF8uz7BKxAka6fGBM+8xPyD8zKkpESVNW7P9YJ59ZVV5
y/Y72N7g3xo9XDXJ/DOXrxB5Bu2vr4uiPrEeMH/PN9ZrcbaQ84eYL79qeez+
QB0e3xHn29+tGjJGlcdrxPltf/stXd3bhPRG93aKc+/B38lx1I953Ndb+Z8b
f+H8PN13trql1XxzHpcRJ5/IN7VY9pafi7i0WJxjD97oPzjyD35y+5qmiPXo
IWlqW8YGcTwzU6ybz8g4tjKjK7c76jlWdq5Z9Ab+DhF5CQWjdcUlj7ieLOHP
RxVmFjYcznqOF+vID01/2N+/ze8L/bdrHvK4Lp/zNoh7Z4lz7CmOwncbchzz
l1HxNVeXvuV9O2+EHwhQq79oYjDz+mK9YGvChs67qzjvR/ceO18Jnt+C60c8
bIjz7bH+An8sOPyb/Pn2KI88Upyyh9m/33VCHtjbkv6lXht/87on+MuUp0sT
nukSzxXr4PXEOfPgFwWvLzjsYSrOuRL79sELhf7LxXgNjudaivPkwY+KOPyo
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
sZ8Ko/3UacW+aRrtm6AbwvoNlZoPG1PVSnyhfuH4/opBek2iZH3Yz7+vOPT5
vKwPeNahBFenyyruF/DdNc+Njjkn94ng0XkXlq1fKPsF/I/YyNud0mW/gC8b
NOzsdROdgC4Jn5NE9DiZeFf6r4IHX/nTPCFSLY7TfhDzrrFrn71LG9oK6IDD
DgxpOvKOn7u1GKrg/YifpHIwHi46Vb74fYJOIH8Y7PNROy2+eXpYi2EKPpA4
9MT5XjhAZByNsBYl0PVG3vj1292LF6nEc7JbUP+DfRJ79fOW9x18z3jL0Nu6
p7OA7h7q2ZP0vrDfAR/R1+t1i4tqAR1MjNu1F2tkGT+34ec5f9T6zdbrJpV/
dxTnn6F0/tlQEbelpbgtXzrHgB2e4lY9PanAg/ud/fbnHxlactLrp35ZyJuI
5/Uqp+kKxnmx/QP+yuvCo879vPjcCdx88nz7dXZeAvkUwcviukV0OuvJ/vYc
h07x7zE/sf+XKvz8fyU/f+hg8jnqjdMLi5dbCuh58ToT+3jrtziVmErfO867
siRxyfMglTipOLefQuf2RT/ZF6DdUM8npLczhOYR6+gsfDJkW9vycavg7sTh
34X6qDqPjG0xRcPjDeNn7d6lZ32sHfn7y/drZJ/DDx/j+e68Y0O+GdgJ6Giw
HXXvcd3CGpYCeivgqYu7J42vJtuH9WMyN2yof0HaA6xnUy9lZosr1lx/8P6b
on02T5H7GnyXJ/cvjWx63FpAV4vbjfS1pv7EfrNU2GktyU6bprDHmpE95kXj
E9y5c8XSve11ouFPOMYz2v/9Rtf1sdZyvKGdW/cMm3Y2RSWQ1wfrfL/YZ80X
7jMTyOsD3p84/K9Y9530rI4qeBTxqQp7rIzstFcKOwp6oag/2j9qzLyJK2pI
+xDcLX370IYvtQL6Lxxfv3jGlgI9lahGfhdoh+zSSq2Cy+2Hxoq4lQ0UtwL9
Yjzv2HdX0o07NgL6xWyvPr0bUlr+XRj8k/0ddH75fPLWvZiE8vo0UuhXOJF+
BeJHMM43bzXIfRynZn911HMY7bsxT7H+bGt8rXn9bl4Cules8zBpVveQSxYi
iuI7OJ+q/+v5f5eYCuj0sb7alJq3soSa47BYF404dJPxu9ZvejvUs4ma4004
npE4dP3w3qPdrEyyKlrz9wV8D+lK4Xn83jYtqxkPK1Mxx7pxt+baRYGu1uKJ
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
4v8AbriXww==
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxFnQXYFsX3/vfZ3mcNUL8GIgqKmIjdgQGYiIGiYosdqIiKDbaiYIJiAQYi
JgYGIqhgAHaigoUtJvb//rz3/K7/dbHM2dnZ2XhmZ865z33O2/7QE/c4IY6i
6PcyihKVdxdR1FrlmDSKmnkU/Sx5uSyK+qh+OzVYQuVsbV1VP0DlZLXbVfJe
Ks/Q/l9qM1DlctoOUcf7q48P1XePRhTdXkXRAdr/Se2XVZ8vqm4HbXtrP9ax
0yXvofI6tT9PdT+qfFb97iZ5b5Wpjp2hNnupfFXX6a5tW+3fpnalylaqX0Z1
z0veTts3qj9f5/ZX/XM6f3fJ+6h8WvXr6Ph6qn9B9zhc2/ba/0j33FNtvmtG
0RaSb1Nfm6n8uPC5P6q+oboean+72k9XXweq/kCVD+q5pqn+fpXrq/xDx7tp
e0HHDlCbA1S+qK2v5L4qX1c/y2mbqTZTUl+3t8o7Vfeyzu+l+hN03S+0f7zK
x9Xvn6pbROUsHZ+pbW/t/6Z7ukLn1nqmvSSfrfYTVB6jdofr+DC95yu09ZY8
ROXlTff5oMq7VP7D+9S2jd7FSypHqP5z9XWy+jxBda/rOhtrO0jHXtP9nan6
Y1SepHv6SuefqHIHtZut4/eo3FHX7aj2G6ncXfuJ6s9Xfz+p3UE6d4H6X1PH
llObNVQ+oz7+lXyr2j2t/YNVXqn7/FRyqfrlVV6r8zuobnAdRZ9J3l1txqjv
uZJ3lbyt5N7q9zz1dbPKX9X2CNVfo3K8jl2g62Zq+5mOnSM5lTxaW1NtWuv4
j4V/x+91/H0922WMbZXvabtU8qkqN9B99FP7a3mfan+HrrUlY0P97Kz6rurn
U8k9JY+WfI3k/jr3eOr5XSQnqusjeR2d96aepY3K31TfVn3+rf6v0/NepvII
1X+o/g9TeQzfkeR2Kn9RX3PU5meVp+n8ibqvx9XfKJ1zl+pvUvmIrrGK7uFR
7Q9Um0fV5gm1+UvnbKa6S1Xur/311N9bOj5Px0fqHs5R+Ym2GyWfpfIqXfMC
9ZNre1Dy+SrP0naKzv1M/fzOt6jzD9C9P6NrztU5I3Tu2SrPVv2Rqp+l+uW1
3aL6Qu3PVP2Bqn9WdUvqXmP1t5r2n9D+GpLXVL/fqd1rKvvrOqW2nyXn/LY6
d4DazlHbUbr3MerzZpWP6XgbbV9rP9K5Y9XmYbVNdM4Pqm+o/FL3dJcOD1E5
X9vdki9UebraPaZyktrM1bmT1f5gySN0jWFq85fKc9TmOPX5huSv1Xac6i9W
+ZW2eyRfpPJctTlebd5Smxe1bahnOVT9/KJjz6vNdSp/1faC5OtVrqb3+Zna
DNW2ha47TeU6ar8l85Hk81Rurm2q5LVU/7D6riRvoHLp3HPdepJ/VF+Pqc+r
VS5gLEgepnLV0ve2rO5rsuQunKv+pkheV/JGkn9Qu0fV5ira635SPfuV/MZ6
pxerfEz9X116rn5N5fDSa8Hr/FaF55nVVa6h8gu1v1pbpHsbrvI5ndtK/S6u
7X0d/425T4dvUPmQjhVq00VlqvOvY46UvFbh73dNlWfpvg9W3XO8y9LP9afe
w+qqu5B+VO7AuNA2TOf30rEzdO69Kmer/WaqO4R5UfKPav+Syu5qW2i7RseW
zf3tb6R+ujOGdO4OKv/Q8RHartKxD9XmN8nvsAbq2Anq5yj1043xqeMXqfxC
+/tKvkrXmqL9i9V+l6bH4zINj8m9JT8qeW0dH6XtYO2vqza38761fRV53uXd
9gnvF3mYyqPVbjcdmyf5sNhrKL9Hq9j38IvkR9XnuaxfajtW8lGSN5X8lOQh
kneW/CRzoOSdJD8t+ULJz6h8RNs5krdT/Xxd41fmduZF1d2i/j/Q/m1qc7j2
11ObS1XeqfqxrOV6J0+wFqr8U7/rW3yPKrcr/Vt/yZyj/bclj1K5lvqZz3hT
H89L7hjk7dV+uuT5ar+S+lpcfW+u3+VOtTlGxzdTfaWylerfRz9R/XHa31z1
O6ustd2mY2/rnDtYo1TO1292r+T3JL+jbbTkN1Req3PGqP3r6mMRlY+pvrPk
xVX/t/ZPVxnrXr/Uc+2oY1Xu8bOUzj1a2wLJS6vsVHi8rapyqMbqk3yXldfW
/dTmq8Lv7M/wG12pNpPUZim1uVfnjUu8dl/IeqbrzdJ5/+o9nNrw/DxD8g86
70XGlNp8oTavqc0fqj+x4bn3ItV/rvrZqo+0fa/rxU3Pn4xJxuZLYfxfrnIb
PcvyarOWypmp16YjVB7T9JrF2nUaYwX9TeUS2lLJZ6g8s/Kay9q7jJ6jB+NE
5SDWwIbfy/+0v5nKUv2fW7DIamyp7KJzv0NH0rmLqU1byT1U/qZzb9J2o7aL
tF2o7Rt0LJ2/qO6zvco+KtdU/5M4V/IWDT/Pyup3PONT/byv/h/XsQ9Vltpf
VMc3QifV/n+SH1C5m7ZI7Tvm/g6/Ct9ly7oT+Trj9D7vT11/PzpU4nNW1v5h
Dfd1g87dVftTWWdUXqvtX9Xfo37+p3IPleNVt4e2Jfmmtf+P6gepPJfnbHge
X1LHL2x4Ht+lch8TVK7PWOVd6j4765xM7U7V+387DXqsylXU5jTJN+bWd+nj
VrX9M/a8+qCOLa76TPJMlVc0raeNph/tp6pP0UHUz+1qewvvu/I6fzP3q21L
9BDVfa/rPaA2Q1W2R5dXm79YO3VsI96Zyqu1bS/5YXR7Hf878ti6k7W3Yd3r
fP1eifo4T+UeTb+3GZVtDGyNVVhXdd2lJe9Z+v1N0LlLaDtZ53yn+++vcoXM
8/DFKlfUdqLkS1SurPM7aFs+9Ri+Wed1QPfMWpakaG3066bn22mqb6he/6I1
VX8zepO2z7V/v679JeOh9Nw0seF56+/Uc8/trJk69mQYb/+lLcM8Wl3/3aK6
Udq+QA3JPB46q36ArnuT+mmv9kvp+DcNrz3MOaMYX6o/hXsK7/x+1qdGyyfd
Mu6/DePzZMawyrNUrqt+l+Wz13U2zPybP8I7wYZTm746+Rt0Im0DwhzHWsSc
96ve5S+slZKXUH2NLs1aI3m1yN8ez7I041P7F6jttw23+yf1mnBH6vlhjOpW
0Xl36Nt5IHX/L8Ve47BfWGdOSmwrddDv973Kc/WDXKH6DVQ/N/Kasr7kNyLr
Ratre5r1o+F9dKRj1aad5D0lvx7mc+b1pvpsI3kP9XkZOq3arNb0+Nkw8Rja
HBuOflW/D2tj4ufEflpRcj/J03T/U9TfH03rMug0z6h+L2wfySuxfqjNPcwP
eik19ljDc9Qf2q5U24NVN0dt+qlcWuXR2C7BvmOQcA9tJP6j9kNVHqJ2nzes
e6F3oX8hP6Vj77Mu8H2r/EDbnmr7fLAL26o8XG3eU/3Oql9K5eBg32HnvaP9
J3TuIipL9HDJN6j8UNtBav8/lefrOVdQP21V/qbj3dHrde67OvaO7nVg6Xvp
FO6HOXGTxHrMFLWZrnMWV9m7tr30svrpE2yJmZL3rW0PvMo7r21XvCK5c+F5
fn3eY2376iXV71XbtpwueU/eIfaMxlVPyb9KbqP6A2rr3G9K3r+2Hv8G9kHD
6wdrRy/Vv4KerfrdJb+M/s2aXNsGeJ2xIflV9FH0bXRfnXdX7vuiH76r/VXu
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
YV74f91koqo=
            "]], Polygon3DBox[CompressedData["
1:eJw1nHn8F9P3x+e9zPrOUvaIStaiIlshRJGlRaQIRUlFKdlClpLIFpVkLVmS
PYRIKpVCImmhtEjWbPFV9Hs9P6/5/TGP9zlzl5n3zJ17z3md17l1uvVtf3kx
CIJNYRCU9bt7FgR7lILgk0IQDEmDYLmOt1Th2SgIplaC4Db93iu9vuqerTbt
kyDYSXIDNd5L5XfEQVCRPEJ9HCr5Gx3tVf6b2s1W+UH6baC+f9G56mqfqLyx
6v6ic1+r7Ez1t7PKDlYftVW/pu6npsoHqG4b6feqzsO6/jrVOVbnvtL9TZO+
m/Tn1fYHlb8ivZ707yUvUf8nS95FdS9X+73V3wHqb72ud4/a3qfyGrrWBp3r
J/khtRml9oPVZqzkFaozVfq+qv+6+l8r/X3ph6v8Delvqc3ekk9X/wPV/47S
W6mvM3VupvqdreudK/k8yW1VPlBtbpR+ufQmef2TVf849b+D5HYq31HlB6p8
T5XP1PVu1/UW6twYyR+ov/Mkd1F5O56n9JYlP+P6kv/RPdeW3kf9TZdcqfh5
PCH5Tckd1P+uqttY7a+UfrbOd1H5Car/s/7DFdKvkX6n9F0kz1GfXVT/fNVv
r/oTpFeXfKnOjZD8t+rsqestVP0/JF+V+Nn1VZ3DVP9x1akm+U+d+05lbaVf
q/r76b8uVHkD6SdJb672zfT/luk4THVfU5ureN8q/1HlV6r8X5V9qnYnqLyP
7vVGxqPKV6p8tcqHZh4fO0lWteAeyYfrXDuVd5XeRPIvOveS/t8+0n+WHKqP
VpLb63onS35A5+4uegzeL/kYXWdH9ScxKEm+XX2sVn8/6tw+kkepYLzq76Hy
bVX+ti7cQPIo/a5Vf5fo92vVv0P1T5K8q47TpJ+tOrN5B9L/Zryo/Ca1H6Y+
v5G+RnodyRP0n7ur/02qv0bPb4vq95R8r35Xq//JOrcL70rnhks+RG1OV/tz
pD+uts8lLnta1/pE9VdI/0N6TV3rHenVuEfpJ6q/JZIH6HeT2j+o4wjJl6m/
j3T9ATxzye/r3KGMB7W/TvVnSD+E8S39Wun/8c2p/t0696/ke9TmB/X1t/Rv
de2Zqt9E8oWqf73qr1f5HOnzpd8j/VHd84Vq31/6GdJ31vGWynuq3VeSn1R5
D5X/pXNr1d+RqldN/3+J9Ef1H+/SNR9S+QidGxFZHyt9vsr/UnlDXe8U3c/x
Kj9afU1W+XSVH6nylir/TtfpJPkp/X6n6+2l+nVUfzPzivTmuub7jA2Vr5H+
hPq4uOhnyrO9X/V/Vf1XpTdKPH+8XfSYZmy31bkdJO+va9VS+6vUzz+q307n
ztG5kWq/UXoz6R+qrI3q15C8r8r2UP2Ruo/H1N+2OneK/ntd1d9P9dfp/1ST
3FjHqdLPUvkjul4z6WdL7yH9mdTvp670y1X/XclX6Bo/SV+k8of4/6o/V/IC
9X2vrneB9D9V9wAdU3UvR0nvoPoXq85E9ddU+lnSu/PMpI9Tn0/r/oZKP0B9
bNC5edLbqv11kj/T8ZT0W1Q+OfV8O1H6f9LvkHyBrnGQ5Oa6l/10/abqYxu1
/VLnHiv7+3xC9TdIHyq5t+r3l9xDZbeo/jiescp/VpvRXEv3t4PKZqrOfZLv
U/3fJWdq21f1T9P/f1v3v53q15b8ruoco/JWatNC5Z+o3g/qb6DKD5N8p9pv
VHkquQ/zt44Pmf/VdqnkIu9P9W8ocBGtY8yP0o+SerH+yzU6946u94jKt5N8
ho4B0qtLr6f7fU96c96trn+S+ttH/V5T8nrXXO1nqPw4ya1V3lLld6r/Mer/
AZ17UuWfSv+Z+V76rapzpO73bclbmctVf7raHyv9ZJWdKP016dtLryf9GOk3
Sv9E15ur+9mVtVLtJ6v8bfV9t8pjnfuD9VHloeTfdc9fSb+H70t1j9e5i0u+
ZnPuVcdF+fx3nurur/9zPd8T87P6vE3nDlf7jipvKfl/OtZLf1Tlf0o+n3em
+k9Kr6P+W0jvIX269Ckqf0d6I8kn6P5PqLgNbddKHyq9t8onqn4b9d9L8k0q
P0T9nyj9GMkn6twlKp+hNq+nnu+elt5B5T9K76j7/TBfn5pKflL3UJH8ge69
v/r/Q3W+Vn9bWZ9V1k51ZpVsE6WqM039NZR8vO7neNW/S/VP4Hmpj/Ml7xt7
PTxVdc4s+/+vVHk/lf+j/h6Ufrr0CdIvkbybzj3Mt6y+h6u/GtJH8e2qn3XS
H1KdNqr/k+o/IHmsjjOkfyT9Fsl36Cgwn7Oeqm1NHY+o/ST1d6fa7yp9HN8y
a530N3T/taU31b01l95O46id2m9U+7aSt9W5pUXbGu9JvjVvP1j1m0mvLn0E
96f+hkjfScfn+r9ddL8rJA9nDlH7+1XnP9X9R/o65n/1v0X6dhWvJ8xVMyRf
rfuZpvYPq/wq5nKdb67ysvQDdY2i6rwneYPkp/i+VecK7Fn1PyP1/Hqd9F+l
363+b5D+sfQP1GZnyY/pXIKsfvup/SC1qav+/1X931lfdb5O0eP3bl3jCOn7
SR8v/QWeoeofL/1x6bUS/0/+LzbfwypvpWv0LnnOOIm5Wkdf6R9Ln6a210tf
IH2W7mFHya11XC79I75BynXUU/8jpffP3+cx+fUGSL6aMSJ9vfQXdf1r1f49
vh/1V0PyLN3PifSl9zOo4uf9neo/pnN/S+6nOs+qfkdsOMlLVb+15An6Xa/6
/fV/r1X9uxg/+j/nJbZ/j1Z/e6t8Ps9Xem/pZ0ufxRwn/Wzpp0rfX/Wfk/6W
2t7FeNPxrPRhKu8qeazqFyWfov6P0/2cq/p1Vd5M5+qqfJjuI5V8u+6xkeRz
VH9oyTZtR8n9VX9Qfv3G2MeqM0Tl6io4ROfGqU6o3zHq/yKdfFh6JH0K9yj5
ZtUvSy+qfD/d4yDp/6r9myofqfM3SS/p91beL3MD9qzkXjp3lq73pvq8qej1
pK7kmdhjKj9L5a1Vfrme35UqHxLY5yqqj4PU/2jVnyP9Aek7lr0m95e8fcW2
f1vJyyq27/ne7tK5/0kuYG+q7gNqP0vt6+l69aVvkD6Se0k8Vq5Tn2PV/na1
ub9o+2eY5EjtG5b8PHaPXD5S5d3UZp7aDFZ5Qb8/Sq+m/l9lDPI9YoPiC+l6
p0nuwDtT/wuk3y79SukdpffDJ2Ct0NFA7V9TmxvVfqbknqw3GOqqW1M/1SW/
r/JhfE+q30NyL75D6VdyvdDvf7ju92rpt0keoOu9JD1Q/Qf1X3tIfwTbVac+
iG3vbyN9H5U/LrlrZtuW9Xih6k9izi/aBh4quYbu6ULJN+paN1fsT1ZUf++C
fagL1X6M9MOkf6P63aSPLdl+nKP+Xpe+l+Sj9J+Oze2nB/L76aX6XfBRSp4v
9sIXzOfHq1mrVf941piS7f2asb9Jvs11Kr9N5W9jU0g/TvpxfDsq76P7Pxv/
QvJfOtZKv5fxkdgfv0v93SZ9uOTuOtdbcle1P0DtN+o/VVf5DzpXW3IPlfeR
3E3lB2J7q7+b1d/26n9vyf11/RdU/2bV+YH5U8edkq9S/SNUf67Ke+X9d5B+
JXWkXyb9UOm/6ho11H6q+usgeYDKr1d5H5UfovKzEvvyh0r/TPpz6m9nyUfr
XDvJ1yT+9gbo3Bsq30HHPOkf6X3dhy+j8sukX6Ty+hXb4Njit+q/r+J+1Mfr
uv7LOnewyo7TPTTEXpS+nfo4S/o50neXvlr604xB7FXJZ6r97/iXuf/wIvaz
+puMvyX9J9VdpOu04P+q/mDVP1PlN6j8QJ1fJL2s42baqvwZyZ9mXut2VF/D
+NYzr/3zI7/vfULbylfo3GOhv6erdT8/YhNIP1z6PpKP5ZuR/klm235WZPtn
XuR31VfnPpS8XsdK6c9J/05yfTCNfC5/SPX35f1gH+i4TPI4PcdfVT5Rx/8k
Z6Hn2t/5plX+fmhb7DvsXeY2HYOKniMGSv5b5ctVdnXB9mmoZ3Sd5Mm5vdFA
1/9W+n/Sx0lvg30ifWU+XxWkXyP96dweKUm/Vvqzuf3zvq5xE89b52ZKHqj/
/5ae9ymxxwP90j/3NEDlTaS/ovpDdO5VyY10vMT4kP6KZICDfdT+NR1LwFJS
+x9H5f7Qa9is+EPY9Nj2idu+rPMjVL5baN/774J9jC8YQ5IbgZFI3iu1v3pE
7u8u0e+z0g/BB5P8i/rrWrBtcavK64DJ8D0WbC+PYd6UXCrYvyrFtl1HSS9L
Xpxf7w7GrK6/NfS7uUH6VdJr6ojBN3TsL3lH3c9w1sLY6/GOofGyvwr2ce7Q
81yreyuDu+H/qt4E6dvgL0i+IbX90zi0vdRC9/+F2m9WeW/8Y+lp/qyv4HsF
SCl6DWV9fUv6p9IXs6ZJbx37/dUCjwHrUfvFavKP9F7MzanXtmsirx9NVP4B
voLKu2NfJ7btLlVfl0m/R/pv0s+LjP9dk9of2yG0/7aNrtG05DWI9W2d6pWl
JzqWSv8+MdbwSe5fHpYYr9gkvYf0PdXfg7qfeap7ifRO0lcVbFNhv36u/mfn
2Nr9Kl8sfY70X1jrpa/R7xRshYIxxO1U3kzXPlrH9mBIPCOVHVQw3ron64vK
/mAsqP0Bkd8lNmId1a/DesfYlF6RPlj6rUXbmHWlXx15LOBD7SX9L/WzGN+o
YBv9CP2vVyXvVTC+MIc1WfIPkkfqeueqfB5rTcH4Vc/Q+Bl1fmTs48MXjUHs
wnoj/dKiMYI9pHeTfknRGMLu0m+NPFYHSq/H+8bfUV/Xq6/RrIfST+V9Sx8F
HpQam9wztj96iJ7xbF3/D93LxTxflT8L/iT9IulfxcYv5+T21/LY+OkHub3y
tdq3xpdQ/6dJv1TnB6r84oLtjZQ1VPqy3J7dR/ob0jdKvwB/WPpw6Utz++9r
9X++9Lm5vbtK5aeBfaiv06U/pvvrqvvrHBlv3BrbXv40Xy+bp36+f0bGu+9Q
uy7SF+H/8bzBLYrG5Hpic6t8C+O7YAwE/22S9O8ld1H7Y1P78p0i42nMJ/gu
5+pcd9pjs0j/RfL5zP/Sp0r/VfqF0sdktn+vi22fb6/yh1gbVd6J7zu0L7lM
R19d4/HQ69lSHSdLX6h2bRkfOV7xCZgWvliOb2yn/sZK/0b6OdLH63dZYHvj
X8kTdCyX/ihrBJhF6thEj8jr8Tb4yCpfldubg/Q7WvquZfvEO2BPqv7ruq9u
Kt8lsb+xQeXnMZ6kP8P6Jf1c5j/pT0tfL71zxTg2eHbvgv23fUOvT2BYjWPj
+Ph2l2J/hl6vsUWxkfpjY8Ve//ExbiHWAR6o8nWqtz/2XOJ4yNH6P/tKv0x1
vi0ZY79H8u6hscVPVec11tbQ42mBjt8kHxLaXx2qY0ro9Y35ljWKterq0ON7
vo5fWaPU7/PqbxDfa9nrXyz5H/2fZeq/der5gHnhKPyz0PPnyayPKn9S97SX
2tXWMVHyoxofCViL5Eb5eMa+XJT7XxsSj7Xh6udg1vPcvvwst/eOVvvOJftS
h+frJ/jch2qzUfJ61e+EryL5IJUXc/vu89yejHRPfxQ852G/Zrk9uSK3p9Pc
H1ye26f1U8+3zLv1pLdjXGKv69y7ktuU7R83kT5N8ltqX19yE+yCfH0E/zua
ORNbIjae+0Lu/06RXkv6yzl+uXPo9egY1e8t+Qtdf5LudZHu9WiVvxwb330+
92+fZg4vewxcLnlrYv+pleo3zb8/7O01Ob5ybuT5BJ+9hepPwj9V+VNl48vP
xFXLbTCxbPz45czvrrPO3Sl5vMr3xJ/WNabq/g4E/yzZF6uD/ar+z1IHr+lo
E/o98j7BQBqrbFLieAuxuAGqXyEmVDTmflRijAusi3Pg07MqHmeMt20y28TY
xjeyHki+Xm2G6d4y3dNjxEJ07s7YMSRiSY0TY7k3leyvg29uKhpjBG+MMmOT
f+pcIrmcGRsCswS73F7HVvAOvjm13Vb6FumpjlaJ6/9W9DviXc0EQ2BM5v0V
MmO7v2LDgC2pzTWBvwG+hYX6b59FxoDBgvGZmMu4BngvPgi+SKz6j2SOpxF7
JAY5EeyU51k2Bj6N2BHvPLR/Mkrlq7FHSrbBLs0cYyLWRJtn8/b4SvhMkzLH
23YpW8eXWsmYiT1eLpc+LPFcyZy5Q+Jvgm8DTOf7zJg02DQ2EfgR8bfNJccs
RkvfT23+K3mNYK0Abwe7AMN4hthA5v/K/AfWQvzk55IxmIfAhxPHHmgDPt8P
e03y9zrukl4HTLhkmxDbfpH030uu8wDvLjVWQ4yQWOEHPF/dfy3mFOm3po5V
ENOuim1nLjsffyY2fo3vAIYLlvtSaix3jfRNkl9IHZtYIf231BgkWCQ+1t+J
8UtikxvABFPPUcxVl6vNb5kxUbBR4rGbEmOcYJ3fFx3PJD4+q+gYKPFbvp9p
gWM6xHZaqv6lknuVjBceo6NLyXMCcwN4E1hoH507WWWfp44FUOfYHH8nNgom
DzafZY4tdpd+guT7UmM5YEZgRy11jCsYowSrfEPlPxSMkYOVN9D/uTa0TdYz
cQyRWOJc/Yfv8M3SHDsqOvZTk2fI+wUjT3PMXW13Lhlv3SmzDOa0Ws9iF+m7
Sv8fc3TsGB2+Nj43eOj7ut7+od/5fyp7LnVsC5sY2xh7p2XBfRC/WKp7PEnl
M9X/t6nHC8+emA7tv9exQHI7tVmL/5TZvhmc20/rU/+3s1T+bWz7rFXBbX6Q
PF11pun9fi79F+l9db3PJF+IzS/53YrtNOw14gnEQImF4vOAF/RLHfugzc+S
Pw2NfU3iepFtBGyFxuAtmTkRZelrA3MlGqjO7mo7mpgFvgLfpNrGOn+N6lbL
/Rt8im0lv5mZy3ARtoHKp2bGxp6KHG9/H4xberfQ8Vn4GrXUfyOegc5VA78r
GHMmfsD7g+sAhg6WzvvrEDiGRCzpJMZoyT7005IHM4eAd2MD6X6OwJ7m3vSM
nsg8H88PHCMjVgbmCfYJhl2FZat+Y7W9IHT8Gc4AsRliNINUvlzn2sfmf1wn
/V3Vb6TyLqHj009GjofX07mJklfh/0s+E0wU/0vn/pVeXfrekf00/DV8mo6R
1/NT1L5ZwT7mJ+q/ae773FDxGs9av5fqN1T9EaHnGuYc5qXFibkeNWLjQ59J
P1b61bH5DMQQiSUS4yDWcbvadMY+Y4yHnvOZ+4+NjU8S//9WZc+UzecIsQeZ
/wuOF7aP/N8OV5tMbc5kjS8Y42qJr49PKf2nwPwF5i7srf9JryX5q8RYfDVw
FvV/DPEO8DnW/MgYN1g3MdSr8vm1O/YdGGHmGA8xEOznPxN/T8QWHlP5JZk5
DWCdYJ7E575Q/e6hMVyw3OPwCWPH8Ijlbav2r5a8RhN//ENl40v2Gb9JjH+C
dYEJgw1/WbEdXmWPZ+Y4wHUAswO7WyX58ZJtanw17CNsL2ywVzNzmoq6nzWB
uU7geTVVtht9Ulfl3dTHN2p/bur1dGLg8uczc3gCtV8dmNsDf4O1DU7E3Yzv
2LYYNvVLWR7Di70mT85sg2GLgY9vkD6X+J/ajtPRPTP+DBb9kPSLJB+u8mUl
YxJgE3Am4E7AkYErE0ruE5vDApcFvsP6kmMuD2KLxOb28AywD2/lmyq5T/re
P3MsDUwIbGjfzLGrNdKHY39kvjc4JNgrxHyJ/cKBgZ/TBfu7ZIwNfgv2HrEc
bKgIvET32zA2Xt05MwYMFkyMh1jP87FjOcR0iPfckphrhs1YLXF8aUXJPh++
X0XHKyXHxInHLwYziB0zPU96/bK5Pbzfgt7T0Tpq4L/p+EryZ6Fjr0X10Ubt
EvV3HPhGZPyWeN8tjDdwPOmtI5ev1Lmb8SX43qS/zPhkneSbk15Qf6tU95ay
Y3fEDE8jhqryE4vG6Grm/nSzomO2YMTgvXARiHkS+wTzBfslJgg/oan+fyT5
DNpiO+r3P9Z7HSO5F2zcorldj6l8deT4UqJzayLbwNjC10l+An8ssv1+Qt5n
kXtU/f2lH8n9hJZDHbsSW8JvlPwZ3zvziZ7PEdg3Knu64nWH9adB0fMH/Cnm
ngnSx0geHVkG8wL74v5KJc//rAPEqIhVcW5NjmfHkp/DpgdLTM3Hoq/XK15P
w5IxUbBYnjnP/rai423gJ/BHtjLnq+x4HY1VNl36iXo3HyTWT4gcT2b+497P
5v5V3krt6xc9pzK33hb6/y7S8bbq3pj6/TeTPJG1CT+4mMeQ9H8qke2hKk5C
5DWWtZY+wQRY3/E/iVEQq8DfJ3ZRKjpGzXgidkhMntg88WrwYXDiJ3W9zuA6
RXP8ZpXNq4Jf9aGOKarfVnrHojk+2AyDpfcseg1kLTyS9V33eiH+Q8VxROKJ
A4vGe7aJPH/DUTtf8raR8VI4WhdKfkD1rys6Zvx72XgRbfGP8JOIMRBrYIyD
F00um2tQW328GNsnJvZbJ7CvjI9NrLluYN8bf+U09VmnYN++EzhfyZxK+JfE
bYjfsAbfGRo/I5ZITPHSyDFQ7Es4YTvHxnzBfhlTxEeG8x+K5ijBB8Wnxbdd
KnmKrn2Kns9lqjuW9UD6x2p/i8orOvZUnU+kDyl6/IHNM2YYO9V0vFR2vJ71
l3V4QsVxUeKj/+r4imuH5h7AQWgi/aTQsX1i/PWlf5iar7olMj9tiH7vKpoj
BX+xVmT/kxje9ZI/Ss0Xgjf0quofzvxTdJ+J+l6Yml8Gz+w15mKVjyuacwuf
EhsdW51n9bLK94i8/t+UzxmzU/Mnf5L8oso/SM0Xhjf8UsXr2Qm6zm4FYw2z
Jf+n8nf1DM+IzenawFxech9fpuZrTorMP34pMpcTn+ll/gPxPckTIvNbKZ9d
tL2A3TA7MjcJTs0HkeNi+G6rcv3jyL4bMflRupfDeI+Sd1edFqFxZPDkCHse
H5Z5v+iYFrGtNfiE0l/Q+WkVc7yILb+nc88z5+nYNzCH+JnIGApYypSi7U/s
UWTeWSMwgdC+5vKi41njI/+/d3S99aH5c+C/X5Yd/8QH/Ub63Mi+KfEw2jJm
+5X9//mv57DGlv3N8+2DwXdljmSMFu3j4Mdh52HvLZQ+VfIbkWXsJewmYjTE
avB33omMT35cdB/0xZzH3AepfGhon+hJyQ9G9pV4TjwvfAr43/hEcK0Wlu0r
vafyZYx9bF5s78j/72vpm0PjkXOkdys6pkOclHjpt9I/krwgstwJf6FsnVj4
urwcH5z+Z0T2zR8N7euvLjo+SrwU+SL1eYXaty3bdzxS+jtlx3yZL2bn429V
av4oPNK31d/yyNweMKkVkeMxxLqJsW/M51v8M2LgxMJ3yOzbEleGH8/3AJcD
Tjzc+C8iY1nEfOFPHAOuWTIm92LZMR5iPczhxNPbhbYV8fnw/eDAwoX9K5+z
uL/NRfsX+BnHqX5asg+0MvScw9xDzOjGyO+N98ccVE/lj0bmFv5SNIYJJsb9
cZ9gZWB6I9XXjNBYH5yo8YHxs8Wq83lk7IyYNXytHyN/63P4T/g0zA2SF+k4
T/pnsfn0cOMXqL+7ysYSrsdnKTsGTiwcDhkYKT49vj28TbAC8hbIX3hX9b8L
/T2+WfQz5FnC64Xfu0RH19j5BLvif4P9VuwX4x+/mX+/58Tm2rdQ/U6Sa2e2
ZYkbw6/k/uFyw4mHG08Mj1gea37zyPHag0u2v7HD4RHCJ+Qc8dtuqflA8ILm
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
3gOLvKxSHo89MfHe1Oz5BX7/f+sdUTk=
            "]], Polygon3DBox[CompressedData["
1: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
            "]], 
           Polygon3DBox[{{2261, 1389, 1101, 1102, 1390, 2262}, {2033, 2032, 
            2798, 1400, 1401, 2799}, {2326, 1467, 1162, 1163, 1468, 2327}, {
            2035, 2034, 2801, 1404, 1405, 2802}}]},
          Annotation[#, "Charting`Private`Tag$3474065#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0r1LlVEcB/Cf1/eXTJCWhNIwI+QqVtpi0G44NOrWlkMuafUX5CTUkIMv
vZFomiYqLiKIbeKi5ltaOgo21J74OQn33M/3d57znPP87nNrHnU/fJITEW+M
5tyIlCczEZXCeGFEhforr3KBDVziPa7xAffZyRP+NrrkKIp4kWAfyznASxxl
Led5m99YV2zemU89w0aa5x/1YF7EpnqI3znMLY5wm2+5k3Rulbwrv+N7Y0/+
wB/8yH2O2bPW2h77H6iXuZMf8dl8r/zT3FFBREb+lfaVJ/weh6lP675Y98y1
I/Ud/lW362FdfZ8rbOIcr/ETK4vOf98yvmQBn/PUc/wzHsvH7OAe27jKVi4y
y3le4Yx7q51519kX1SWcTbX+ylPvnrVFviBPyc1ymfzausvWldinRS41t5L6
1dN0mlffstZriFd6Hs78f4XRLw/Kja65NbI0FfV0a9ykT9zwZbu4TsvjwMWp
nPP/1Bnu6Em4
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1961, 2216, 1188, 1960, 2844, 2127, 1962, 2845, 2128, 1963, 
        2782, 2846, 2129, 1964, 2783, 2847, 2130, 2217, 2784, 2848, 2131, 
        2218, 2931, 2184, 2500, 2639, 2740, 3023, 2219, 2185, 2220, 2932, 
        2132, 1965, 2647, 2648, 3027, 2133, 1966, 2221, 2525, 3002, 2134, 
        2344, 2793, 2849, 2602, 2135, 2345, 2430, 2981, 2817, 2346, 2136, 
        2222, 2813, 2979, 2423, 2223, 2137, 2512, 2997, 2224, 2138, 2225}], 
       Line3DBox[{1968, 2741, 2877, 1967, 1196, 1969, 2850, 2139, 1970, 2851, 
        2140, 1971, 2794, 2852, 2347, 2141, 2682, 3035, 965, 2348, 655, 2501, 
        2991, 780, 2349, 597, 2986, 2228, 694, 2350, 524, 2978, 2408, 783, 
        785, 1776, 525, 2409, 787, 2351, 3019, 827, 2601, 917, 2853, 2234, 
        601, 2233, 555, 2854, 2235, 832, 2513, 2998, 675, 2352, 2142, 1972, 
        2855, 2143, 1973}], Line3DBox[CompressedData["
1:eJwVzztOAmEYheHPxMQLq7CzNYQQGlmBjRtQB20w0QpkDfQsQirihZmBKQ3g
DhQMUaFzEz5TvDnnvP/Mn5mj5P78bicizpDuRYwPI04rUk/1pp7pL7sRufzj
jrmTg4jL/YgJ17Gf9Cp3JT9lhcvxbNfsRH7IjFvJV7tebvd1uaX+hTHfkDn/
wL/ZKbbchOtxbf1Cz/i1PuW+y+/hfuScT/RWubF2PpDXuMHC+a/nNiic9e13
zO0FZhjxBXert+TUf265R+8Py7u4gvsH10M0SA==
        "]], 
       Line3DBox[{1982, 2747, 2880, 1981, 2748, 2881, 1983, 2749, 2882, 1984, 
        1370, 2354, 2237, 1985, 2937, 2238, 2356, 2239, 1986, 2938, 2240, 
        2358, 2241, 1987, 2940, 2242, 2360, 2243, 2939, 1988, 2245, 2362, 
        2246, 2982, 2818, 1989, 2251, 2533, 2252, 3030, 2662, 1990, 2253, 
        2527, 2254, 2962, 1991, 2941, 2255, 2657, 2256, 1992, 2424, 2924, 
        2187, 2250, 2188, 1993, 2925, 2189, 2412, 2190, 2706, 1994, 2842, 
        3024, 2640, 2731, 2641, 1995}], 
       Line3DBox[{1997, 2750, 2883, 1996, 2751, 2884, 1998, 2752, 2885, 1999, 
        2753, 2886, 2000, 1909, 2710, 2001, 2942, 2259, 2260, 2002, 2943, 
        2261, 2262, 3020, 2003, 2263, 2264, 2963, 2004, 2265, 2534, 2266, 
        2964, 2005, 2267, 2887, 2796, 2006, 2821, 2888, 2463, 2007, 2926, 
        2191, 2257, 2192, 2008, 2814, 2927, 2193, 2258, 2194, 2009, 3047, 
        2735, 2736, 2010}], Line3DBox[CompressedData["
1:eJwV0LkyQ2EYxvFXRSjF2qkjttbaWsKMwqg1uhy9Jad3A8yISS4BtcZyFQmJ
NcGYcQl+p/jPs7xP830Te8l2uScidtHsjbjrj1gdiGjw9/wa/8Q/8Ov8M//L
b2S+L6Il/8kluS235R0c6uZzEZO0iAJe9I92g/wR8liwmaYzmMKV+6vdEH+M
YSzapLhABVWbN5sRtxOMYkm/qb+ks3KVvtt80x8sY8t93G0MH24VmqKlL9MD
JPh069jv81166970tjo/p6vRjk2a/Y1+RT7Xn2V7fVd/zd9k78EpvvT/gvc1
aA==
        "]], 
       Line3DBox[{2029, 2857, 2149, 2027, 2858, 2150, 2031, 2859, 2151, 2033, 
        2799, 2860, 2152, 2035, 2802, 2861, 2279, 2153, 2664, 2841, 3041, 
        2720, 2280, 2154, 2611, 2786, 2862, 2281, 1230, 2413, 2195, 2282, 
        2946, 2155, 2414, 2277, 2375, 2812, 2968, 2156, 2415, 2668, 2669, 
        2540, 3006, 2157, 2284, 2803, 2863, 2158, 2285, 2439, 2983, 2819, 
        2416, 2542, 2159, 2286, 2829, 3007, 2543, 2514, 2708, 2160, 2701, 
        2839, 2864, 2718, 2161, 2046}], Line3DBox[CompressedData["
1:eJwV0DkvxFEYxeFXY4ZRaS2J72Csjb024wuIDglR0o2tEipEo8DY5nMYlVop
lkgIE8S+JJ5/8cs57znvTe69LWPT+amqiBjFXypipTZiF0Xs4SoT8Stf5ddw
m454rImY4c91dfjRL8mOsYwhpOWbaLZXMn/bOaTd5iM6iLK+yVxAI77s7Mu7
+AM6oh+gi2iQLdBPO0XaaT7Tp9BvnscWCviwUy0voSN5h+zGvefoHWbxbmdb
v8O3J2+m13Ym+En06N/Qyrchm/yFfjy5r3P1eNVfyvqc3TA/615kF7Je2bqs
InuS5flTvsLn+DJ/zw/zJ/wD/w/SIzx8
        "]], 
       Line3DBox[{2048, 2760, 2900, 2047, 2865, 2162, 2049, 2866, 2163, 2050, 
        2867, 2164, 2051, 2787, 2868, 2165, 2052, 2788, 2869, 2166, 2287, 
        2947, 2196, 2505, 2642, 2761, 3025, 2288, 2197, 2289, 1238, 2417, 
        2283, 2674, 3032, 2167, 2053, 2476, 2515, 2999, 2168, 2477, 2804, 
        2870, 2620, 2169, 2376, 2440, 1606, 2377, 2170, 2290, 2815, 2980, 
        2427, 2291, 2171, 2650, 3028, 2649, 2719, 2172, 2054}], 
       Line3DBox[CompressedData["
1:eJwVzDtOQmEUReFDI8/Wmlg4BpVEB6CixAQbrRiAJJBQ+aSzs0IhcQa+h2AJ
lNrZMgHlEaIin8XKXnvfc/+lSnXvKBERJaRSEd1MRDkbkeQ9vs/TfEWeyAxW
+anMYuxmTd9MR5zpTX1R/8BI37L30EcXL/a8m5Zv2/oDPvGIO98m9i8+xDUv
yieM8Yx7N1P7hNe9c8N3+PJCREN+623s8rbbc17jxxi4f7XN+A+u9F85c3P5
/y9GtoKbP9s638Cb/db7HVuJX8hD+7u7A9nUc5gDSp4yVA==
        "]], 
       Line3DBox[CompressedData["
1:eJwVzs1NAlEYheEPfxAdmEGtwDq0BRdCDLK1AF1gBwomtmALurIBjVuHn40d
yBoSNEok4bmLN+ec9965maPL69ZVJSJOkdciPvYiOllEQy/1C73Qh3pXb+rH
8lbu405fyLNdXc5lzr3ix27bfTmTBfeGX/vcHnmzb3/rf1jyHTnmB+lecvjn
u3LC3/M9/QErvp7uVyM2nAUyuyI3McWJ+5/clr6DbeR2Vdbw7vzROwU3TP+E
Ei98yBsMnB/gi3vyzXP6D/sQa57NKjI=
        "]], 
       Line3DBox[{2069, 2770, 2906, 2068, 2771, 2907, 2070, 2772, 2908, 2071, 
        2773, 2909, 2072, 2952, 2305, 2386, 2306, 2073, 2953, 2307, 2388, 
        2308, 2074, 2955, 2309, 2390, 2310, 2954, 2075, 2311, 2392, 2312, 
        2984, 2820, 2076, 2313, 2394, 2314, 2985, 2443, 2077, 2204, 2317, 
        2205, 2956, 2078, 1327, 2519, 2206, 2653, 2079, 2429, 2928, 2207, 
        2320, 2208, 2080, 2929, 2209, 2421, 2210, 2654, 2081, 2843, 3026, 
        2643, 2734, 2644, 2082}], 
       Line3DBox[{2084, 2774, 2910, 2083, 2775, 2911, 2085, 2776, 2912, 2086, 
        2840, 2913, 2711, 2087, 2807, 2914, 2323, 2088, 2957, 2324, 2325, 
        2089, 2958, 2326, 2327, 2975, 2090, 2328, 2329, 2970, 2091, 2330, 
        2559, 2331, 2971, 2092, 2332, 2517, 2915, 2808, 2093, 2809, 3012, 
        2573, 2333, 2676, 2094, 1333, 2321, 2211, 2095, 2816, 2930, 2212, 
        2322, 2213, 2707, 2096, 3040, 2717, 2645, 2716, 2646, 2097}], 
       Line3DBox[CompressedData["
1:eJwVz7kyg3EUhvGjEJIoaJRGLDdgJ5ZYejNaBLFWXIQliliipEGB2lpZOlwC
RmXGRaj8UjzzPue85z/ffJnCxtR6VUTk0Vkb8ZGKWEpHdPBPvsy7+Bdf4d38
j6/ypmREj3nTvIVfu2m7c36GXl2j3Td2zNuY0efkKEbQ5+ZV38yLyGDWTUqO
IYlbfb+7NG9BHfJu9nCNEk7dDLjZ5636AzmHyUTEjTxEVl+WbfojOY817+7k
eOU7ctBNPW/Am27B7gmPGNI9yxe86wryARNu7+WwvromYtfcjkW7E3lc+Vfd
jzeX/AoXKCNn/w804C56
        "]], Line3DBox[CompressedData["
1:eJwVyzkvAwAYxvHXQLRN3LvW0foajrZ6GXyADuIIEibXZmVBKILFwmZ2LdgM
dg0z38Hi1+Gf97nezNz67FpbRNQx0xmRS0Q02yNqdC0pw4isz91BMxXRg6r+
TP6GcyyhV36FfbsxVGxe5FX61V3Euz7H7yGLss2zvELvdkQs0Ke4RAMl/ZNb
1n/4TWKeP8EFjjFtk5DfoWT3KBtGN72NLhRtrvX3rT3/4A5hk97Cp24ABbt8
a48CMjYb7pGuH3n9LdLyQ/5XN8XfYFB2IPuRTfKr9Dc9Qa/QX/Q4/ecu86P2
WfwD5sItdQ==
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1061, 1189, 2844, 1062, 1196, 1082, 2879, 1203, 1089, 2881, 
        1209, 1096, 2884, 1216, 1109, 2890, 1223, 1117, 2897, 1228, 2858, 
        1122, 1234, 2865, 1131, 2902, 1242, 1141, 2904, 1249, 1149, 2907, 
        1256, 1157, 2911, 1264, 1168, 2917, 1269, 1174, 2922, 1274, 1180}], 
       Line3DBox[{1063, 1190, 2845, 1064, 1197, 2850, 1083, 1204, 1090, 2882, 
        1210, 1097, 2885, 1217, 1110, 2891, 1224, 1118, 2898, 1229, 2859, 
        1123, 1235, 2866, 1132, 1243, 2871, 1142, 2905, 1250, 1150, 2908, 
        1257, 1158, 2912, 1265, 1169, 2918, 1270, 1175, 2923, 1275, 1181}], 
       Line3DBox[{1065, 1279, 1280, 2846, 1066, 1198, 2851, 1084, 1368, 1369, 
        2856, 1509, 1370, 1371, 1098, 2886, 1218, 1111, 2892, 1398, 1399, 
        1521, 2965, 1400, 1401, 2860, 1124, 1236, 2867, 1133, 1244, 2872, 
        1143, 1251, 2875, 1151, 2909, 1258, 1159, 2913, 1914, 1915, 1170, 
        2919, 1481, 1482, 1483, 2959, 1335, 1336, 1182}], 
       Line3DBox[{1067, 1281, 1282, 2847, 1068, 1355, 1356, 2852, 1507, 1357, 
        2933, 1358, 1510, 1372, 2937, 1373, 1099, 1909, 1910, 1112, 2893, 
        1402, 1403, 1522, 2966, 1404, 1405, 2861, 1415, 1309, 1310, 2868, 
        1134, 1432, 1433, 2873, 1527, 1434, 2948, 1435, 1529, 1446, 2952, 
        1447, 1160, 2914, 1462, 1916, 1463, 1917, 1532, 1890, 3046, 1954, 
        1464, 1934, 1465, 1933, 1484, 2960, 1337, 1338, 1183}], 
       Line3DBox[CompressedData["
1:eJwVzr0ug1EcBvC/KCK9CFxAbRaUSX2ki2qYVKO+BmlHH0OTbpUy2CWUhUtg
wQW4gjJ0khAXwOR3hl+ec57/Oed9J7YbpfpARJTJZSIGhyLyZBjPRkzqRq1X
RyLW6OlKsszXcMQ3XR71d/KWT+crnOq2ZNEbh7Jpf+TeCcf86NblBtPMMkNT
33J2znqePOd06Ovb5mPp/5iyb3j/ynrT/D19U1ao8ut//njmxew1Zeqcv+dM
95DSG0/ywr7m3i47HPCh25P7LLBIgTfnL82WrVdYossN1/wDOussgw==
        "]], 
       Line3DBox[CompressedData["
1:eJwVzrEuQ3EUB+Aj4RpsRhHBAxBWiZSVLk0EneiGYLA2MWBoJSWphamrpkkx
SSQSg/AGIvoAhiJhrKqvw5ff/5xzz8kdy+1mdnoiYpnJ3oiTJOKU2b6IvYGI
RB6qy5xxxAd1s6Zc6o/4lF9UqHJrdinf7a6RV+dk2v1tua8etLfKClm+ff+o
/9O9zTVXzJulmGOIYfsTvivIKfNpSt4HeuOyoD7ngiK/3Ji15Lr9tvzjngf9
Z/lEy26VY72aLPrXO1lSj9jbZIMtOt0d/fB+8W7wRlr9qr8gFxllxo2KW/+b
1TPd
        "]], Line3DBox[CompressedData["
1:eJwV0L1KgnEUx/ETlA7P0BIEBZGYUkMNNXUBQYOUiFKNGtHUC71ASwQtQtDW
IDgUODkEDUFT0Q3kElRX4BBEdgPSx+HL75zvOefPw5OpHZT2hyKigsXhiPl0
RFu+JxFLckGfjESkUhHT6CGDhC/LPxTN0/LMzZObFSyb7/Af3Ld85oo4VN9w
v3LDzSbG7W7JNf6If1RXUcOk2Ru/rb4wG5VZzKDB73rziv+UX4N7mdPfImcn
jz2s4o4bk3V7XXuXKOjv+Tb3IH+4a7yom1xfHts5wSnW8cpNyFnMDf6Hb+zY
PVd3zKZk3xst/AM3RiqI
        "]], Line3DBox[CompressedData["
1:eJwVz70ug3EYhvFHU0S6+AoNk8WkEpIi2NCOinQTg0gkImVwAgYOgJTFJmLS
wdeCyYDFQLCqY6Cz3ztcua7nfv9J04HVrcVKU0SsIJ+OmGmOqGMWUy0RZ5mI
H13WBV5CEYP2aVtZ57iDa3xv79QXeo2HuYs37W26W2+gFxXbsi2rL3mHr/jB
3qdvdT/f8C8f29f1nr7jfZ7jc3s7H7j/cIiCu5H8Blf5lY940tuiPtXbPMSf
/GjP6Q9d43EeSd7Ye/SovkYeWfcYT3AKu3jxLtUa8WT/dj/zApeQxkny/31/
s3/hHfPuum//x7wtkw==
        "]], Line3DBox[CompressedData["
1:eJwVzr9LglEUBuATqUlFm0E0BS3ZUGAENis0SkTtbWEpBe1NLdFWGWg0ZHsg
/ZKirX8halTDxkbHHoeHc973u/fyze1UNyojEbHJaiIinYwospiKyHI7EbEu
T3Eh13jUXZo93RYn9nvdtj1tz5j78q45TZkl/TJV/bg5o/vjiGPdpO6ZJwpj
EZ+6F3ubM2fezFfe9VfmvO6cFXuOpr4mL1CXr2kwkJuc2lvO3Nkzwzvmgdwa
vsEDef0ah/oPOeE/RtkjSYpZ37t0KMnfzvbsP3y582v2ueEf2sQrWA==
        "]], 
       Line3DBox[{1079, 1353, 1682, 2997, 1354, 1080, 1201, 2855, 1087, 1941, 
        3044, 1942, 1943, 1944, 1945, 3024, 1831, 1830, 1107, 1955, 3047, 
        1956, 1957, 1958, 3048, 1959, 1902, 1901, 1935, 1936, 3042, 1937, 
        1904, 1903, 2864, 1925, 1926, 1927, 1840, 3028, 1839, 1928, 1929, 
        1930, 1843, 3029, 1842, 1147, 1946, 3045, 1947, 1948, 1949, 1950, 
        3026, 1834, 1833, 1922, 1923, 3040, 1924, 1836, 1835, 1938, 1939, 
        3043, 1940, 1906, 1905, 1178, 1498, 1827, 1499, 1500}], 
       Line3DBox[{1179, 1273, 1492, 2921, 1173, 1268, 2916, 1167, 1263, 2910, 
        1156, 1255, 2906, 1148, 1248, 2903, 1140, 1241, 2901, 1130, 1233, 
        2900, 1121, 2857, 1227, 2896, 1116, 1222, 2889, 1108, 1215, 2883, 
        1095, 1208, 2880, 1088, 1202, 2878, 1081, 1195, 2877, 1060, 1188, 
        1340, 1501}], Line3DBox[CompressedData["
1:eJwNzKtLA2AUhvEjOA1i8lYsC8Ki/4AY7A6UBYOKgyVhahEvZWUom5dgsagM
dBMdiOCSJqcDQRSDoMFms1ksC/7Cwznv857vS2aXpvIdEZFBpTOijeGuiA1U
eiLWzUPuD7v2HXziRvdhHvC/WLEP4YS/S0SUuR+U5Eu5YP9GUX5w18Ij1rgv
1PlF+cht07zHMv+ON12qO2Jfl0SOe0Gvmzkc62fNee4J2/YtDHpzrRswZ/gm
+u19eObz/prkbrEpL8gT9gZW5ao/zlHDGHeFC35aTrs9M08xytfwqhvx97gu
gT3dP1JoMcE=
        "]], Line3DBox[CompressedData["
1:eJwVzLErxHEYwOH3ylGulNEgYTD7A1zdnYlQ6m6wuCiTXC51yS1nMFnkFop0
g67kmG5iszh0m9FmULJYLFf3GD697/t873eTG6XVnURE5NUYiOhpfDCiqgO1
UhFn7E8z7jEt64ovmXX+q7K9l4w454/mMfvWnb3JFr0vqMY+dcRe3G961T77
0C3fdl/6rmM+a5e/a9Q+zbfsh37XNUdYUeu6YUXW0ZQ7pXld8Jy5xp9UsP/4
n1NeMlfYg77s1yzrPfP/LWurwja9pdmc0uxeDT7hTmrY+yzbY01zyH3C+1qF
LrE=
        "]], Line3DBox[CompressedData["
1:eJwVzbsuRGEUhuG14zCCCaJSKKYQgoSCbQqFQ0Oj2FEZDY1DQUHrMKFUcAMK
l+AOyBDROEREFDMqlY6E0jPFm/db3/r32oXV7WwriYgVvDVFfDZHPPErHnHf
FpHLRTToq2iRb/QLXOGE77yp2SW41gVfcUX/Lo/KlxjBufkZk3ZD5hd5kOc5
xYU8zg/1W94MmLvlfi771yF6kdqd6TbtTnmj0X3dsXyCI9yaf+2/5R/+Q1le
rt/hXa55U+JZlOx7eInn9Jmb6959Yc+8xqn9BHZQ1XXqinIHT/luGIvymK7P
Pi/n5XY+4H10oWA3o/vANDLfter/AZqpLyU=
        "]], Line3DBox[CompressedData["
1:eJwVzD8oxHEcxvGPcgyETAZ1nWRUipnJjbq7TLbD9bvFJYUM6Iwug81oxWJS
1BlkMjhJ3eJulrqNlddvePd8nj/fb65cK271RcQqOpmIr4GIJdrFVX/E/VDE
PC3ww4MRI3iRjdIxLNoXdQvua/eD7oYue1ORn/PftJn+gTy/zU/YP/Nr+LFf
ke/If90b2MSkTYWWdHXdKVr2TT6hia6KtvsufU/nvJmxG5d3+Qv5Aa3xl/J3
2sIbTuSzsobNLe3xZ1jnH/k/7NrtIevffZronuSf7kMcYUp3TF/lH6inf2Na
/g9V+y91
        "]]}, {}, {}}},
    VertexNormals->CompressedData["
1:eJxcuXk0VW/4N0wpRUhFRCSFNBiLEhcppZA0UVFJpTKWocxzmTJnnsmUeR4v
81hmmSozB+ecTZokek+/7/O87/O855/PWnudtfa9r33fn2kL6Jtq3V9HR0dH
YqajW09D1X2WnoK/qVig7qZXvtWgStd8fZ4+SydIsp4/yCtDYPztH5wNO1KR
ffO5g8nubcDN+lDET4hAKlvSS9fxGnxhLCjbI9UECt1RK18Nqch+VuXImHMX
5qpuPDDCUAdfeAeXdf3I+Pxn/Du/sWGkW2IRY52vBNkLPTl9erOYXqo91q42
gbs+cN+tfFQEUTfdWRsYpzC6e+xr0yYSxjp8NOYWzoH1d+nChbeMolb2911v
k+fRbJvZ77OqKfCz6pzurYU+dJ0QOqLIRMWT+roHHq9LgFG2ifnTF5rx5NVs
J5aHBCavTQd3j8bC6UiJ+50/AtAkZz3Z/zeB7MG9ryavxcGMkwGDw0wnfFS0
iSr4SMWAhcWNvH2JoCMsxrKHcQYC/W7KFwhNox2nvcqOuQxYqA1KNrlEgA7D
4W/Trc1oV6tIPmSRC43XpMXFpgmg++/nlO6g+rVaowA4HgslX9tIYD5dMef2
Wxer/sMOsNV4xYaXCbx94QSb4ZdE1DV7p3suoQViCfmNpwwJzOjYmfJtugxf
7X+2xuhcD5InB+ZO7yHQKo+eTpS7BcdZ1Y+qvkeY7qevpz9PxeKrV9tXm3uQ
gek+Y1RkMfA9qhQejSej4vt7Mc5nP+Hd6yI6311ywLH51uW44lk0Np/rXF4b
xyRdnYIV9WRoZLNmTfabxB2DIn//OpNQvnKns+/XMDDa1m5Ud6kfPx112jLX
RkEK9fQ+ns++cIpOJ7dFuAJzpZvK/D8QWLUQl7TyyBtMcW+220Iy3MyTys77
SeCK2gdnkPYBlz/lbIuvB2H/alWx7lUKRofotj++5wdZs1+9r/vPQ2MMP548
OYoNfoaNMu/DQXhxWJOSSsCikxbn9/QafOlYrXPWKAU632hJ/Jtzm+2oc7WG
dNV/WAAeaQ+X1rETKHtG0UoyV6HqP2yHrSfaw+/dJ5Ae+PWoR/1xs4Jy8o/0
Znhz8apDUgyB4Y2DZ4LjwvGXyatrqY/qYKV8g8KZBgK9ZEvVy1aj8HpW29Kz
skqIcLSbvzBC4PcnfeVnPcPxVq2y+sHFQnjJeicwfYFAxcaUHbM7XqJZYMLJ
gMYs0D0dKiFPe/5A7z8lYsrh4M2SfcNqQxJEhO0Tiiok0ONHEK/wz2qoq8u1
SjoQCtkZdDsm1Um444rCyobOSWipzt+ZPPQS5Pe78G5fpOKJObFpHkoH/rQ/
FJmskgGgzL/GbNCN+/8IK7UlUfEbp42rw8Ng6Ak9VsDMOg7X1X44mT6ZwywN
o7Nc2s8gGON02oYJYDw8t/SlrBi/xGkUSoy9hltsLDbzPwng70Vx8XthaPXu
LElcPBEW4bfE/7mf6/U3K/6b83VBhrbHXAT+7+vvlYTeqMi2Q8IuTYHSewRy
PfDgV//gBJd+VAarfGqG5JfDlnOvCaz8dvcUr2kGWO3RVZthqYc8P4NKs+cE
VvOf+Na0sQbiLK67vLZDUOceY741ScUDMiLFa5IdINn8nIujrRiolwyUk50o
6Mz7RSP68QCIsSnee8GRCx41GY8I6hw2htGby8mOwbC/kP5F9hTIOWF9eGhh
Gv9uvpdz8/w0ODvx8a/5R8PwjYANFKZxDNu3M454MgeyGlmvrMWCoCZUcORJ
xQC+8dp6LduFAveT5Z8rjXgC69ZfUs3BQfDbrn+QdY2Az+c9GrK13GG89smI
5d1PYFwwdILIJEOTBXN8lbcHpFZtuzLqTAHhxA1hO8oHINCpu2o0Ihh8Fx64
nekhgPL5rUezTwlEtanYaGxLBvnukv+Z89eVMp1qjdNV/2EBdOW6bPfjIdC6
RWSjHoOCwn/YDnsf/ghuv0Jg7I0m/V3jISBiqPOBbaIFpm0qlbwNCLwuIF8r
NlMELHw/OgIZGiFC790yGx1tzsde3VhHtIBp2L1Guou1YGrxafxxGQX5rp9X
6HT9CN5VzIosDyrBacRv6Z0ijWfPWJ83fzUKdhmNHMz+RRCYzLPsmjCDRSsl
f/heTIGzz1h71psccL01+1hYeQI3hR3KfuEyC0q210tiPqaA7cmqJ+eLP+Gw
Vf+m/iAyJNYfole+Hg9pnJbMCn86sfn+yfNn+qmwh3VN6zNjJGSryE8zCYWh
Xlnzo/MrBOy019nEthgG31oEbbiCe8E1K6LLWJUKB/8eSLymGQ0XIxW3xuSS
QHbl/ZDRxUkY41dtt59Lgt91tssDjwnwfyZyeuVgE6hIxAp8t8yE2zz5/8PP
kvecq6s1rij8hwUQKOTQsHUXgdxs+/Q4d2so/IftYFM1SueoQuCF6PG/G0mB
4Lq3Q/P+Sivs6VO5natH4PJI872jD7KgQf+wozxPMxyTd2g9oUrgQiwHT6pk
NWRxG5dPWTZAltwEC/ZQ8Zbl0Na2iPcw9zoo0nmtFn4+8zOgvqPgB/s4JbD4
CPcmAnkvJFfDTat4zROm87gUP/pAd/sofHgb8166tgJ2GRxc5GibwXpNsWnn
w1NAF3eSvdipBGZmOH0nCsfx9Febg5SeWZA79/jGAXIBsBRVFvD5DuDTxedq
7ywpcDVro0ZYSh4sb1csdmetxq4DytbVaQREsOkwX7fJA+aL9du3WnTCxsVX
NjEdVIimyglUHCyEgsLsHWthJPiioB85Lz8JP3ewKxRfKIHoygyBBx4ENHI/
jhDeXAdyLheSOr4Wgmhgodj/yRuckez7amhzLjAU2sG7g0BxW5uHgiPXFN4s
q48MOrRD+vAJ+5JTBE7XZEfv430BERkFhLZ2G+x5+tKnh6bfrhH0V9J5PTDw
IN/GCLdm2OnMIWJgQyCPAtlgV3g6rqvim+hkaoTi301eAfoEand1nPq7tQo9
l6h/di/WQZPXs5mQP1TsHbqvMSPTitW3Hqppn6kFNafCUzv3U7H1staVc9k9
+FWVzmafaA2IG3genWkmozLL0zWdt0N4Vnb3wztz1WDudCirpW0OpXcW2QVM
jeKkFdNhEe5aWKdvA8XKM0hlL48WPDeFZhbFHo+HGqDumfU3tytD+HtHMEuK
GBlDm35Zca19gNMSdodCXnwC17eOMoeezePmLz7bm607ISg0L3GgigIjbOcF
GZ37cLe0k2agSR0Y+ExN5DYTYE8tE/R0zEGZH/kM0rkloCr3/H/m3MYrcrKG
xhv/YQHUG/z69JSJQBtPdaUtV64raBRX0Jfv6oCcsCjvM7T9OTLbQ9F9pYWa
lTdZlcdb4db7MZKrKYEFkUYn5wTTcV+w/HnNjU0A7o9G45QI3C+8ZpBzsw45
v8b0+pjVQVxq1fFZZSqaWt8hwo70YG7ED07l9dXw++aVtZiBeRxPobCnjn/B
TOEaIx7zUigzldK6mD6DAdMC10seTOGv9cf8lh3zQevPh+LbguO4HoMT2dTm
MDThUxXX+0ygqtpPX84aQHPLvjADOwrOTtybkpJLhefHwho2kt8jSTMuLHQf
gY2HDrNw5CTDhmId8yH1HJyp+nM/hkTgtUs95U61SSDOvPArzasNwl3MKkZp
fpbh8o+uzuy3sCoiHpygOw26luv+POiYxtTYjck/aPftOyS2kqJGQPMrRcvQ
3S347eP8+I+q/8/X/efnpBX+t69LTdeU91mjYigRw/Rh9KEC/1xPyYOPHdA3
w/zzmyaBTLk5DPNCFqD3ym2o6mIryH69Id/hSeCQcIVv2sdI/Mt5mI9HvwGC
HAiT2QCab9FJqZM3LEEf/wK53yvVwJcmEi50hMBzMtsqC1JbMI1zg2cLVxmE
3F/0K/pKwRTXxLvemz8iHBmVX+TOByXzs56zAvN4m7lnF+PEKNpUbm55szsd
mEXK6l8/nkJXjcQxqZoZhJqEJ3TWcVBf5d4UN9CPH7vCzxzKoWDbLsvEXpcQ
CFy0Wbes3YIvDTd8NrhFoKoZjyhnUCC8jiqR/NVbihu0Xrvo9xE4yCjl8Tvc
By7+XB5/cKwbFnh/pdm+o+Lb10cDpPV84P4GHQ+NZ3NQf9BZ2HRtDCMCfeYP
5oWBOL/xm/koAmK4SU5Fv2tRRon0YsfxFFhy1PgfHXwQYuv6j5//wwJoNQ9j
iP1KRerEgdIybQMF7aIrTSsqnVBsy+THqUGgs8Xzg+NywZCWk9a451ErXI8I
uXjCm0C7YOWwqt8J0B6XSnGkb4CJesEQoTwCX6crNTXHpcMxscxjPGrVkDJQ
pFrdTOAwhzundl0OyN1TK8xzKIGLq3SiO7oJ3C6f93XIncanv43XH3mbC+rS
UsVSrQR+CI3ZfrC4DKaBxb2OIRWk21JaXjoSqGn4JbT2VCM0sO46pH0qBhbv
bdBfrZrDT7e61fpfj8GsTuLva7pBkHnCaCrZdRb/0IdZ8l+cQI3uRZ2zN73h
xOpN2bYXfaiWWJI6t4+K1SYSbFEHLcAk+nZ6seQo5DBYj1DC5vHN9e/PI67d
g7dPuerl82g8nL51q6F7DeoKLHkqJXuCnT8X7+cfBHhk7DA6bxCLf6q4Qqr1
E8DNbaPkvzlv45SV+7ef/8MCMDfRJWnPUvHxsTnfcZ87Cv9hJ+g8TLORlidQ
pObu8Y1ZsVCawMMYbdUGYQORrz7Q9kdXAX3EzYslIDzeMLxyuRFKuL89jOcj
sKahPD12UzNYK/l0LCbXgPFIsnW1GhVfS/rHcln2wKVFDSXzT2Vwa/54d3Mu
GZOaty2wkYaBoKM/T2efD7LxzCU5EnMYH8njslFjHOLv+a+5taZD5+BVtxiu
GQzSXhvewz8NwpIhq4Ve8fBjzFuVrW0Sc0qzZcw1SbCTca7+bVkI1LEx73hG
HcOluHwPD6c58GGe5L+S6wYXQlRSB4fL8QcXg9GJDgIsImybVgWsQDHbWHbm
4CdARXf35+Vk8N7m9LXF2RasVBQMi90pMHoq0Ts9YwB6ZzT47Iv84dRQdPX7
7n9+Jfc183wJ7ND9fs2NMen/5+ukFf63r1P8/fOWwBT1//XPTXHXPiq/64T3
1ht6s4QJfM7SKi/LFAHdX1k65jd/gMzdkqf6TxBY2H7yze0NpcDCJN4xstQM
fg6vD+3rpGLQ5sOzks/a4PSpeCaxH/Xw61u/DYcDBSuUQz6zXeuH6EPMbSJr
1UAafMSvuXEeJ3Z8GX/aNQqWLUyLrRfLgFH+0eLD6Bm8u9d4vaDlFJjkbk08
/CwfXi8qKmm1TOACYaZNt3MW9vYZShrmZwCpTST3Q+AI6ou3Rgt0zMPSINem
zcKJ8OyNg1XvYh/GdXe5W22hQqZ2hlGxTQRs4DbVaUlAjE/QP/oMCfA1Zgyi
7gkBVpZurHX5ADIy7j10AgR0G19NvP81FHrc5aY0rGbAoMbBIKSMtp6syOoN
fQmw+OWditMN2v+IBPsU/2ZoVhtxym9/B3f+l6/73/OU+l++Dq5JS4jMUHG9
49nlY9GaVf9hJ1wSo2gH03y1Ve9BhmMhspi69cwuBpqv5j47ZEF/hqYf4mJF
78KCwEp2zpaBow122QVIKesQKCkVFKg6lw2rHDeM9Y2aQV0gHezlaPzQUfW0
kacGHv76G+n0twE+hZMfPM6lYpRDA/dN3XbIPnOMh720Dl7FOfCN36Bg/6gG
cxy1H/wyc5r7bGogqklyio/GD4/C3qZ2ioxBzy93RvXrVaA/nPxh3GkaW3cr
RZe4T0O6zwa32ZJSyKsarUqIGsWabW/M4o7NQwVSZ26PFsKLx8Wsmz27UGzV
5BrvOyowR6v9GRcsgLE9e6ZLPlYAnaRmCG8mAfmjhQ7ynLR8MHrBpIc8Ddy7
2E1UuKZhtYuJyTm2FPReygq12hFQeFs5KYZUB6NHFnZPXSgCC4PM/8vXObef
Ff7nN3ToCl0HqVQcM9pT7ndPs+o/7ISM5qHW/D0ErpNb3+h7Pg4Hh8zYCx58
gOQANu4smq51/5CL6rhVjHItBwekz7SChc7Fw9kLVKzycOSQ+dyINxNdKuqu
NoH/nzLfjCNU9K08ROKL7sbv2itiFq/r4ZGEq3hqARl3sARqjHcNoRN5gOXx
9xqglJUcXrKYQ5l6l5NVAWOoVijTJ6+D4OoffjE3bAY/kN+3bLg6hQsHeB9w
jJfDSwfqWLvWJKaufBqTcyLher+USFn+MoiJ83Q9fWcUNav5Hp5WncfgE2fZ
yKNloCX87DRrUg++vn2M5bMEFQ+Lj6q87kPoHLeiHGxugatDB3QTJqj44qNn
evm5BtB1+dHu/3Me5EbjHaPiPuP+xw7WZ6m1sF6V2LWzloBLUulM1VfyceLb
0vHp2hIYdnT7nzk/lVnXI2CloRDfcU3m35y385i9/NfX3XweUaPPoln1H3YC
yeCN8L++LlqQsKvfkYq3Eses/vV1t+8eEvzX10VonQ/819d5LSnF/evr7uv4
f//X122e8JP819d9//s7/19f511jPv+vr5sV5uv519eRJ47eZZuvBP+dSjH/
+roB3bWlf33dUY+emKpHRcCV82Ldv76OU1D097++Tn4LS9Iu4RxYOsGQ/a+v
S5+W3/Kvr0tE8tnzqimQELH0/V9f16z/d+u/vu7o241qRusSQOLM5FuVC82o
zqfw+F9fl6g4FvlxNBZmNJfKRn4EoA5dC+lfXxctV504fS0OSGfFf9rNdMJw
TQn+6+t6bL3f8PUlApeQcDk/4wxULhW+/tfX9YnU3Ns5lwE/P0f8T18X6WnZ
+K+vKzDuJh+2yAUyiP9fvKEdNrn0jzeMn+i8adlCxbvvSS6XMnoxckL5ovW+
Klg8bki1+z6Pjaq5nXXxX9Bym8gN8RNF8K02rFrfj4QZ77+cFTOaRJ+RI2TG
4Sygu/m360PbBJolqv3cyTuL1PtGR85cTQIvvvum0SnDqOME2v4DZCx3nz4z
yRIJrHHVL6ucKFCq5hvbHD2AnJVezh27U0AG8rK++VJRJPRlt1ZNNybvMtfM
OJoGupserms5TcHowY3pdz8M4iQXZ959kxjQXLJVWbePdj86VWhsncBVhsZR
N5bXwBXhp/IxvxCZSp967xon8B6ZOn1Hxw0aHTKOGIhWQmaDkZ4yzdf8bFi7
1CPoBi8Z6Gz5nxMgxDFs4vm1EUV5tusUikcBKSHlXFFaIfYPOZnIjBNgtv/2
Xn8ZN9jdun6P8iAFallJz3i29gNXah6/+wUXODWiaG71bBKyIr4s8UWQgMxc
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

     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{348.3054973037595, 187.991329666024},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0., 0.9999999285714286}, {0., 0.9999999285714286}, {0., 35.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.2274476675305332`, -2.2982559942585303`, 1.0984062423655063`},
  
  ViewVertical->{-0.22591418118891657`, 0.23309576636700807`, 
   0.9458483739159881}]], "Output",
 CellChangeTimes->{{3.889178686550375*^9, 3.889178702975213*^9}, {
  3.88917877069703*^9, 3.889178789774218*^9}},
 CellLabel->"Out[81]=",ExpressionUUID->"e015954b-8b68-4d89-80a3-a0f9e1f71894"]
}, Open  ]],

Cell["Compare to the usual multi-channeling implementation", "Text",
 CellChangeTimes->{{3.8891785794411573`*^9, 
  3.8891785892730103`*^9}},ExpressionUUID->"9b68a792-6870-42ec-b4f2-\
78921d3d9677"],

Cell["\<\
Ok, it\[CloseCurlyQuote]s bounded but not super pretty, we can also look at \
just one channel at a time\
\>", "Text",
 CellChangeTimes->{{3.889175550318372*^9, 
  3.88917556780867*^9}},ExpressionUUID->"28fff1c2-1643-40a8-9260-\
e2eba4cd5a57"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"NInt", "[", 
    RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
     RowBox[{"\[Sigma]", "->", "Null"}], ",", 
     RowBox[{"sampleID", "->", "2"}], ",", 
     RowBox[{"sectorID", "->", "2"}], ",", 
     RowBox[{"useIntegrand", "->", "True"}]}], "]"}], "\[IndentingNewLine]", 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "10."}], "}"}]}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.889175117391955*^9, 3.889175156349967*^9}, {
  3.889175196358161*^9, 3.889175317033966*^9}, {3.889175573358655*^9, 
  3.889175593546682*^9}, {3.8891776046420307`*^9, 3.889177609388266*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"5bbb1456-e9a0-4bf0-a22e-850901555d52"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
Qufd/dZoP56z9TC1NFXWNfWOTE+8R7xz8v21hb9ZKF6d+zSMc3tEPMX6+J69
Be2UWUZVriaGZRBv69MzadIUJyXrmH5geuJT4vy5j3Kjz+8LO6htsNLGKjLN
jJ4LfvS4mbVLkg09F/zgkl610nc703PBkT/SR5h0ctfRuayNHrew0exkF0oP
jvTg5Yd/0vrFXdP2vn4jJvKzi9Ik6mpWbu5z4jw93iPu57Qj/s/l+4KHb+jX
zDxa5gNuZ/OtzOwcFwX54r0rGT/QdJlpqiAd+OeEhUdvf7AkffA7pmxYyh4v
DT0XHOVE/tCjc6myy5N7m1P+4B/Wv7g4092O8gfn3wvP6d+x4KttAzWUHhzp
wfHeiStGd+2+UEPfEZx/r43l1gxz88vUFj0TnXinio1S6GFEIb+4LOJIj+fh
/3870HN3wGdb0hncrcy26j16aigf/A5rsvKqv5FG6TlPOzcsPZt4jbs6qys1
s6X3wv8vERP5y/u0GZUfPNigxE/PTEuqV+ABI5peNKosywPees6ORC8DR3ou
fvFeaCf4bRRceEvBZzoK+kPwXpeG/p1XR78E3uZxiTquz8zo+6K/XL7yXkbr
17K/QvoKF7T7i3Wypvel+fOuGWH6R6yoH0P6XU7N3ap/ticdkL7A47Y/Hu9y
IB1oXcCh+1KrJFk/wTvde5C2vL4T6cP7B6Tn7Rrp+boDdOT5oL/jHLoh/2Nu
H5yaRkg7ENyjf1yLOVn21G/z8uB9Q1pH2YSnn8zXXsCLZ7w55mpqQd8F/U+H
wOkTPIpYkP5Ir/n5c96SvrK98PyRHvls+tqiedcAOT/G0yMfPu8KnXl/CM77
PZQffKWdc9aaKbI/wa/R6bOTrB+Z03shfaNu1boPrm1DHOkbL2n+SCkk+3mk
Xxzz1bxkWUd6L/DLA0a8aFfHmdIjH9N3nxpVniy/17/ld6P6iXG+jlP4xG19
nWn85e8LHZC+/sLyJ/ZEulK95fN++Pcoz1KvRR6JbUyon0e9a+J+cUr2dRPS
DdwhebvhvY2yPtC6So+Pw9PNbOl98f/dWz6v0OacnJdDftNXbrl5/6wcH/m4
gP4U6VfapjYdbSHHKbVxBO3D8GjdjjUHynlFpL/x6OHySqNt6L2Q/milnJhV
l62p/Hx8QTk5x3fh5cF34enxPcAH9Z9UbGO4nOfk6ZEvng+O9gBepEdC2u2q
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
/BzP7VS5z5GmefLvs/R4maH/x3NL+cau2XnnmXZQ9shrT+9KPi52ZNyUu8+0
HSyerVudp/x4riZxQdsq0+VzP5ml50y0eqpdeXng25Rl1/M9l+vzPW3REqve
T7Q7NuT6bsmS+eyd/Hqtdlb+/KEP52rx4tTOQaut86qdp1Zb51KbP1fb3662
Tq12TlZt39r/775rtXU3tXU6tXPNavug1PaTqO2nUotHp7Z+pxZvTW3dTW1d
T+28rZpfrBanRW2dSO38qdp6k1pcHTV7QG0/ttp6tNr6tVpcFDU7U81fVjvv
oxb3Q21dW+1crZo/ohbXQm0eTG1ft9r+NLX4GGr71tT2h6vN56utv6vtz1Hb
n69mT6rFs1JbP1U7f6127lJtfVltv8f/OrfO7Su1dWS1eTC1849q+7LU9mmo
7cdQOyeuto7/v9YT+flWtfUptf0qavNjauOpml2hNl6r2RVq477auKxmt6iN
72p2i5q9pGZ3qdkzavaYmp2jZi+p2TPFhg8opquzg8adZtt/LDiUoqtgvgP2
SZUFtVa5ZRYgjvSFn587GPGrgLJg8/3uOjqnKf2xX2P73RpeiDjSD5qfogQm
F1IGiHaF9O+KB197P8WAONJnRvTx0y9rqJhdOKb53ZvJ8hx79vCcR3HiFH9O
oxPjPclI2SfqJdIvezmoxOCTxkqX+gsMdHTuErdZPHxs055mSu7f/x4QbyTi
AIMj/zQRt/bKvUrfc3PlefyDvZMiKxVxVtaJfoCP40MXr8jJzc1/zqux6Cc5
t21X5EVubv64weA8fZaw63h6cJ7+sPGg+7m5+eMMg/P0qCfoN6b6nG0+7Yqs
J+A7o/d1a++lT98d/K1/1sSqpQvT9wXfOnnj27Xf5PcFrzTgc8d6RYxJf/A7
Ip4t9Of9GPTnHPpzDv05h86cQ0/OoRvn0A3jUZE+Of2KvJG6gX/v+Hzsr3Cp
G3jfwAdrDWKlbuDxtR979pxXlHQD/xTx1GtppNQN/IuITwvd+PgI3fLtpxK6
5RtPhW6cQ7d8cQ+EbpxDN86hG8bZru0zdVqb6pFu4FVz3vlc2SN1o3iogwv1
Ov1G6gZ+YJnODP8PUjfwKe/XjfOYaEz9BrjTvKLOX06ZUb8Bvsjd1v1jUWvS
GfyuiE8LncH7v+q2e8ceF+ofuP0AnTmHnpxDT86hJ+fQk+LNlpzmVLW61BO8
gXmLkMyCBUlPiiN7Y9uq/cFFSE/wUcd9xxweUYz0BO9wKOOZdo+sh+AlRFxZ
6EPlcS6YtXyTo4Lyc78G5YcdlNBiv51vd1l+8LqnJiaG9ZTlB7f69SHU0VSO
L+DNcq4d2jurOJUT/JWIy4pygidlG864WtJJwfcC33F7wJjOl+yo/NyORfnh
T8yq0nb7zZGy/OAfXx4v0ChZlh/8w/J7MeMeyPKDf7u5KfWmVwkq/79+Vklf
lD/f+VZRDznHe+Xz10R75xz1M9+5WlE/OYc+nEMf2OPPH9ctNXeq1Af80rZe
bVa/kfqAr5i7w39ipCHpA57l0vnn9LayHnK/GPpwDn04hz6cQx/OoQ/n0Idz
6MM59IHd+jyjZtbeEVIf8Lnrdy/NvCH1Abd3nB8b1d6QdOB+NHTgHDpwDh04
hw6cQwfOoQPn0IFz6AC72ME7I6RbB6kD+KrMqqctI6QO4Nu0HoNODDQgHbjf
BB3y+VNCB86hA+fQgXPowDl04Bw6cA4d4L+/W/KjxqCSUgdwa6cGBS8+lOMj
eJOunb4frCL7c/CMx8fbnGkq+3Nwp6Ndr1RcI8dH8FnbPzeJXyrtZ/AWIp4n
9ARv9uXPfv4fWrwXn3/Ae9H5rBW3g90+SHsJvMS+EmU6BMj3At++uLqlazk5
7oNfvtFxaJ1QaWdSfM7kEb+muBtR+cF7iTiZKD/F4bzfINjTx5r8Jsw3vi6g
d3r3JVlOOp/e6OyLgYVkOcGnPrrXdOs86QeBGz3x/bhqkqyf4O1EPEmUB3x7
73vfqtaxovJgHtR3ccL06IOyPOD7l/f568ehPODxDleC//hrKA+4zb5xp/74
ZdANvGXtx0f/+F+wi8BDs3Y2yOtPgaeLOI0oP/j2C6uHlzW1JbsIPPv2LfNB
++3pvfAbkHD3jW6yfK/OYr1+99zHly78lO+11GXd0wHp8do9C15vjNkt3+uu
mKcN+DzUauMP+V411lzpdTBsqbbWl7JVW72X9kA33IfA/D4dUZ6zC7V9ZvV1
ovLXF+UZ8zceozHZCZNEeXg/YCiey/uB6Ww/GN5/9KxBSXFuR7UNE7b843/h
t8HxTZFKOVnfau1p1OluYrI2rdfPjZdMZLu4J+aT522tv9xqn2wXo5omaOe6
JWnj/G2neQZKuyJe+DW3mP8VLcpTZOmf+JC6pENjdu4DOniL8vB+Mo3Nb0Of
gaI8XB9Tdt4E/cmex8Xcm8Ttyafbx+5bs9z8zmqDbu/+x/+i/fb6YyvcCZa6
4ben7YiDpwZL3YLFPFiTK7UKuHaQfkSVzyWupiee0O452vjEuerS3nAQfs1X
5n+9EeXh40sKm3+DbrGiPFy3QDYvB928RHm4bjrs3AF0S6tbp+G+sOP5dNtn
/WF2emKattWHRf/4X9jn02jd8yHJCVK3KYdn+PnFXdY+aTH55Ys0qRt+Y6Ie
vV55ROq27XSTQuHpF7VfBjSYXqqv1O2c8F/uMX9qjyjPrBS9El9ru1L7miie
y3XYKPLnOkSzeWDo4Gc+cphf3Pl8OkSOm7PJze+G1q14pX/8JszTpjY/V+PC
N6lDvVJle8a5XdfW33hMc7CeHGfLiXnF8TqDX82vJsdZ/H5bXvPc/GlShykq
flOEKI+FTqj5dj0n8jseDupyIyw9v99XIdPzeFj6HW2DLhH/+E2Yj7Vo0mdu
bEdpL+XOPjUyPfG2tkLPkA7nX8jyPxfzuj92R35e7y77yXrC33nJ/Kby4rmT
G8bHj3gp/btl6V/eJIbdzFfOV/7n7yaGPdB+2VDqH/8I60QDL5vsTdsjy3nw
S68Fbn73tQE2C2dcSpT+0Vox/328S5fNVlvl+I7fvw8d60L+0QvxXN7u9ov8
eT3pKMY9Xv6rIr+OM2r84780EusPEQ9cvBtl5Sm/l+6txLBH2kfWurX0A6T/
gnn3lJym9skusj50U/FfaFxi/UlDtt6H9zognsv7E0+2Doh2tGbChT1h6fn9
O0u2Pkj++43Fc9z88vt33nEFprr5PdG6h3b6x39ZL8p7ttOnKQvvSH1snl7q
lZ6YoV3p12zoj0DpvxxS8V+8RP5ch3VsfRA6WIv8uQ4z2PogdNCptqxOnFtG
Ph0Gs3VG6PBieoiDX1x+P252wyvmfnHPtKmHnfrm9V8KiPWf9z22vo4eLnWI
EuX9Fejl92ultA9tVfyXWSJ/roMe21cJHfDLdchk60fQoVtWv4uJYU/z6XCF
7W+h+RBt1c1h6fn9uNffVq0OS3+h1fnZvGZe/yVIrCv2M9Qba/JG9qvXm4eN
dvN7oe3dfPDK2lFFSIdo4Ue0YX5HFvJn5Vn3vmC1OLfn+crTdPsAzzi3V9q1
iZ598vodR8T6lfv2ub3D+snyVNSrVdQvLlNb2t80uE2wHO+wTuo/rNuU76Zy
vNMI/eLGffOdtlXaVzdYfH6Uv4koT2iKff8Jq6Xfsaln7YOJYa+1bT77/eN3
2Iv9aZ08E2qkG8tyzkk0XBSWnqXNWG9cr/8BaQ9jn8iTyHIrLjyQ9aqSit+x
UTx36667nyZVln5HIevijdMT32iPNgyYPfSQLA/2X2xZ37i80Rtpn2f3u+0W
5/ZGm/DGtMH0ybI8PcS+DG9TN516c2V5YnFOgvkR+uK5D77PHLUtwYbsz2js
cy75/VbcSA35rQeFXX0+JTR9tYkJ8VBht6c9qd+v5XwT8muG/kr64eE3Xjuk
Tc/VnnukX6OjE7L/z7pJY7FOhPSWQo8hIQMt4tvJ72ie+18+w17a74jdKf0d
27T/yrNUnO9GO4xjfgHK6SDs3ugW9R/kDjKl8vsLve8M0rn/U1+Wc6jwX64K
/wXlHC/s9uPdBozxsLem8lRhdjX4VGYv0fyhU5517bGKL/qN0mxdG9yLcZpf
Eu9xTsSPgg7XKgdW8Yu7pXWNnRy/7bSLgnyeCDvEXsR1B88S3FZwtLuYFT9b
xrnd0248W2Vg6kcT4slifG/U+1ZWgK/UM1LsN7BsY9XQo6UF8euID5ZTfmnm
QEsqZ6zIH++F/NeJcXNNovGF+JVm9NxDYvydVH1Gv0tP5PrCDDFuGhmezDpp
akE8VvTnt7q3is2pKNclNf/0/65kz2xk/RvKOdLg5mA3vyytVzPlooViR7rp
i37AVcRvBy/C4rqjPIVFu1tfZYpxUikzqj8tWJwQ5BOE/VYiHjt4b8HbCY7+
JFW0u8AdTuVtDurSc7HPynTx8U6a/ub0Xeje0hbxDd7omJI+SF9exF1HPkg/
NfZdo6cnZTuluOsr+jW+VcOe3gvrpOWtLVIXHran7w6eeS4sfNMgJ3qvE2w/
GHjBA/9y5DOH+bkYp9yFDpw7CZ3A8V7YJza62KH7Y+takQ7gpUV8dbwX31cG
bsz8ROhcSPDkea8qtl9vRvqfFX5ryFa9AUHPJR8t+g2jrJYtgx9Lvlr4j73n
Dz859Jqs/zeEH2r1etOKpmfk9/om/OXE5j2aXW1tQ7yF8NfuzBj6bYKRDb1v
WbbuifRJwn+sU7Hh6pYNrOm78/0tZP8z/5HsRtGOuT7fxT4fg/cnhnvPk+/b
VfiJX8ZW9+mzVHL8enUwynU+LbmN8MvWPvLa2KyBOZU/Q/h3/Wek9L6eLL9v
mvCX7zB/GftYfgQnv7pxTdZPvu8InK+7ob+6JPrhG+57Hlx8YEz9mG7sf37i
pzVHk6cayn4V61/V7frpVgyV4yx4uYC1mZ6bzKkeDmP7u2BnnhfPdfobL91U
AdcXzwVH+VfxuDeIa804lf/vXw+1z8v0tGnwwpR0xv6pn+8nxF8ra0vlR/qE
xE46F7tbyXGc+UGoJ/ni8KjEe0f6eOZnUf0QftmOIvteL2ki6znftwkeyPxE
2FfYv1ZYxFf/Xxz7xyaLuOucTxIceuoJ/2j7w81V08+bE7cVfpZT30WOVy9K
Hij8iKedNMHuhSSPFnpEre/4Zeou2T/wfZsoD/YbbhXx2DnfIjjyP7yqepf0
xOfa7XH2i6bfkfX2hvAvKhVN6lhugKy32LdY3Sj3VXyoJXHsf7zr27Rhi22y
neK5n9MsvnTyk/ZeJXbOCzwu735LpZov6kOKKCevJw6iHSy48ieue3Gq//jl
9a2ZCo9n+znBE/LysdV90e4OsfKA3xK6cU5+M+NVhN/E6zn2nTbMHLl62DFp
j2H/4LB5rXfV2C2/C/azjz60pEPsDbm/S3/jtdTEsJdavSFVTwT3lvbScOEn
NmV+Ivy1Sge3h8fl+V5vRf7XRHxF6IP1ICcRHx7+L98fi/eNFnZXiFmpvb7J
GurH5gm/zDKw/H7NOw3Vw+Ei/fuCc8/3CpP1Nk6kH9V25MOypSS/mbxe1y8u
W9vhwbxeFpflvOIb4WeFfCrc79mNYmS33BHps5OeVJ6ULe09rCs1E/He8V7w
E7+IuA0o/w2Rz60NgYsyDzkQfyueW+BvHPgSZNelYP6vW65PxXO6VB7sxzfL
Od2gaKQ9lQe8FbMb+XkBPJdz2Eucozyw3wJq75z2Z70M5eH7+fFczlEPsX9p
s7+mc6/P0v+CXZEu4q6jftK+rGrZjtf9bKg+Y/xdG3/qyo/fdgKey/eTIB++
TwD9HtbN24n45Mgf/eetU0mts1vI+ob0neeEn/q41pz6T6w7lxPxyZEevP6a
IoNiL8p2Svd4fiz3ZeYlKyo/X+fF9+Ic+aB9OVaO6JhayoTqFbjBzds1DyfK
8qPerl/iOzX6WjEqD3ivqiuX6bYzpnzAfxo0jk6bY0/psX8vyKB95ug+ctwB
H/Dxk0PCDGuqJ3SvWvCgffFzpB/K7x1DfcC4v0LE/ab5SRX7BN83oKJPjfNj
pb8Dvsk9Jnabhx3lj/7ngIj7jfzpHo/kqG6bW8n2y/sr9Ido7yfej7rbv47M
B7yztYf9pZ42pAN4juHzljrlpV9ZiPmVaI90P1irC+aNDOW6Btr7y0BPj8vu
cl4CfPO4hcYjf9pS+cE7LZgbPdlbri/w80HQ56dov57CH8Rz94v12YQipkuz
q8jvcomdTwG/qcIPi3HqkIgHDn5M8D2C07yB6M99X/XuUaWO5FvEPNuCQ56z
fcdI3kD4g+f+3uclx7vDYt2z87ybO0Ld5XzULOFX/rre7qLbJUv6LpOZnY9y
7hX16zybh1kh1mtMpj5/PLqhK+Uz65986tD8T928/dVYxRf6+7F7z8FXi/q/
VLQL1HMrYVf7ijje5B8JrjDuJ9Y7joj43uBYfzkkON4rMGBt6/TEV9oam7Pq
DY2V9fY2+h8xvoNXFP1GEzE+0r5f8b2eHis+4U5zuQ8Q33ek3t0mx+1l/rP/
GY9q+SI9fous/XNfZ1HKB+M1H9eKiHkYzrPE+Mu/78C8ftbY2r7QZ4hYv0gQ
cbPBowTfLDjymcXOB6E9FhJ2F+eYx94S/+d+h2LU7noJ/ZcNfx3b6pmV3Fcg
7J95Y5/ELgqX/Q/skZvMHoMdGCDiWuO5yH/axIcVPbZJfkzo9HL/2HeRH+yl
X6miJ8aLtb3j79UOkt8R89vHRXxp5IPyRFdds2P1Zll/dHS27M+73x71fxfb
3w7eQ9gPd4T9AH2Ws/0AtE9VrDuPXPn47oLZcl9KBzH/UFrEhab9jYK7MA47
pLeIF432ooj88VxaPxLr0ef/3tdmRumRzxX9aPMpy11JH2M2fwLemOUPzucl
UE4zMU8yX8SRpn16LL40rYeK/sdUxJdG/lPZ/C14Clv/Rb/6kq3rgRdg64P4
jvCn9olxGd8LflDHAZnn++yQ6xewc66JONKoh3qsfYG3EO2Lc37+F8+F33Gs
bIu53j6yPGgXD5ueetc6RHLY+cn96oQUypDtUSPWm/aJeNHgToLvZ7yJmB8u
KeaHUU9Q3iEWmV0XmGqIox/r3CWqSOrvcRkc/d7oRnufHXrqKPdFCLv17N/7
Z/XoufwcH637CzstoaDPlSAvmY+emF/ySPFe0izQkfwgfq4N9YTb58iH7o38
e2+gDuV/WKVe8fN64LCr+fz/v+dPXX2RHnb19L1d964wkN+Rn1eFnrADJ9y7
m3XXVNoJ+eITivQ+ot5am4V6GhWR8+Goh7uDZxg+0Eh7L999sujHERf97/3g
xUhnbr+Bcz8O7wU/7vqyq7M3GEn/Hf4a9uOBLxHrgDPEuhvywXw49rOBXxP2
1aoNE1p23Cv74WhhXzVb9CdOsgnlb8nW0fC9UA8DRdxj5NOJ7TsC38zmn5H/
V3aeFN+d7iEP2Js8Qld+l87i/5eq9SdesZznxPyh/85FDdedlPPJeiIfXn6+
PwT5XGf7T8Cxv8Wp7p/4xiXIrkA9H1e6n6leFWmnFcQ9JCL+MDj2RawTHPnz
/eHgjdh+A/Agtm8BfL1YL9uuN8bxQqQ95X9EzHftnRZW9laIHfE3Yl/BCv8z
/gPSrIhjf4JZ26DQUH8b+r6wi8Z/+BPHuChx9B+PewdPKmZpR/X/WN54CynV
fMEPszgM4Pj9JeIe4++3jKM9wu79MelPPGRD4lgftLnWtlqAjvQ7eHxCai9s
3yB4Rbb/kPpbsX6he/z+tQvVXEgHU2EPRPxcNXqcjzPVQ/S3sSLOMOo/1i9u
I56wKOdjtv8NXG29g8cHxnfE78cul7/YnZb1bbawE0Kun605eKX8voH4d1dT
Lx0bLPd5Thfps/7GE5b9D95rk4gnjPwrsv1L4DZsnxLaxQaRX5SI6wuO/VTR
jF8V+3M2iHi/tK4t+HrBoRu3N6DbCDZvA35d9Ocuwm9C+eHvP9+y08pwj+x/
Ngu/aUQ548SQ0ZJjv0rwuUa3ti+T67nIJ1zE6aV5DJHP+4FXo0w6SHse6ddU
HLllzjlph1cV9nxL4ceBI77TKxH/Fu0I9kwvEecWXMPi34LDzukn4taCY31c
n/GRLM4J7VNlHDqEs3lFcOxnniHi1kKHsmIfJvIBj2f7MKFDE5X5xiD0GwuC
bXtUl/NjI0S/cX7Dki4b0+U6HfTss7jjaScb+b7wp86KOKt4Lj+PjPdCHNRZ
Ig4qONp1goh3Cl5B8E2Mz2T7aWmfAOtnyH4T+ux8+C2k1gg5Xl8U65LDHz4J
zvZxpPfl/Qzyf4U4TyJ/pOfzfrSPkY2ztK+P7asE5/szaf8S25dIdji/p0Pw
QBa3BLyXCs8Xz0T0G/nioqjcO0z7fNj6Efhbtn8PnD8XOt9CfCCxjw4c+1sG
iH4D+cD+9KhnHtEsVY7vsD/PFOta/toe2f8UYf0PONLvEvFCwauIet5e7KMj
v16k3ynSQ0+671LEBUU5wTV7jMu13CvthGw2vtN+EtjJtW7f2Dgoz3gk9slP
/hu3U+7bWcridoKvZZz8CGZf4b24/wKercL/WZdUfGj/El9PxHd5LfZpW/rv
vXjaTY4vScKfKtzn/JhuN+W+Ix5HBekx/mZcXPJ2X39pv3mLfjL689Lw16Zy
3P8p9sPfW3LdZ+kymR5+X0Tq6Lplu8v0PB4RxlnYq9dE3EuyM4X95f84yzhg
nBwHbwu/26nilbu5SyRHfbheIGKUTbQp1Qf0tz3FeIT06JcGXQz3+tFVln+I
mLdpWLZmZIEyktcR8zDVSv1ym1Fb8pWiP9QElRt8s6TkV0V/2PnarqdPm0uO
eRu7at1sWztYUb8H/Scs/1y/luJC6eEnPizqV8b7llxPby78yva7Qq8MPCHH
Hey/3V8++L7tAJke7Xrl1OS0M4PlvhrYA0uyZj99M0euizkK3aJEXEdwexWO
9l5WxN8DbyrG99Mi3iN4c8ZR/w8z/wWc77tGu/4h6mHSka1HDCfJeTkfUW+v
G7w/7jBLcpzvOPtiYoPdw+T6VCibDwEfrMJ5PAHwKypxCbzYPgdwPo6A57u/
WHA+zwwep8K/ML8YPJD1A3TOjs0rgmMdhPNkFX6LrQeB8/EdnM8XgQ/kca6g
jwq3Y/GUwM0Yp/3wbN4S9RPjxaFSNr8SD8l6OwJxoEX8STr/y7jafOP/8lv5
PI/aeodaXB21ODBq8xJq8xtq83JIr3ZOnJ8vUFsf+V/+FJ8fU1v3V9tv/P87
X6Q2n682DwndsW+ixLHbTzvp61FccfA2Y0f/vRcJ3wO86sGJv1LW6ivY9wCu
fDNct+5dYQX9C/itWRPSHlQrRvF1wbd92F9v9XtjisNcjO2DRf3jHOMl53gv
nFf4GfNZ89pMvhf43siM/nnfi+JSZG2ce/OqfC9wv/vLPFr0LELvBe6zzuzh
pjLF6b3A61Satn7aGxOK98XvTaNz9YzjfTnH+3KOds45dMD5DP15U6529ZA6
gNe1PxqeVwfw0Qn121Y2Lkg6gDeOuzdzXZrUAbzY6ppBVzKkDpS+ZOo2yxhT
io8N3rSaf9c1BeV9eQvY+hd04xy6cQ7dOIdunEM3zqEb9svUKZ90Krm51A18
8ZjkQXl1Ay8W/etB0zZSN/BDp/c3a1TJgHQDjzctGx7e1oh0A3dyVuK2b5O6
gT8ob9Ti+HErutcAvI+Yf8Y+kgFs3IfOnENnzqEz59CZc+jMOXTmHDpjX8yT
N2aF5g6SOoM7OzWKyqsz+B0PpbDDCqkzeClle6eOS6XO4EE3juy5t0vqDJ45
WLdN6XipM3j5ist8Tt2zJJ3BfxQt0WPOUA3pDL7Mf4nZyFRnau9mbD0UenIO
PTmHnpxDT86hJ8bzdl2/2FZfLPUEf3wvaURePcG1j0fmfH8v9aT9a6aaj/6u
hqQneOei5Tau71qC9KT9aOUyzqe8lnqCTzl20zPtgNSTzjlVjdYa1rAjPamc
XhPady8g72MFHxTtufNgORcaL8CdXs56UHirKcXn38fsOujJOfTkHHpi/Fz+
aFO5oof1FHDyj2vYHFmfLnVG+lM9B435ozM40udUeDwur/40PmfrnfJpW0gB
R/ovF38MKLW7EH0XOj80c9zazg8NiVP+z85eyjxZlL4X0nc+ZbTlvL8xcaQf
3ys1oEdzE/qOdC6nx11Hr3dmxJF+QbVjg79nW9D3Rfqt5fpW96ppTd8XvGNg
yU0Hi9jT96VzIaYZpkuXyf4ffM3V79d6WNtROwLn7YhzfHfO8d3VON6L1wee
HpynR32AvbYvNrdK0HNZH8CPvmo/Pu93B+/6Wvn246X8vuBF5/7oXnNIMfpe
4Iu3fZgQoTUl3fg5cejGOXTjHLpxDn04hw6c03ktxL3o0nFC4ftSB/A3lQv+
U//B6x7dF3P6rtQBvFZSztanUVIH8K4G0dOz+phSfePnwSnuNOPQjXPoxjnd
J8U43VPAOHTjHLpxDt1gvyd9G1C9d4rUDTxqRqnReXUDP3Rs5qODU6Vu4K0S
vNP1Dsh+APxIi+8P7iwyofbIz4lDH86hD+fQh3Powzn04Rz6cA594D8tzjlR
tOk8qQ+t85QtNzyvPuB+QSaTxuhLfcCXbzpV2G6iHNfonOvOGbV21Jf3gID3
sE1+07KHOfV74NYZ78ZunWhD9ZCf14DOnENnzqEz59CZc+jMOd0XxTh05hw6
Yz7vWunJB9f0kDqDT5i2ekhencE3hxzZ3jRS2g/g4xvVWrm2trTHwGtVruni
lyP9BfBtZzZaTr0l7wUDt466tnPUR3mfF3ifEc9rnAqX94/TOpizw0Hnr2bU
T4KXWmBaoeVCCxpf+HkW6Mw5dOYcOnMOnTmHzpgv+dgu4IpuZakzxaM95zkw
r840/1T4waSRn6V/SvEqBo/e61ZH+mXgl46s/1TcTfrd4DMvbvh6SzEmncEd
I+w2GKbIfhX89fctQR36WZDO4E/GeMXoFpPjOJVn97WmHp1tSWfwWu+X7tTT
05D9RvNhxUfVXhwv71cCx/1o0Bn8stOh2DV+ReneZ/CMkX/ufTYgOw3zTwUd
zlu2NtMj+wq8bvWkNbYbpZ7gryblvCy+T85jgH+sYrf3dNuipCd471ubi7tM
KkF6go95eWXaPB+pJ/hW3U0Tbmabk54UF3C97sxmt6xIT/APNzYE7Nog9QRf
n1Tqzc0MqSd4ATOdBQe/25Oe4BY1Qt3GvLcgPcEvJN1MCThiTnqCo96OEvEF
MN+SmXbjej9/fQVxuCiORd1NHW/MLqwgzhTFuZw3d/vuI0WVQWJ9guKDjqrX
8cRGY8VTzHeDa0JT9m0MMFcQfwf8sojPhrgz4G3/7gfTURCHhc8LIS4J54gP
wjnicXCOuBicY50e8zCl74ZVmzOzsIK4WuBG0WvnrjcrRvergv8I+2RVurK8
3xA83brMlA27LOg+Pj7Pg31UnCPeCueIe8I51kU4x35ozhEXDPMnpdtW2xZf
tJiCOFng7W9esH1dw0RB/CnwiIna7uYPLRScC+XzMDi3yXklsT7EOc7RcY64
JJwjbhfmJTbbjY3YcseY7pPl8xVYZ+Ic67755knEfDf307GexP3NbsyvzBR+
ZTzzBz8Kf9CB+X3Zwu87x/y7scK/m8L8uHnCj0OcL/BH+3bVNLDRKIhLxf0d
xGniHHGLOEccH84RH4fzSip+GdZTuV8Wq+KXDRP9FfyUO8PdUosNKKTkiP4K
3OCy3odjV4oqiEMHPuRyx6c+V0wUxGWjeHX6veouTLRSEAcNPDT+xcWZ7t8p
XhX3jxC/iXOsN3CO8xWcY18U5zjnwPlR0S/B73jc5sD2NOOiyjLRL9H+tWGF
XR60MlEQT4r7KdhHwjnWgTjHPqp8/pToTzhHvD/yd8YUcfE0N1awngHuGPEg
/OZ7cwX7S7i/gH3MnOPcDuevRf/AOeKbcDu5m6h/6P+HirhAM8U+HvDYMXVb
ub2xpfvdqD8X8Xxw/w24Tbn4wmPirek+UPQnUX/3vbvk4yGC4/wn73/UuK44
z4B+qVf2+UY+5q6KndiPCF7x+o2YyM+mCvph3o9hnwHa43CdMt2jepgp2G8B
/uVe+/G3F1kpjcX+Ej7Pg3hA0N/Cw99vwTZbBeth4K2vWfRfuOQnxYPAd9m/
YnTX7gs1ykbGJwqO/c38O/qocOy7gt0+6eiys3EzbZTDYt8z+ORu1ZP2B9oq
ONfE7Xycx+Ac+w5pf6/fyqv+RsUUxMdB/bmkfefft6QO2ZPge3Ym/9hy2Zzu
AQTfnVn+07h90s6k+z22OJt8q2erYN0afEnlHjVPNLci+xN8btj+akfeOlF9
A981ICJh4Sl7BftKuT2Ac+DcLoI9yTneC/ks6WI5w0xPrmuAR96/caNoa3n/
OH8u4lPw8T1N1CuKm9v466JjI80VxLtEu2gfOH2CRxEL5SXjHQWfKeoh8vlh
dXbk1iA7BXGg6F6Uufq1jJ+ZKohTSXHjvrZo3jXATlnP+BbBoT8vP9ZreftV
493FPnjeThHnBbztlMiKmcV/+9HiPAzF+Wht3tSlsoWCODWwT7bGzFz9OslC
QbwtpP95rHeQ9vBvv0+sr4O/9Th878Vvvw/60DpLiRLBW885KMmiHYEP3Lj6
UvcAJ+rH8NxMox+rx5Z2pvtSad1h5bmpTz7K+1Jp/l/s90ZcHtrXUPTjlQhd
UwX7pdD/pAaabj1TwJTaEfjc/X2r3f1uQe0FfEXbNudNltpSPrA3DI7W7Vhz
oBm1U/Bnwo5C/uBHKuXErLpsrWDfZz57QOznUJvX5XYO9u3x9HROD/cAXK9x
Py1azs/nmx8W41G++VKhI/hksf/cSnw/9M+jRFwX6MDzwT4k9LeJIn4L4spR
vArPwBm1bU0VL8ZrC444ceAHvGfWXb/fUsli/ITgiPvJ+/lYFY54oNT/Rx6Z
Vrm3RtGI8RH8V5dxVxfeLKpgXxfPJ1uFI84m8vl2+b94L9g3ydNj3yQfRxDn
hadPUOE4l8jzQTwmmk87UOXCgTRTBfGYqJyOJS/2PWOmaET/gPErR7P32l4X
UwXnLZF+xQqnPRfKWio4bwm+1f7FsIDqVtSukU8BW+MyyY3sqF2DdxPnf7Hf
i/aRzW7SokufEkq0sEMwX7EhKyxkzAcjar8Ur1SvUFSPqWY0roGnlMsdUDPI
kvofukcr4FLH3X42VB7wJrtqfOu1zF7BPifw0PhCv9KGGyqI7wbulbAy8aS7
Ds3vgZ9L6R32Z34P7ZqPj9CHc5STj4PoZzCObNs7slpJWwvqfzBedBDjGvoB
pK/mPMUiw8SZdAPv9mJayLIgDXHks0mMXygnH3fwXPTD46wmdnq/x5zyAXfR
b1I16qW0e8E/Lbq3JjzKnjidVzBaHrowxJG+F7jhhvgpurq29L24n4h8/u0/
3X2RD+9X8V6co/y8/8Q5QPR7Ffre3GZbSq4jgOvXtuuVMcCGxhHwg+dmOswe
baEgH/Srg45qX8ypWoI42vUO0X8iH6R/8LZ25Xn1zIkjfXXRf+K70H1Hx34W
erjHjjjSp4j+E/qg/XYuuPr+zkfm9N3BNeKcKfTn/QzmVTjHc9Guvdt0rJ8e
bUL1BPxsT/fYvqbmVB/AXVr6Th2bIssJbvJa/8ypujY0nwPetvhd3/0bNKQP
2mNT3XX1DNsWJx3AY6q3jsvNNKb3BX+w/V10j0d2lD94/4euNhZf7emedPAr
m+d9uTFEtke03wuVB7h+qCjbBbgmx6WD3SJbaqf/1MOxbr7JKvMweC/UT2/n
y6EHdOVzwZeFDByom6NRDon+Gf1MSfNKroXeWimIZwre+qXFlOPzHJRXzJ45
JuwZnFtD+70k4o2sZxxxSHAuFPx+9BodPxtXpQDj9wT3FvuP6fzol/nPJwW7
KhUZf/j5P45zBegHPLbY7VrRUqPgXAH45OSBA5e52ymHVfTMVOkHcF4Ietbv
PDb0y007pZAoP+pb6D3Ny4tT7Whehe5vFBz7qsHNKw4907CMRqnEuKXg2G8N
3qPqkJ+6M3+Pj4wHCY7zNqiHU1sMytlwy57mT8BXDX0yZed6ewX7dPm4hvP5
fF0A5/l5ej9hl2JcSPjquLz5HHMF9xfz8cJH5TvGCDuZ4rx2/bTi3XR7Zb3w
L8C3bal7u+l2BwX7gP9tL1V8Pf+v/v83x/lM5NN0pn9GHWNTpS5b5zUV67yY
30M/VtQ+/OXhM8UU2OGcY36P93s4P8x5ExHXBt+x/YjVC543tlIaMu4v+EYW
RyVdxFHBfmXwZUEhrjHbNUqcCsf5ZFp3W35U8ZqtUQ4zbiI44r/juy+5vPf1
xOe2Sg9h39J9UN5zbCxG/a7/4n3BP33b2L5ntr2CODs8Tg7m68DNa55c5bC8
mIJ73MFtynoc2GL9O73Ke6G+If2lfbe/ZFayo/6N+93xrL+6KPorfZV+qado
d+BG5TbeWdDKVQlS4YgXz+s/1jU4x/iCfMaI+KgoJ9lFf+OfmCg4L8TXFxqz
+tNW1J94Vn9ui/rTQ6WfSVGpD9dFv8Hrc47oHziH/Yx8TqXrrK7UzFDBPRb4
Xs0aRWnX7rFUKol2B15iWdHdfWrYKnFiXh3867yL8cV/lwflB+8RnqmZk2pP
+oC/uR7/Sbd8MbIroL/FlEIdrK5JOxM8V3ustUekhsZ9bmd2V1k38fk/7c88
99oLe0wr5jlxLojiUo8o+jYhQ6PgXBC48QqTj/HtipP9wOex16nMi4Lju3yP
PGiXtNOSdAA/3tZuzHRrW7Jn+Lwl7BA1P4Wvz2IemKdH3FjOoSf3d1BOui9x
yZ/4Hia0bqU2H87bu9o8eaBKPq/E/Azt+63pONS1ugutR/PxDnG4aJ4qfEtD
g1FOShTjroLDzkS9WiXuIcX3Qv1x8Uuud/WAozJH1H9eD3G/CMV3F3FCUN9g
t/wXxyOX4hqozSOhXpUess84c4IVlYfP82BeC/Un48EYL49T1griVqD+LBHn
W3GuHnzq5D/xK2yVFioc5+rBW5UZMWfoLhslWoUj/j6++wVvz6+JP5zJTqD7
ycX+edQrXk/4+sswsf6CfhXffeWHx+P0TjopOKcN3jGwcmu9DS7U34Jv/Bvv
wozSk18s6gP2M/BxAeMR54gHQXa41dHVfYe40Lw9eJrgiH9B56ss2iU0yrRR
EOcF/OT94kP73HJUECcL/Nq4ESENPzkpiJNF8R6KmNYwC3NWAlX6wxkqfvdR
Mb7w8euICse5ONTDIjWrVPDo6qzYMZ5W4z8+UGWeE/4RuHNQS9vztr/7f6F/
Pn9WxJfhHPUBvLlfvfWaw7YK5nUpXpp3yKmyZ+0U3K9D46DVkW/Ru2yVG4yf
FdyH+QUWwi/AejEvD8brfH63KA/GwVE/lve6VNpa0Rffkfzczl9/fbxlreB+
HdqnpCnUc7KevYJ41uARzboMPNLVXkHcKPKjoy/Hztlqr2B9lu61Xvp5x6br
9gri1IAfKdhnXlkDewX3gaE9ZljM2jcn2V7BvWJ0P2TkbhOTFk4K7hUDv2QS
UbNbcUcFcSfpHoO2JlfnNdIoNoyPF9xacNTnSlcuPp/p4EDtlM4FmD66EVLJ
WZkt7M985wtUOOIT8X4b8Yk4R7w/1E/vUSk+7uFWSnfGawuOeo56svXi04u5
bc2UYYzvEhz3foHXuB9+PuGbhWLLeG3BcT8W5eN74kW3qdZKNOOJgiOuAb6v
9bQjI6tWs1dw/wr0GV7oaODBdzZKGuNDBb/KeLTgiBNK50S633YJ3eCgNGI8
TPDGjEcIDnuGj+M9VOx5lAff6/P4tW+fHrCj/MHfG2Z89fRxon16vN9D/Cn+
3RF/inOUR83+5OM4ysOfi7i3+F7FX5yyPhVvrlxivIjgVxkvKrg+m9/oL+Y3
Kgl7lebPgw9aud42Ub4J+xbcZHCD8SY15f432p9ZdEf6x6kmyhvR3smeTy/4
Rm+quZIo+gfwrvYZLWvfMaNyglv2f2fXzcucvgt4hl3g0oVG0g+ifkxT8NCp
Fzb0XrQvtH/BkcPbahTsiwMv62kYMPGKgYL7Hrgdjnk8znEfIed4X84zRb8N
O3nEUvfPzl1+2zOi3wZfPyap9DAHE+rHYLd8NytZu0gNZ2U1sycdhD0JO4c/
10tlv0QB8V6cX2P2xmVhb2DfC+ptpHdP12MdbKhfxTgVsf+wx3g76b+jXp0R
42CcsFug/9Bxr3salJb7asCN14/M3HXVVMH9hTQvsf/0q8i6FvS9aD5h3BT7
Vx8sSDcaBwdVTvFbakHlpHHN+EfFreOsaVwGP7D45MwTlewV3DsFHXIGFSqX
td9KiWL8o+BDGH8vuDUbp8aKcQrP5f0A0vP5ri5svKgqxoshbFzYIcYFa9b/
1xL9/1DWz+8R/fwNMS8KHZTzB9/tXG5M6wLcn/pfnNu3G8S4mc8eFv4pr4dF
VDj8WW4X4Z4Gnj/2l3KOfPj4/lrowvkbFZ4g5sHUzrXxfhvxU3h6xE/hHOXk
HHG+OMe4z+1k9ANq56fwXsGtwnKPD3BVnTdWmzdQ8/eDRPn4uPa/5lV4OdXO
6ajZ+Wr+tdp8i5r/qOa/ZIp+HjpUq9LCs81EG6WjuL8QOriatZ1bYoYujWs0
7zF9Yc22Ve3JzgE/JOZDlok4+ChPYJ8b69520lVwjzj47VmvNsbo6yu414eX
/46Iu4p2mj76Q61ZrrrKXRFfFfxb4xEhne8UUHCvNnjVASlzqzUprFQV9yCi
HRkfXXR07RMdBfeUg+dMa16787YCCu7hBvc69yN6h3thBfdMg6d/b/Zq28Si
yn4R1xI6t/levETAEh3FXsRvpXmYbQbjwkYWUHD/Gfidm2tMPE0LK7jnDPz1
3DcTv0wvqkSK9X3UB6XK6JYF6usoiNcPrml7Muh7tQIK7j+jOFU7f/hs/lRI
wT1n4Jf8kh5eP1BU0Rf1APW8g7h3+LmoJ/nsOlFPUM+Pei2vY2KvpzQR9QD8
tLiH97KoP7xdYH2B8ymi/qCeX9n+uFrUOl2lkqg/4HuP134QaVhQiRP1huIb
ifttMa/L2wvu6+X8lKhvaKf2y9skjPT8Xf9FfQPf9r6/zoYK+griqoP3mtPA
zqZoEcVI1De06+QVXwYZnNJRIkV9Ay/27E2y9cACireob+Adio5Y2zOxkBIv
6ht4m++TI0onGyolcB+W4LHiHtiZoh5ifPy8uliPTgN1FNxzD+45s+i42Dt6
iq6oh+CmFQpf/HCgoBIl6iHFA+to3Fa/lIGyR9Q39KvZn9toN/TSU3DvO/i9
771ev/j9XZqI+gZefInGsIZXEWWNiP9F8VtybhfJbmuiJAs/lI93uK+O9stp
n9ksPGmspLFzB5PEuQPEF0N691IdinQYaa7MZOcRFovzCIgni3r+sGurgu8f
myoY9/l4gfMjvJy4tw/t19T+8pzn/Y0Vjco+uilCZ9T/+gs+PraKMFISxXen
+yWu+q08GWak5Ir8Ke6+85TYCXrmSn+2TyNB7NMYLv493/eF+7f4uLMbcZXF
dx8l7sP6LJ5L/nWZT1cLWhVXcE88vm8x09Ovcy4XVTRCL/AV4p6mWJX5N8TH
hP7u40PbXRthoyBeLb7jk1SbgrrtTRTcW4b8n4j7F66Jf8/HEdzjxcfT4Wrn
RBDHCf6aiGOPfoP8xM8v7R7PtVHU7ATcd0LnCH4mRrwcZK00Yeu8DmKdF/8e
9QpxjPFeFFdYxAdGfDHUh8FinyTiMqOcr5M+FXobYK/4sf2iL8V+0U64/0Wk
by3iBy4T5af2Hh9saW5grOA+DF5/bqnYjYj3yvVXWzeBPYF219X3ZgPHX/Le
Z/CpyvCeNnnuoQaf4v+q1lYHQ7rXCTz+Uc3h+iFGFH8M/MDijx0cz5lQXDve
3qm/5vvlRHvgHOXEe3jv+byskY281xvcecmnk/duyXKCmyk6RX6eKSHj4TO7
FOXkHOXknOIGM073PjCOcuI9gjzcjSKD5f3jNP957fW0V62MqZy83aGcnKOc
+fafi3JyjnJyjvKgvBYdSrrMDpf3c+Xbxy7y5xz5q3Hez4Nzuxr1APV/VpW2
22+OlPfRg398ebxAo+SCVJ/BPyy/FzPugQHVE/CvNzel3vSS92OCPxP3jaIc
4BvFvaLQn7dH6MM59OEc78vbLzhPj/dFf+Z4ql7dD6/l+9K5tn7nPm7rb0jv
S/cwLGg/yaqxvB8WvG/lVk0uNJP3vfL+luxFbq8iziTj0CHffnihA+e0r45x
vBfKdSa217XhXeV7gXuK/Zl0r7fg04ZO7zAtRcYT5vYw3ffKOMV/ZpzO7fNz
c6L8nA9g+z8jxP5PPJfbyXgu53gu5zRfpsK5X4x2hHoUe6lkx1+XdOn+R+jt
OqmZzZNnutS+wI0Xdaua2lWf0uP9XugUeepdQLZH8AkPa7ldXaBP9RN80aRf
dQ6lFqZ88N2cxnqe+OEi8wEf5fgg8dJNmQ/4yZP3rri7FKH6AB5baqHZpFLy
Pk3ez+C5FF9rTXw98/ryuRQva0R75yhn2b7ovtkh3SekLJHPBT90sGNNnzR5
vyfdW9jR5rFfmrxfgO+fRDnpnsZi+1IXFHYlfdA/hHYxOR7VU5YT3HFFTuCv
CFlOusdyeePIEhVlv0f3I8UMrdbiRnF6LriV2FdQjPmtHYXfCk5xfk4O7zFj
lCwP+Fnhn9K5SsS7rbpgVkqQTE9xcqw7VX40TZYf/JfwN5Evr+fIn+49COgb
ebOGzB98ZMLhuma2Mn/wIVbBCzptKkLlRPu7HF/lYStjmQ/4qj6he5evl/UQ
vJ/r/PAdSdIOAU+6GvXNM0iO7zQ+C79yKPMjTqf950egPGj3n/Z9NT/4UrZH
8iOmLbrtUU+WBzw17djRYr+k/QbepWTd6YXdpV0E7lEvxsdus6wP5I+MsDRo
GGJH5UG/gvthUR66N1LP8EOMniwP+LEme0fdniPLA75wwOcog2kGNM4ivzvi
XC3GP/BwcX4Q9RIc9wEhPR9HUL9p3Bb3PuM9ub2N9HjvweJcMPIFvyDiV5Cf
xuxV5INytq9338/vmryfi9td0AHc93mtVfdvyPjY0O+A8nR6eLqMs4305W65
Jbdyk/4Ozx/pkY9R4P0LLzfJ+1K5nYbnor5MurHmxa/58rnkT+2vVPfNKCuq
V/j/u9ttczdaIu+Dpn1QHbpae/6Q8fb5uIl8UK5ods+4Wnp83/ct+n+5s04+
F9zIveTi4TMtyI7l4yPS4/9fN9/1dFOee0/A33jW67oowIJ0498d5eP2Pzi3
65AP5wPY/MN2Mf+wj80njBHzCXR/uqiPVQIKltK7Ku/bJXu/+hz9nm2kPc/9
fZQD791OxP0Dx7/rLeI1Ubxl7Af7+SJ2cIK8rwr6bBTnl1Eeuk8j/FPgs03y
XjCKN3Xoz324xcheQv5d2T2SdB+LuM8RnI/7yB/v1V3ss8X7837gCpuvuC/m
K5APby8UNxDt+OGbPhYd5P0j3M6ne0DYuXjo9m/9dKX7F3i9RXn4/kzkg3IG
sXvN6PwXu48Puq0R+9m6/F/zMCmV6H5SlN9yvv69I7E2pCe+S8C5kvPee5jn
m4cZwO6TQn4tRRxRvCc/F3yFzdt0FPM2+9i8De5XQj78++K5KOcrERcL6cmO
FucEkR79aiVxzg754vmPbP7s69aT91yofHc8t/dKnZqTDM1oPKL1a7GvBs+F
bl9E3FrowPsNvD+vJ/hOnOPf47mbRTwrujdZ8HCxjwLP5fYY8uEc74v/7yXu
v+vC5sf4/RrQ86Dtmy33q0u/m7c7cN7eoSd/X4rDr5Kezz+Q/cS+I91DxMaj
/wctvTGz
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxFnHkcVdPXxu89957pVqYkpZBEMmWsFFIoRUgUEUlFmYqiDKHQRBFChpKh
ZEwhojmikHlKKkPIVJky9D7fnv37vH+cz15nn332mfZee61nPevUO/eSjhdH
hUKhWloolFTOSQqFbVUeXS4UPlTdT5K75oXCWdpvLHmZGn2k+vWS86xQ6Kb6
AyS/pfrfVF+nWCgcofp1khuq/lfaajtU8iaVG3WxHdXmO+0/qnZF7f+q8kT1
syvXVz9Hqe5wbd9r/yTV11M5V/Vv6/x3tX9SpVA4U+X+ql+q+gvU9lX1uZe2
gvpqoLK1yk9UPqTtYG3P6Bmu0eE91MducaHQVHV1VC5SOVnbjernSvWzh7ZD
tX+C3kMieYnajNK1BuvcksprVV9Nba9WOUXXiNXmXPU9Sfv7q36iyn+0P1Jt
n9W1dtbxdTr3GG0fa3+DyorOO1bbDbrODyrnqe0Hqm+hcj7vXfLhKg9RX33U
ppPuoWfu/i9Q+QLPqH7Pl1xb5SVqc7G2BTrnI517hMontR9r+0z7L6jdaJUH
6PqPq89d1c9IlW3Vz/WS99DxgTr2utq8InmmtlGSG6uuitocpH4uV7mTtvaS
T1F5Bd9Bbb7X+QMlnyj5O96h5JMl/yD5csknSP5W8gDJHSSvlXy0zr9O/eyk
6+yq+99N8rE6Vkv17SSfrPJCtT9KdZ8zrtTmaG2ttPVVfUvVf8a7kHyE5E8k
95F8pORPJX+hdmX186n2i3rOE7T/r97h3WozUnXbqDxT17hLbW5T2VXbnZL3
1v28qmNvqk0zxrX2u+v88RpvK9THl9rOU7t22h+j47fp+GJt76nvK1V3urat
JRfV36DU/Ryn429r/zid+7XKbVWu0taz6GvQhmt00blVdO5/Oq+H9nvp+Ifa
/0r7RcnzdO6lkudx/zp+Fv1pi3TsPO1PUHmr2n+n8qvI4+ab0OZdnbNG5/6n
8uzcdRy7SG32Ub+dVZ6h8mnmod7fiszj6tswtuqq/E7bAMm9dK1+vFtd62/V
TeJa2v5U/b5cU+dWVx+Pqm6Y9i9V/WEqd1b76rqHs3UPT+gertWzd0M/qO22
2l5W+4Zqd5/atVS5u8rtmCNqs6fOO0Xvp6i6jZJ/Sa1D0CVDyu5zvfo4WW16
aP869b8NY1v1DSVvzXiTvD36JvW4fQ59oLZnSf6F+cyYkPwz9657vkvlSl1v
MuNT2886NpB3oO0Q9BffQ3Jr5o7a/cqYVB/jtY2QvLXK79WmP2NXbWrouueo
/inJ28XWqx+pzeW61n9q019le20FyQt0/DQ9S6zyT50XpZ5T1bTfTW1Kuv73
OneS9p+QfIPK23TeGHSC9p/TsefVfj+VM7S9IHl/lSU9001qc4baLNS9tZC8
SOXeKv9Rmye1VWG+6Pih9K36fbV10P7ZfA+Vf6ifL1U+xjzVVlN9vqM2J9FG
9zlE+78zptRPR9W10HnPa/9H9f2+jr+o+lNYI1R/o+Raaj9U5ZPq9zG1aaBy
ldqdzpjSeQ9p/27V11b5lLYp6HCVT2ubythQeZza3yv5RXSj9l+SfKDKmdpe
RI/RXv09quv+q/3FmdcX1pnndWwWulHldNXXQP+rn28lszAyngdkXicGqrxK
7dqp/Te67x/Rg2pTVe37q/4wvqnqL5PcHH0vuYe+47F61n3Vtp/qm6n+Q9V3
U/3ueu6Nqt9O509TP51Utk08n2qpjHRsG507jvVO2706/w612aznba1+fkus
b9GTK9Rnu8RjdUXstbut6v9S3c3q52Pdf5WcRVt6Qm2OV9lOW6rz2qt8BB3F
Gq323XM/49+Sr1P9O8zLzPfbVvL+6r+N2sQ6ty06knnNu1WbivYnqv+TVf6t
/ZGSj5V8IvNQ7U/KvUZ3ZD3VeVnmsc0Y76tjY/h2ku9DvzJnVU7Wdo/knVQ+
pPabda16ajtbZTVta3Wsk47toXKhrnGq5O4qn0H3oLMl76hjb+jcEZLfVf9X
6H2+red4UnXN1O4gtXtS5b2MVfU5Q+V52r7VeWPV/nsd30XbD9rvRZ/a6qnd
K9q2DvbM27puDfSJyhvVd1/Vn6ZytvZfU30TlS9rWyz5UJWvlL3mNlV5utol
av+j5OtjFi71KfkcXae5tm21f37qsTpbz76f7nWo6vdR+ZSO9db2uY6N0P7O
esabVY7Q8eHauurYEm2Pa9vM2FU5VduZrHlq+5na9JD8rfpfreM3qnxN10Yd
PavjTXW9y1Q2U/l87rl2uNo8kfi7t9f97qF3tYo1SOVnOvaVzr9a7/gxlRPV
fhfWXh37FN2h8hqdc6rkVirXadta9/COyofL7r8Ocx0dJ3lXbCmdsz26V9e/
XfLXPI/KutpWSB6lcniw+U5Rmz6Zx8Z3upcmzGltX6mvJepLVYXp6Hld7xm1
uUnlnZnXzieY77rv+dwLa4i25apvoj6vlPy65H0lv6R+FqmfQ7AJVf8Weldl
38zj4Qdd5CWV22j7Wu2uVv2bkqepXJl5/Byhfo6reLxeI3mp6tuofk1mXYXO
ml2wHr5S93sF35Vxqm1s0fYLbdBpnXX+s5JrquyqPr8oe63h+z8TxsCgkvtC
nx+pb/eyzrtJ5d1q/5Ge9zW1v0ry65IXSj4t97k1sB+L1lG36JyeanMa8zP1
+kCf3Bvz6F7JTVWerzaNY+tk5usjkdfIQyK3uTDYFROwh7CBsHdVLlc/mc65
X/VJ7nHKczFWz1Ofx6vdcF23HLlPbIw/0E+St9b5vdVmBPZv6mPYIb1Uf4fq
h6t+Wmo9y7Nsm9uGQG9gU1yvNi/r3j/IfZ/rsfkKbsP8fi2zHfpb0AND1L69
+rw5tZ3zO/YS8091DzLPVLbIrXu+V5sDeAeR7TDG3frwHoapn7LOW6K2B4Y2
8wteZ8t6H69K/kdlf5Unql2LxM9VW++3o86ZwrOr3ErbY5KrMUfU56Fq95bk
WmrXBDtB+0fqGa6W/IXK+9TmStW9g32i/qfq3H66xlFFyy2w0YOvhM80ijmn
+mvVZrLOnaxz39e5D4f6Y1R2j93/YTr2oJ5/mNpWVTm0aFsKO6q1jm2v/Rdi
67bng37D5pyh7b2Cv+mLkndQ+Ze2lyTfpHvsrnJW+Ga3VTyOq+sertOxNyL7
M7+p/UzJA7EjVb4Z+fnf1za6ZF+jQe5xUQefsmT/9E/dzwLevbbO2r9H/T/K
2qO2g1Seorp1ajtbx1+N7MPU1rE2rLEVf+sNqj9c5e+qO5o1Lvhq43Ve73A+
/XDOj5I74SNI3qQ2c7Q1Yl7krhusPjdpfy7PpXK/3Lq6ce77XyJ5T+Y9c139
7FO2vYvdO1byTTpnWfiOf2p7UHJd1gltb2Nz6vp9dY1RutZynXeB5GP0Dl7O
bYNg259bsJ0/MdzbQHS62szL/T0fZu1Qmz6qPym2/8h5D4VzTw72QJ7b350U
+rlD5XRt57AGMAbV9mCVG0o+b7z62l3nDMBmTv1dFmrbv+jvwz429EmJn5F5
wbfkm6K7Dle7pZHnzMLQnm9a1n2Ow0ZU2/qqey3yfV1X9nW5/lL8UtZPtU20
3aljs9V+kdoujuwPn6v61rrHRpnHCPOdeT9S9XtwT+qjZcVr/KOSj6zYDnhE
8hEV2wEPc58VryWTwVjw61g7mBcV27IPqb5pxXb8g5IPKntN6IrNrP2LsZF0
b0epTYfYtkGzim3fiZIPq9jGnSS5leT71WYQvp72L9G5O+jc5ZFt+KtK/lab
wjfqoPbtGEdq00rt/1T9F6nXrr+C/dMjyOjuYzKP053DGPg79HNJ2fjHKvXf
KPe9j1bfH+jYP2pzasHXpX2f8K3+Dd/36Irxkcd0Xqa6jyL76tg+n0T2XU9N
vLZ1UnlwZt/6GXCLzP76gehVyefio6gcjA0Ynrdtxbbj1WrzPrqH9ZJxldr2
aK73dWJqG2a3zO+L9zZV5QeRz6F9l8Q+0Gn4N4nX2I6Jr7M8XOtQnX+B6oeo
PKZirGeKrntsxdjNVGwM9ftGwTr58/CM7DP3KTkOvoXP2J37U7+f0g67Tf1s
p2t+qv7PUHmNjp2u8tqS75X77KFj9+v8CZn75hr3Mp5ZD1hvcvukm1V/GX2o
jHT+cUX7jviQJ0reR9f6R+/mPZ3XSPKNuv9bde4uFWNDNzNWg/13r+SDK/bx
JrC2VuzL3cd3qdjmuxubtmL/+XbJe0keJvkWyftWjMGNlXxAxf7AeMmNK/YP
75K8W8X+/AjJ9Sr254dLrl8x1jASH6dsO3aGnuuZsv3dvRnfarOj6t5Umyb4
dZH9kOba/0nyYSr3rxg/GoffI/kObHl9iz3QJ3oPF+MfVYxHjFKbMyR/XjbW
0UDy9rExhz05V/Klat9Q8lC1GR2ue6i2dbre3qq/SfVjVL9zxfjaTZK3l/yE
5Dd03ZoBA70W+6JifHYI67jk6ZLfVJsdKsZVrwJzkPw4/obqByQeO3zfKxLb
dA3wxSvG1K5X+8G6j0t1P5eUrO8YD3tiB1eMLzygNjtVjMcNlVy7YgzuBsnV
JU+TvETX2lryJMkLJVeV/IDkeZK3kjxR8gIw44qxwmE6t1rFdsN8MOOK/fz7
VV8F3SV5rupTyXfhP0neVvJU/CvJf0TWUXzjuhVjjjeiNyTfI/lVtTk/sQ/4
ub7B5Wo7t2g85xy1OVh1dfRd6qnNxWqzSvsvhHnEfOqnbU7RuM2nZduzYD+1
1M+Lql+u/TWSX5D8luRrdL23sSMy23rYfNiT1RJjMG117n7Y/IwfXf8qtV/G
2qe6Ian7m6xjs7Dzsdm0X0/HmqquP+9VdQu09eRbZl4zL1J9HV3rNPxgfAYd
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
8M7Oqlh/wNlFn/SOzQHD/p+Rm+cD34dYJPFE+Gf4oPx7gW8MD5zYDXFC4nfE
4+CNkedPvj9xSWJzxB/htBFDJF8UvhGcFnhiw9FVZXMUbovN0ScugW1KnJh4
MXmF5KfvUjK3mX+ngF8NDrgI/9Uh/tgzM/eAnKwhieuuT8y9gisLVsJ/eJCv
SZwvwDpwYcW8D/qH+1E3NS5Cjip8Y+KdjRL/v4b/2MAzgRu8OIwNYhng/8/E
znubHp4Lvgd+4M2SH0i83t2vsk9u3IF/8vTOfS2uCT95XLDBegX89unU3Ev0
Ebg7WDicxaXh2XhGnoU4Jv/3gD9MXJ44ABw/ctTJWXg49loEf5H1iDgjNguc
XPQbtg52zhrtjyl5nfos9n+I8IPI28avhD8SJdZj2LRwlvkXBP/NIXf+2aK5
Q4MT6zDWL/4TQRv+aQM3kpjG8RVjh1VK1kHoeHIt0PnwxFiL2lf8jxI46tW1
/23svHFsb/5nAkd6ULDpuH/0M7FX7gVe8dex/1GC3Q5PDV2AbQePDfuTvK0V
wZ9Eb5PLWDPMl29yx1DH6/2vzM2JuVXy97l5ZvdJ/jZ37PZuyWtz89XuxXfL
HbO/C0wvN89mjOQ1ufl54Cpf5Y61o5NX5ObZjJL8YW4O0PWSP8rN77lB8se5
eTZDU8934khwE/7Lza8i7rY5N/8JjI7/NO0acPtVufU7/MBLAm4AfvBdbk7k
BDD83NymYfgjufk6I1PrIHRRP+zx3By4+1UfVazT4Wmvzs3pAR8uVawTZwW/
hlwU/gv0XuL/dJFr9j5zueAcNOwHbAXyyj9IHK8nbv9Waj4K/9KAp7qm4H8y
YPvxvy3syWdz/1fms9x2O77D6sy25SDGRu5/f60NugHdC/8HHhD8ZXjMcOzh
HjNfmDdfZcZ5lmXmN9OOHMkvcvPAblHbURWv8S+BDYZ+aFvKzdklF3Jo5ngu
cV3sTPITyGdizDYP1+XfaV0LzuPD6YSjRlx1XW7u6QOSJ5Kzlhi3hGdIHhn5
ZOsT/8+KfMkNiWMHYMLwSlvjW2DvpeaxP6NyFf5nwTl6k9TnhMRY9EMV6ybi
aL8m/hcWOYM/J/5HFnlwv0g+vOA8uwexY8peZ+G7woOFW8t/Z8jBBXPjn0Tk
mV6n8piwZoN9oevg8/H/MXj68PVZV/i3GO9xqsoHGD+JcWDqDgvvinfcLMhw
fsCwO6vtl4n/50b+4OrE/5ojrxB+SSv8JLX7LXeeKTHujbnzQ4lxb8idR0lM
fH1uHiSx8od5P2XH137N/e8eMPwfc/NTweR/z51rSXz859z/8QH3/in3/3rA
tH/J/U8fcPWHEuv5R1T+m/j/ZuScQgzkH2jkfoKL8t+4TSq3Tf2fK3I51yTm
vhIbYl3m/3N/qdyc+N9o5KgS7+Mfcn9jd1S8/hGLrJL6/1Tkw/6H3i04v3Xr
1P+wIve2vuQ+BefJ3h/WqfsSz0Hyb9qov48Tc+HQdYsTc4TQD+RkgRuAH+AX
4h/iU8H/Ic8NW5l/A7Cu8m8ZfNjdg+9Ezgy2GP8QiII9j12/VWQez7yCcS3+
U8H/KogZYEfxb6uWZc9L/mfF/3jITdtX8jaR8fAFBY8j4h0flBxnuT7ynCU2
QIyAf02R242e/LhgfgvrOPF8chKwCci3IocBvwschdwwYtJghsyh43Te1yXH
5fHL4eHyPwP6PTl2bj12J7lX/HMH275l4nFdL4xn8np2KxmjO7Lsf/Fx7lWx
887AhD9KzItmPfosPBdrDZxBzoVXRC4TPic42IDU/w4iN5zcj0UF58Izd8mP
519ihwR/B79nr5LjI7xH8jfI42AtWJCYI8q6A6cR/gA8gvmJOaKsTfzzZ3XB
vED+k4Ou/rlsvTVZcn3WyMS8sPGJ/9X2WtE5hPzzkX8/8n+2n2Lj9WCG5HfA
GSGGwXvaO7wr/mlIjiN5nc+VHB+AT8t/G9FF6CS4D8SS2urYa4njxayt5GgQ
Ryf2fnnq/ymRRw+neiQ2F/8MSMz1Zf1lDDIW7w7+KH4l174nPAvPRL4ENjP/
bWgcbBFwJnCnPwv+1x/rAnYN8QHyEOEVkVMLT6ON6scljjURH4SHzboGP5a8
is8T865Zo7EZDy45XrUsMa8Vu2JpYv4Y9gl+EjnhYBn49vj4T+n4lMRjHB37
ZmJuGGvZF4n/Ocaazv/r6B8dRV4wOQjkIrzL/RVsz5BPSo4icdvqZceU+yTO
YyU/kH8JrtR+i4LXL/JVZwfbfkJoz3kfBp3GWv9GWPfhIJOjOqPo7zEtMY7I
/53Icee5wLLJocYmqZv4/0P834mcshWJ/6WGbQZfCt4Uedn/BzUmqC8=
            "]], 
           Polygon3DBox[CompressedData["
1:eJw1nHfgl9P7xp/3+9mfUtnZDWkYSVZWKRqiUnwjlIq0FCGSiKKsykgieyVE
VnaZWZHRkK2QPbJXv+vVdX5/nM/n3Oc+5zzrjPu+7uu8Gw4Y2XNENYqiumkU
Jfq/MouiZvp/goQ1ZRT9LfkQyWMl/yS5juo1qUTRbkqbK3+Ayn5VB+2VPi6i
6Ns8ijaWrrfqfypda8nT1P56ybfXRNH79CP5QtW5Ru27Sj9L8u7KHy/9TWpz
l+QdVG9vya9J/7DknSVvKvkVXeNgXWtPlf0s3Wtql3N99ddS+eeVIskVpReU
v1f16yj/rIqnK/+M2lyq/Ibqr1B/F3C/ku+No2i5rr1UdXqo/h8qO1T5Uvqj
lb9A9X+W/haluyU3k7yP2h8i/fWSd9O1+kluI/1p6usO6a+T3E7vb676O1r3
t5PyN0s/W/WbSt9G+g/U/m/Je/IuJPdTncmq/5rKnlGd1ZJ3U/5k5b9T21cl
byT5cMkfSR4jOdX1YvXfV/m7dM+x2p+gOpco31Z1fpP8i+S3JG+v6w1X/nK1
XyddE8knS57Cx9f1D1cfp6q/8yS+qnuqrTZt1Pc2yv+u+o1Uf5h0l6n+f5Lf
VvmG6v8Y1TlX+f1Vtlby56rzfOFvfpf6PD/yWJiistmq20tpB+WbSddT9S/n
nSi/reoM5t7V/z/qq6NSovs5TvX/Vv0lvAPpz1bdWer7Rsl3Sm6i+ntJnq7y
pqrfSWVXK7+V9E+r/6Zqf5DaH67+b5Wure61v+q/rjqbSO6l9p+obk/pb5N8
Dd9K+pf0fwPJ3aT/UPovpa+lvn6UvFLy6+qnUP9HqWys8seobAddv7PaLFPd
TVW2q3StlDZTvo7uYV/lt1P+D9X9PfXcOUj1R6jPS9VmG+Wfin29LaXfS/Wb
qM5+upcXlWpLf5jqfiD9+5KbSz5R8le8L8lPqe4OanOw8suUGknfT/oveFfq
d4F0y5W6KP9c5nnfSX9WSH8yY1y6Z5VG6l4P5Zrh/W2h/KLw/hqq/oZ8W9V/
kfEr+SDJp6rNcxX3QV8NlJ5V+3clT5BuY/VxrOSq5Av0bK+ov9vVvrHab6z2
S6TfWnIfxn7p8bSP6tdX2X7KL8jWT+/oYOmXcW31uZ8KvlDZvsq/qv7uUH57
6TdRfwep/uPSn6PrPa7rvRy+byPpN5L+eeaP5M6S32NuKr0keS/JB0v/r5SH
qf0pKlulsldKj9eq2k2UvrPe4VL1PUxl7ZS/W/pFqru36naUvoPKLg/vnHff
lPGruoMYs8ov1j13rvod8a4OUZ2/VXe45BuVf1bX0b+oY+L16QHV30i6RHV2
V/7PzGPtOd3nGbpeQ9U5UQ16q+xW6d/hG6r+J2q/k/Q7SP+K5L3VvrN0B6r9
g5JnSd5V+Styr/8vqY8TVb+P5Hskd1D/AyS/yZySfLT6W6W+TlHqr7pHSu4i
/b7S36j+9lCd/swZXaNv+N73Kz8h93ybG3u8TWSOSH4g9vtvr//LKn6nvNu9
1N9MtR8u+Xvdwxuqs0T126v8Sl0vkXyt9MOkH1D4et3VrpvSB8ovV73Gqn+8
7uVL1T0/9/o5J/b42V///1PbKfrfVqm2ym5XfxNU9l3hsinhG/ItmV9PSt9L
fYxRn81V/w3JFzG+VP8A9X8Z+5Xu9TjGl+Tpkuurbh3JL0i+RvIWkutK3kLt
H1L7G9Q+ZT0vvXcdpTo/qr85SrUkPyP5SuXf0PW3VP4otf9Mdf9Q2YXS/6uy
T/lWkmtLXij5HOUXquxK5TdV/Vq63rOSr5K8meTayKyJeq4eSqv5Nur/eLXf
UPczNfWYZmwzJhmbi3XNS5U/SbpL1L6W5Fulv0Blk9TX5Nz3N191T5D+OclX
S95c19tA8luZ17djJH+utn9J7oJ9oP+3SP+t/u8jeZT0P9C30hzJzSXvK/0j
uu5P2Bfq/1blH1H/46TPwv7VWfUzrq06nZSfxvdnLEv9q/53VVmBzPOwN6j9
JOnqqH2u9g9LPkdyGvbHm/RMV6t+oWsdKX2R+9vcqH5vpb70W+j531LZdcrv
qjYfVL1H7aL8eNWrG3v9HMXYUfsLpaut/tOwN+4h/XiVFSp7SvqLlN9A+Yz9
TX3+orbXK12r/Lvq8yTmttrdJv2juq+10h2vdKjyJ6n8a13/G9V5X/JD6m+s
8knYrw9VKnW9QaofKX+F6m8v+UeJU5Ufq7J6ys9W2Wbqf6au+SbfQ30Nlzwj
tz3yZuz95D21aSI5lv4I6VfQn+R1ul5Pyder/XcVz9+BvEu131H6V2KvH9dK
bi15Sez5OULtd9b9nyn5EfIqWyF5geqcpfazlL5nb1Ear/wDuu6XPIvSGl3z
ktz7xxOx98cdlZYF++sY1b9H9T9Tfh42lfKTVL+f6t6va52n+71CdVZXbM8c
q/xV0rdQ3Zdjz7fpknfCNoq9P10jeWfJr8Uezz14f3xPte+u/F5KX+j6b6vO
+ervCdWfqHwt3Wui602QflfJb6jNVpJvk76P5O9j29sDlHaObYPO5nmlP5PH
Vfu/pbtMZR+xtqqsr3R365nel9wxzNFLWROVvwF7VvrrVPaS5N/ZI5W/QH20
VH6xrrFljcfPtrrfg1U2EptdbYYo/1ts+/d26Vsr31LpFuUvVv/vsRdhTyh/
k8p2kS7FH1D/p6vshYrtz1rK36z0j+Qjef/K3xXszz/V5lfsk2Cf/iH5F8l3
BHvzd8lr2Z8lj5D8l+TfeD+SH2I86lpn6v7PVJ+LwvMN4d2ovLHupYXKPlR+
D7X5TPJi6edhn6qsr/rKpb9I+T2lXyX9G9I/KP25krdTfoHqbK7+l5Z+P8yt
8yWfh40j/ULp60t+SG3qVz1nzlX+PNZs9Z0p7VnYvv8wjMeWmf2tvVR3oN71
4Wo/FvtOfQ2Vfg9sf/X/cdX2fWu1Hy55T+mnqs0w9jOlXZR/XWVbqP1gya2U
z9Rmfnj+RsoPZPzpGserz48kr5T8guQxqvOy+v5S+fZq/6v0HSL7g0fX2F7/
NMyX4/WuJ7OGKP+lrtEQveTjJP8kuQXjV/IjrH3qb3/JF0o+QPJK6beRPJE9
V/J7krdmfVCfbSQvjW2/fqHr7876q+v/j/VP+v0kr5D+W+n7KTWP/c1XsZex
/sS2ubH3b1DZvtItl/yN6s7KvZ8sk/w141fpUcktdX8HsB+XtsU+0fXGSo5V
v6fk8+hLci/ph/E9lCbrXUyS3E76DyRvJ/1nqv+f5K5qf6jk/1Tncr3fI/XO
mit/keq3ZS1W/W2xJ1V2mfQPYh+p7RHSbxZ7T91I+da67lXSD5F8k/r8LvPz
nKb7/VH6IUq7xfaRTgzr5WjJZ7B+sierrJt0X0lujH+Zef0alPj5f2NMS/eA
yvrp+kOVnlS+Lbaf6n+YeX0+KfH7u1/60VG03kn4S/LFSodJXKM+Gqn+R5nX
w8GJv8/Jkn+o2qf9XPfTAt+v6usNx59U2l7Pdh77AeuT2nSX7mv1tz3+Pt9X
ug2lu6jG/uE4tf8zss3dDp+pah97b+W/yTx+TtX1v5f8eeb9pKL2vcATdP/t
JX8Y23+exf3GXlNvYA+Xvqv0X8R+v/g7Q9X/AJWN551l9iVPUb63+vtB7+8s
8AfsB+Wn5LYvn1P7j9X+VNX/V/qW0l+pe5iaez98PrZ/eafSY5Jbqb926q+3
5G2km6H69ZX/n9LWkq/BXwzvc0f1d5/aPKA2l+f2556N7f8vkr4O66d03dXf
kSrbSrrpar8J70f3eFrV63NHxqbKjsW2VJ3m2GP4A7w/3eswyT+pzvTYPued
jFXpj5H+B5U1k36IrveN+uuoss+YA5JHBXxhW/XRQfX/kbyL2n+l9sfofu+V
rqN0A9V+qvR9Jf+stjtK3ga8oWpMaKWeYXFmf+BN5TtJf0tu/Onz2PbgQWW0
3iFqrf6/Vv9fKAFg8Y3+UNvPJZ8seSfp31Q+V9lUbHhsROVXqWxI1WPs9cLf
d2/prsRv0fVuzm2Pro49ng5X2kj581W/Rvl7pB8l/T+sN6r/S+bxVUvPd1RY
f/HVsdFOYq/RNQZLbqb2CdiVymK17SP5T8l3SJ6vurvqeduqfX38Qem2V799
JV+X+/7ejY3HfVTYl92WPU66z3Tdk2N/30+Vn6Y6Q8N+uTPzKTO+1TPx+MSG
w5bD33sO+0VpMuu99LtK915i3x///YzUeN3zQR4t+XBd/xB8ReUHs//p/xzJ
G+sZlyrfU9dbgj2Mj6T8CrVfKP3pkhtJXp7YF96Z9Q5/TvKTyp8JfiX5ZqXF
Fdt4D6fek9mb32Y8sh6q/pvKn6J0dGobhr2ePX8WNkDqsYjNca3y34C/VG1D
HpcZc8AX5Rq3gMdkxgZ76X3Vxd4sjOVMyDxeu+JfSXexrnsSeBDtq8bYFik/
iDUXbIn1XvlVqnuu8o0qXjNOVNnFFWOU4GmDlS7DN6nYR1yW+t1hkwxkrdb1
/kd/wd8+KvWzbiX9e8qvUWpZ9TN9zR6pNu+Ar+AzKn+Oyu5S/UeULlW+qfo7
Qvl2Ae+6THUa6h73UbpE+a90j69Lf4/S+antpzuUP1v5U2tsF7wc9ONT1yH/
arC3xwd5vtLlYIHq8xjdywylIyTXZJ7/h0lfC99V/XfFlgl46WL9L6v2YTun
/qY875WSvwVzxW+U/JTSNOm+0JivUf4HlR9WYxwOPO7LsGa8Cq6rfG2V/aT8
MAkPslYr3w28L1nv9kR1VLYWn1LpRuVHKC1Uvj74Vhg7J6v+6YxJydtU7OOM
Ubpd+YOVdlS+j/rvjaz8EN5v6nePz/4Ga0Lp931p5vW1n+oPkL6HdEMl36H/
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
UpoLXQ==
            "]], Polygon3DBox[CompressedData["
1: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
0SzHJWmy/HXxfLAirvcO7dfSZ36+aKy9MW8ykzXlmN+RNMDxb7L3qf2jYLJ2
xBoyNjNZP074rRpjTVvfpidrbay5o2K/4fxRtferTcX6ig3EjmAdYu4XTNaY
WGvGZCZr1O8xJ/l705I9a+xdd8pNwNpjq2KdiO+weG6xb8cuo9ewhrGXxJ7j
f5W7F/sz5haW5rcATcX2ur4p2Dy58vQ21jze7/HdxFejJdhdsQ/A3ucr0jvY
TdieQsn+q2tMhBh7MtPwh2Q+0W8V+IsYp/jr2IV0p/uyT11efM+o+2/sa7RR
B5tH27Cqsbapnc/PldsbtcHl7ou1hRZj1WmpXNtYl+hojFm/xehiGiDXNsaE
a2is3zzt7aKz2vo9vlnjnvL/lHswLXn3xDtoMzZW/R1RixWT26qNldj4mLj0
lJ9KsY9Su5SvGXMTuzv2f3+v41/Huyv2E9jrsf6lJd+N8f3YOPaxMZf4P2Id
87cdiXeZ3Cq+Hm2U64bNjvWTvy4t+S6M78NLY9zro0zss+lTmRxaIlODlsm1
iz1soWS/Hvv2anQJPxy/JcZffJ/GN4S6EVhL7P705Bs1vlVn4suwWrGOae8e
manYfL4CzcZuzEjWu1j38rBN9G5839BHjuvHuuPcQ/FOju9dvg5twLrGexVb
ydelj7Eu2P8BmzIV3g==
            "]], 
           Polygon3DBox[{{1812, 1811, 2476, 1244, 1245, 2477}, {1814, 1813, 
            2478, 1246, 1247, 2479}, {2049, 1295, 991, 992, 1296, 2050}}]},
          Annotation[#, "Charting`Private`Tag$1408945#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, 
      {GrayLevel[1], EdgeForm[None], 
       StyleBox[
        GraphicsGroup3DBox[
         Polygon3DBox[{{833, 299, 920}, {928, 86, 929}, {921, 299, 922}, {932,
           86, 933}, {836, 86, 928}, {924, 299, 925}, {920, 299, 921}, {931, 
          86, 932}, {927, 299, 833}, {925, 299, 927}, {929, 86, 930}, {922, 
          299, 923}, {930, 86, 931}, {923, 299, 924}, {933, 86, 935}, {935, 
          86, 836}}]],
        Lighting->{{"Ambient", 
           GrayLevel[0.8]}}]}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0stLlFEUAPCj2WOsUYNoWUnbctFDCrWXSIveZqkzmWAUJKH0JHe1qr9A
F0ariqJ8lWYiQlSbdqmVlpa6qjbaIncR/j6COfM7595z753vflPc1FrdkhMR
I2IgNyLJG5mSvF4RUaR+z438yBLOsYK/eZj/mGV6ZUSBaJZvZhtLeJdl7OBB
PuJpDvA833H3qohWZ/5w9ri6n/fVZXnOVZfzEyv4mXs4wb2c5GO/YdeyiC/y
fcb2i6/yA5xiJad52Z4X9P60/7fkGdSZ5RG11g7JvxvLquvU9SIj5tWXzHVZ
t926HeKqekbvgrmd6ln5Gfl147/Uc+pOXlPf8oxZ+7Sk9LBBnBUP9Pea77bv
By6IUXHbXYxZ32D9FWuP6j0mRvUf5wlRLQqtO8kaccq6tP5GPjOekW8Tb+zz
NHmP8rfyc/brZw0fsortyf3zDrfwJou5SVyU5zPDv/Y5xHmWc4ZbOcYNybi+
9c5/5axC9T22qUf8vgL1MNMc4hquM1dp7aC+I8aG1auNj3PR+1rLl+byjf1R
F6lTyTtzD6XGXVO8sO65cHT00XbRQy3Rxbzk+ekTT3zlJvdq8kbO///7Es0M
XYs=
        "]], 
       Line3DBox[{950, 867, 234, 573, 2246, 39, 965, 914, 916, 2424, 613, 902,
         903, 1529, 2248, 904, 905, 906, 1724, 907, 908, 468, 705, 584, 1530, 
        545, 236, 542, 2517, 1723, 579, 289, 915, 2272, 286, 575, 1712, 865, 
        2416, 866, 868, 570, 1711, 863, 2415, 864, 230, 568, 2242, 25, 950}], 
       Line3DBox[{869, 87, 708, 303, 869}], Line3DBox[CompressedData["
1:eJwl0LkuhGEUxvHzGesFSDSKaayFzjVohFDqFHYzvjFj7KNSmpkbcAESZOwK
ap07GAmVTiUiIn6J4sn/nOe8Z8mbnc1P5ZKImKE0E1HBaI946oqYbIn4kk7g
BS8Vd3tzqOG+M6Kff8nvw1FeTu21LWIVC/pXcJmW6Je/iAs0T6l6Q++c+Fl/
Add5a5inAd6j+redD3bVeL2tEcfyonfD6j/iD2zwz8Sn4po7Tuxq4jnvBes0
aNaBeknvCN7Jp/nv3lbM/rRjH2/5e7hLO7RNN7wt3KQyXcs3sERFGu9wO17x
h8wu21GXv5ldxSN3JNhjx1jy/89/k3syTg==
        "]], 
       Line3DBox[{540, 853, 854, 370, 540}], 
       Line3DBox[{896, 102, 516, 389, 1721, 788, 101, 2258, 588, 1248, 245, 
        419, 901, 1722, 900, 2422, 899, 898, 1380, 897, 896}], 
       Line3DBox[{909, 447, 301, 509, 1725, 291, 1471, 910, 909}], 
       Line3DBox[{918, 633, 2425, 513, 2289, 917, 548, 715, 549, 919, 918}], 
       Line3DBox[{926, 842, 832, 840, 834, 839, 844, 843, 926}], 
       Line3DBox[{934, 835, 831, 829, 837, 830, 838, 841, 934}], 
       Line3DBox[{833, 920, 921, 922, 923, 924, 925, 927, 833}], 
       Line3DBox[{836, 928, 929, 930, 931, 932, 933, 935, 836}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1728, 2021, 1092, 1727, 2518, 1921, 1729, 2519, 1922, 1730, 
        2520, 1923, 1731, 2521, 1924, 1732, 2474, 2522, 2023, 1925, 2022, 
        2637, 1996, 2025, 2154, 2426, 2672, 2024, 1997, 2027, 2155, 2638, 
        1926, 2026, 2364, 2365, 2243, 2687, 1927, 2415}], 
       Line3DBox[{1737, 2427, 2582, 1736, 1104, 1738, 2526, 1933, 1739, 2527, 
        1934, 1740, 2528, 1935, 1741, 2631, 1998, 2148, 1936, 2031, 2640, 
        1999, 2149, 2428, 2632, 2032, 756, 2247, 2429, 2633, 2416}], 
       Line3DBox[{1746, 1942, 2533, 1745, 1941, 2532, 1744, 1940, 2531, 1743, 
        1939, 2530, 1742, 1938, 2529, 2028, 2033, 1937, 2661, 2108, 577, 
        2246}], Line3DBox[{1748, 2430, 2583, 1747, 2431, 2584, 1749, 1118, 
        1750, 2534, 1943, 1751, 2535, 1944, 1752, 2642, 2035, 2109, 1945, 
        1753, 2644, 2038, 2112, 2310, 2312, 2311, 2702, 2111, 2270, 2039, 
        2272}], Line3DBox[{1759, 1950, 2540, 1758, 1949, 2539, 1757, 1948, 
        2538, 1756, 1947, 2537, 1755, 1946, 2536, 1754, 2641, 2432, 2249, 
        2034, 2042, 2499, 2645, 2207, 2424}], 
       Line3DBox[{1761, 2433, 2585, 1760, 2434, 2586, 1762, 2435, 2587, 1763, 
        1132, 1764, 2541, 1951, 1765, 2643, 2036, 2110, 2037, 1766, 2646, 
        2040, 2113, 2041, 2688, 1767, 2271, 2366, 2000, 2273, 2001, 2689, 
        2517}], Line3DBox[{1774, 1954, 2544, 1773, 1953, 2543, 1772, 1952, 
        2542, 1771, 2394, 2393, 2718, 1770, 2647, 2044, 2043, 1769, 2681, 
        2003, 2250, 2002, 2251, 1768, 2248}], 
       Line3DBox[{1776, 2436, 2588, 1775, 2437, 2589, 1777, 2438, 2590, 1778, 
        2439, 2591, 1779, 1144, 1780, 2648, 2046, 2047, 1781, 2649, 2049, 
        2050, 2707, 1782, 2051, 2229, 2052, 2274, 2694, 2507, 1783, 2252, 
        2275, 2004, 2230, 2005, 2690, 2276, 2253, 2336, 2179, 2180, 2045, 
        2114, 2592, 2482, 2279, 2278, 1784, 2396, 2475, 2719, 2395, 2006, 
        1785, 2677, 2212, 2213, 1786, 2721, 2400, 2401, 1787, 2545, 1955, 
        1788}], Line3DBox[{1790, 2440, 2593, 1789, 2441, 2594, 1791, 2442, 
        2595, 1792, 2443, 2596, 1793, 2483, 2597, 2056, 1794, 1293, 2115, 
        2048, 1795, 2717, 2382, 2384, 2383, 2116, 2331, 2332, 2330, 2695, 
        1796, 2313, 2385, 2314, 2117, 2334, 2335, 2333, 2682, 1797, 2254, 
        2277, 2255, 2053, 2598, 2158, 2208, 2157, 1798, 2280, 2371, 2281, 
        2054, 2599, 2160, 2209, 2159, 2413, 2161, 2181, 2162, 2696, 2055, 
        2211, 2337, 2210, 1799, 2317, 2318, 2703, 2214, 2289}], 
       Line3DBox[{1802, 1956, 2546, 1801, 2216, 2402, 2404, 2403, 2722, 1800, 
        2288, 2425}], 
       Line3DBox[{1806, 2547, 1957, 1804, 2548, 1958, 1808, 2549, 1959, 1810, 
        2550, 1960, 1812, 2477, 2551, 2060, 1961, 1814, 2479, 2552, 2062, 
        2156, 1962, 2061, 2511, 2715, 2367, 2257, 1159, 2150, 2184, 2387, 
        2185, 2121, 2418}], 
       Line3DBox[{1824, 1969, 2556, 1822, 2405, 2409, 2410, 2723, 2516, 1821, 
        2407, 2408, 2231, 2683, 2500, 1820, 2341, 2343, 2342, 2120, 2704, 
        2320, 2386, 2319, 1819, 2422}], 
       Line3DBox[{1827, 2448, 2605, 1826, 2558, 1971, 1828, 2559, 1972, 1829, 
        2560, 1973, 1830, 2480, 2561, 2152, 1974, 2067, 2496, 2673, 2167, 
        2153, 1975, 2260, 2691, 2417}], 
       Line3DBox[{1836, 1981, 2567, 1835, 1980, 2566, 1834, 1979, 2565, 1833, 
        1978, 2564, 1832, 1977, 2563, 2066, 1831, 1976, 2562, 2064, 2344, 
        1168, 2063, 2068, 2634, 2449, 2124, 2261, 2504}], 
       Line3DBox[{1838, 2450, 2606, 1837, 2451, 2607, 1839, 2568, 1982, 1840, 
        2485, 2569, 2125, 1983, 1841, 2487, 2570, 2127, 2321, 2388, 2322, 
        2126, 2509, 2698, 2070, 2293, 2290, 2291, 2419}], 
       Line3DBox[{1849, 1988, 2575, 1848, 1987, 2574, 1847, 1986, 2573, 1846, 
        1985, 2572, 1845, 1984, 2571, 1844, 1180, 1843, 2724, 2453, 2412, 
        2411, 1842, 2652, 2452, 2263, 2069, 2292, 2654, 2072}], 
       Line3DBox[{1851, 2454, 2608, 1850, 2455, 2609, 1852, 2456, 2610, 1853, 
        2486, 2576, 2128, 1989, 1854, 2653, 2071, 2130, 1990, 2262, 2505, 
        2692, 2010, 2132, 2235, 2236, 2234, 2684, 2011, 2237}], 
       Line3DBox[{1861, 1994, 2580, 1860, 1993, 2579, 1859, 1992, 2578, 1858, 
        1991, 2577, 1857, 1192, 1856, 2611, 2458, 1855, 2713, 2457, 2368, 
        2360, 2361, 2714, 2363, 2362, 2423}], 
       Line3DBox[{1863, 2459, 2612, 1862, 2460, 2613, 1864, 2461, 2614, 1865, 
        2488, 2664, 2129, 2073, 1866, 2655, 2074, 2131, 2075, 1867, 2656, 
        2076, 2133, 2077, 2187, 1868, 2506, 2635, 2012, 2238, 2013, 2685, 
        2420}], Line3DBox[{1869, 2370, 2014, 2369, 2015, 2686, 1870, 2078, 
        2079, 2709, 1871, 2082, 2083, 2710, 1872, 1339, 2085, 1873, 2657, 
        2087, 2088, 1874, 2720, 2397, 2398, 1875, 2581, 1995, 1876}], 
       Line3DBox[{1878, 2462, 2615, 1877, 2463, 2616, 1879, 2464, 2617, 1880, 
        2465, 2618, 1881, 2466, 2619, 1882, 2658, 2090, 2091, 1883, 2659, 
        2093, 2239, 2094, 2670, 1884, 2264, 2016, 2240, 2017, 2296, 1549, 
        1885, 2297, 2373, 2080, 2134, 2081, 2674, 2188, 1886, 2189, 2084, 
        2135, 2620, 2489, 2421}], 
       Line3DBox[{1891, 2222, 2221, 2679, 1890, 2019, 2399, 2018, 2636, 2514, 
        1889, 2301, 2302, 2089, 2137, 1345, 2191, 1888, 2190, 2086, 2136, 
        2699, 2490, 2295, 1887, 2294}], Line3DBox[CompressedData["
1:eJwVzrkyg3EUhvGjIKjM2NJqIwYXYC1cQGaQsRXGFktiKwhKnUJCdCrLjGXG
BdC4DFvnKiSFX4pn3uec8/7n+3oWC5l8Q0RksZyIuGmJGGqNWOK3fJiv8Ds+
wlf5PR/la/yNj/HB5oic+dWcM8+Y01i3K5nb7SfRgVn7XplGCmfuG3qdfApd
mNMp4QHnKOhs6nS7TSOJefuXxohHWcaW+5+ccKvKfox7dyj77A5kXqcoazjC
nvuAPMETjuvf0rmQ17jEvs6CvMIzKtjWaWuK+ODv+DXv4FT30/xV/zf84Bu7
bv8lKi2G
        "]], Line3DBox[{1920, 2414}], 
       Line3DBox[{2030, 1932, 2029, 2639, 1735, 1931, 2525, 1734, 1930, 2524, 
        1733, 1929, 2523, 2481, 2106, 1928, 2660, 2107, 2245, 2244, 2242}], 
       Line3DBox[CompressedData["
1:eJwVzbk2A1AUheETZBneQOkFDJEEtXlIo9KF6LAozFMMvUaTIEujQGdqKRR0
Fp234bvFv/59zz733q7K2uxqJiLKGGqLGMRwR8Rbe8R6a8QtjzhvyHfyqLwp
38tj8pb8Ki/JZXdz2Db7MVs2m+N5sx7uRTd29N/c0E/wOPrT3WT0oabbtTcp
T2MKeTsPyKc39B+8Z+fPbEYOFORPrusL/Oi8b6fG16hjAb/ZiKL+ST7QZ+QS
mnDmbtH8CM+o4tDOBa/o3u1U5BZuRlX3xee6Ts5iUX+FF1ymt+zc+LMhH2MA
p8l2T/gfnRct/A==
        "]], 
       Line3DBox[{2233, 2345, 2708, 1963, 2232, 2286, 2287, 2122, 2495, 2662, 
        1964, 2151, 2165, 2166, 2123, 2663, 1965, 2065, 2484, 2553, 1966, 
        2340, 2501, 2554, 1967, 2406, 2515, 2555, 1968, 1823, 2557, 1970, 
        1825}], Line3DBox[{2258, 2259, 2604, 2256, 2009, 1818, 2186, 2215, 
        2678, 2497, 2119, 2285, 2316, 2284, 1817, 2508, 2697, 2339, 2283, 
        2118, 2183, 2315, 2182, 1816, 2669, 2163, 2338, 2164, 2059, 2282, 
        2372, 1566, 1815, 2008, 2058, 2651, 2478, 1813, 2007, 2057, 2650, 
        2476, 1811, 2603, 2447, 1809, 2602, 2446, 1807, 2601, 2445, 1803, 
        2600, 2444, 1805}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{937, 1093, 2518, 938, 1104, 960, 2584, 1117, 973, 2586, 
        1130, 986, 2589, 1141, 1000, 2594, 1149, 1008, 2601, 1156, 2548, 1016,
         1164, 2558, 1028, 2607, 1176, 1040, 2609, 1187, 1051, 2613, 1198, 
        1062, 2616, 1204, 1071, 2622, 1211, 1078, 2628, 1217, 1084}], 
       Line3DBox[{939, 1094, 2519, 940, 1105, 2526, 961, 1118, 974, 2587, 
        1131, 987, 2590, 1142, 1001, 2595, 1150, 1009, 2602, 1157, 2549, 1017,
         1165, 2559, 1029, 1177, 2568, 1041, 2610, 1188, 1052, 2614, 1199, 
        1063, 2617, 1205, 1072, 2623, 1212, 1079, 2629, 1218, 1085}], 
       Line3DBox[{941, 1095, 2520, 942, 1106, 2527, 962, 1119, 2534, 975, 
        1132, 988, 2591, 1143, 1002, 2596, 1151, 1010, 2603, 1158, 2550, 1018,
         1166, 2560, 1030, 1319, 1320, 2569, 1382, 1321, 1322, 2576, 1385, 
        2664, 1328, 1329, 1064, 2618, 1206, 1073, 2624, 1213, 1080, 2630, 
        1219, 1086}], 
       Line3DBox[{943, 1096, 2521, 944, 1107, 2528, 963, 1120, 2535, 976, 
        1133, 2541, 989, 1144, 1003, 2597, 1300, 1301, 1302, 2650, 1244, 1245,
         2551, 1309, 1249, 1250, 2561, 1401, 1323, 1324, 2570, 1384, 1325, 
        2653, 1326, 1386, 1330, 2655, 1331, 1065, 2619, 1207, 1074, 2625, 
        1358, 1359, 1392, 2666, 1360, 1361, 1087}], 
       Line3DBox[{945, 1223, 1224, 2522, 1264, 1231, 2631, 1232, 1395, 1279, 
        2642, 1280, 1376, 1281, 2643, 1282, 990, 1291, 2648, 1292, 1379, 1293,
         1294, 1303, 2651, 1246, 1247, 2552, 1311, 1433, 1434, 1316, 1436, 
        1435, 2673, 1402, 1448, 1449, 1383, 2698, 1574, 1573, 1655, 1575, 
        1576, 1538, 2692, 1540, 1539, 1387, 1332, 2656, 1333, 1066, 1347, 
        2658, 1348, 1390, 2665, 1349, 1671, 1673, 1672, 1393, 2667, 1675, 
        1676, 1674, 1706, 1705, 1704}], 
       Line3DBox[{946, 1225, 1263, 2637, 1227, 1266, 1424, 1425, 1275, 2640, 
        1234, 1396, 1283, 2644, 1284, 1378, 1285, 2646, 1287, 991, 1295, 2649,
         1660, 1662, 1661, 1665, 1663, 2717, 1664, 1650, 1652, 1651, 1653, 
        1566, 1567, 1310, 1648, 1647, 2715, 1531, 1251, 1533, 1537, 2691, 
        1713}], Line3DBox[{950, 1526, 1235, 1277, 1110, 2661, 966, 1278, 2641,
         1123, 979, 1236, 2681, 1500, 1640, 1641, 994, 1724}], 
       Line3DBox[{953, 1101, 2524, 954, 1113, 2531, 969, 1126, 2538, 982, 
        1137, 2542, 996, 1474, 2677, 1611, 1475, 1476, 1597, 2703, 1305, 1666,
         1306, 1596, 1504, 2683, 1480, 1613, 1481, 2554, 1024, 1172, 2565, 
        1036, 1183, 2573, 1047, 1194, 2578, 1058, 1343, 2657, 1344, 1389, 
        1451, 1345, 1405, 1346, 1452, 1391, 1457, 2676, 1462, 1356, 1585, 
        1357, 1601, 1584, 1394, 2668, 1458, 1365, 1413, 1366, 1459, 1371}], 
       Line3DBox[{955, 1102, 2525, 956, 1114, 2532, 970, 1127, 2539, 983, 
        1138, 2543, 997, 1691, 2721, 1692, 1693, 1694, 2722, 1695, 1503, 1702,
         1701, 1698, 2723, 1699, 1700, 1697, 1696, 2555, 1025, 1173, 2566, 
        1037, 1184, 2574, 1048, 1195, 2579, 1059, 1686, 2720, 1687, 1688, 
        1689, 1690, 2636, 1355, 1708}], 
       Line3DBox[{957, 1273, 2639, 1274, 958, 1115, 2533, 971, 1128, 2540, 
        984, 1139, 2544, 998, 1147, 2545, 1006, 1154, 2546, 1014, 1162, 2556, 
        2557, 1026, 1174, 2567, 1038, 1185, 2575, 1049, 1196, 2580, 1060, 
        1202, 2581, 1069, 1487, 2679, 1516, 1488, 1707}], 
       Line3DBox[{965, 1557, 1558, 1288, 2645, 1466, 1122, 978, 1528, 1529}], 
       Line3DBox[{1053, 1253, 2685, 1509, 1645, 1200, 1067, 1351, 2670, 1403, 
        1484, 1208, 1075, 1627, 2700, 1628, 1583, 1631, 1214, 1081, 1633, 
        2711, 1634, 1632, 1220, 1089}], 
       Line3DBox[{1083, 1216, 1367, 2627, 1077, 1210, 2621, 1070, 1203, 2615, 
        1061, 1197, 2612, 1050, 1186, 2608, 1039, 1175, 2606, 1027, 1163, 
        2605, 1015, 2547, 1155, 2600, 1007, 1148, 2593, 999, 1140, 2588, 985, 
        1129, 2585, 972, 1116, 2583, 959, 1103, 2582, 936, 1092, 1262, 1373}],
        Line3DBox[{1090, 1221, 1411, 1492, 1491, 2680, 1082, 1215, 1490, 1406,
         1454, 2671, 1453, 1076, 1209, 1485, 1352, 1549, 1548, 1068, 1201}], 
       Line3DBox[{1091, 1222, 1412, 1259, 1495, 2712, 1635, 1494, 1493, 1407, 
        1353, 1455, 1486, 1420, 1419, 1404, 2674, 1336, 1450}], 
       Line3DBox[{1248, 2604, 1532, 1013, 1680, 1681, 1679, 1397, 1241, 2599, 
        1428, 1473, 1472, 1471}], 
       Line3DBox[{1268, 1522, 1229, 1521, 1099, 2687, 1711}], 
       Line3DBox[{1269, 1423, 1556, 1230, 1374, 1100, 2660, 951, 1272, 1111, 
        2529, 967, 1124, 2536, 980, 1289, 2647, 1136, 995, 1563, 2592, 1290, 
        1564, 1725}], 
       Line3DBox[{1370, 1442, 1461, 1261, 1369, 1260, 2701, 1586, 1363, 1439, 
        1587, 1257, 1409, 1256, 1456, 2675, 1438, 1354, 1579, 1342, 1720}], 
       Line3DBox[{1372, 1445, 1446, 1414, 1444}], 
       Line3DBox[{1380, 1598, 2704, 1307, 1314, 1308, 2553, 1023, 1171, 2564, 
        1035, 1182, 2572, 1046, 1193, 2577, 1057, 1339, 1623, 1340, 1388, 
        1578, 2699, 1341, 1513}], 
       Line3DBox[{1489, 1554, 2693, 1555, 1410, 1441, 1440, 1460, 1443, 
        1710}], Line3DBox[{1506, 1505, 1569, 1568, 2697, 1012, 1153, 1502, 
        1501, 1610, 2682, 1609, 1005, 1146, 1467, 1297, 2694, 1560, 1559, 993,
         1135, 1639, 1499, 2689, 1723}], 
       Line3DBox[{1507, 1543, 1542, 1541, 1571, 1654, 2654, 1572, 1327, 1483, 
        1617, 1482, 1381, 1536}], 
       Line3DBox[{1518, 1591, 1590, 2706, 1602, 1588, 1659, 1589, 1364, 1553, 
        1637, 1552, 1517, 1550, 1551}], Line3DBox[{1519, 1592, 1593, 1709}], 
       Line3DBox[{1520, 1228, 1267, 1416, 1098, 2638, 949, 1524, 1525, 1523, 
        2633, 1109, 1712}], 
       Line3DBox[{1530, 1237, 2690, 1562, 1468, 1469, 1470, 1427, 2598, 1240, 
        1570, 1477, 1478, 1479, 2678, 1447, 1304, 1400, 1417, 1418, 2662, 
        1021, 1312, 1169, 2562, 1033, 1180, 1044, 2611, 1191, 1055, 1335, 
        2709, 1618, 1619, 1620, 1621, 1718}], 
       Line3DBox[{1534, 1019, 1159, 1399, 1432, 2669, 1431, 1011, 1152, 1612, 
        1561, 1608, 2695, 1607, 1004, 1145, 1606, 1605, 2707, 1296, 992, 1134,
         1527, 2688, 1286, 977, 1121, 1595, 2702, 1594, 1377, 1465, 1604, 
        1464, 964, 1108, 2632, 1276, 1233, 948, 1097, 2672, 1415, 1265, 1226, 
        947}], Line3DBox[{1577, 2620, 1338, 1512, 1514, 1515, 1629, 1437, 
        2626, 1255, 1408, 1421, 1422, 1636, 1496, 1362, 1368, 1497, 1498, 
        1638}], Line3DBox[{1603, 1463, 1270, 1375, 1271, 2523, 952, 1112, 
        2530, 968, 1125, 2537, 981, 1682, 2718, 1683, 1684, 1685, 2719, 1238, 
        1298, 1239, 1649, 1426, 1299, 1429, 2696, 1565, 1242, 1398, 1243, 
        1430, 1721}], 
       Line3DBox[{1714, 1535, 1317, 2634, 1167, 1031, 1318, 2652, 1178, 1042, 
        1677, 1678, 1643, 1644, 2714, 1189, 1716}], 
       Line3DBox[{1715, 1160, 2708, 1020, 1615, 1616, 1614, 1168, 1032, 1703, 
        2724, 1179, 1043, 1642, 2713, 1190, 1054, 1254, 2686, 1511, 1646, 
        1717}], Line3DBox[{1719, 1626, 1625, 1624, 1622, 2710, 1337, 1056, 
        1192, 1045, 2571, 1181, 1034, 2563, 1170, 1315, 1022, 2663, 1161, 
        1313, 1722}], 
       Line3DBox[{1726, 2684, 1252, 1508, 1544, 1545, 2635, 1334, 1547, 1546, 
        1510, 1350, 2659, 1667, 1669, 1668, 1670, 1599, 2705, 1600, 1580, 
        1582, 1581, 1658, 2716, 1656, 1657, 1630, 1258, 1088}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
uFytxk/eggm0rJGedz06Aht3tJybVIhccrziAtImKgLdeJKbMStzhgQnEkek
VzeELVn/WekjvUaqH37kiMr7UPoGNFsRcCO/Kx0C2HYKDrNRcFA16leqZCue
bJ1xnCxLhYbiiLojoSSMlL+UvlyxBzfYiSe4PEkEO7VtD6d8ptD6jQNJK20Q
u6VdJcnaMXCZVq6Y9HMAve/f+5jCOY3v3KbuPisMgCszBnH1vhS88mJ4/e62
JghsbDksvCJjyX6eFSnW1usch2Pv87d9ERkFFpWOjwpGKUvajZIXy+/uREbh
UZnvyic7sM7cJvqVTDxc8Sohd4xPIJ/mMn9aphFM9z4xezo8HC6kf3I5cmYK
+9uUh0v2DqG7YJt43rPQv31da8zTn8/eQUYfq4M1NOe78EPqjKRR/59/7skd
sS82kQkUH5v85TRjDp3m+5Q0lZNB62tx3cWN1HXd7ddtH1ELWOtR1XwvBVI1
uVdv/kSgD//LVbJygRg8WyoYIR0OWVZPr+xuJrCY30/ZkzcHmf0+VM05ewIc
FqiREKDgUctt3LK8rVCTJXJciohY8n394FBNfyhKoOUuvVav9bXwWN+d4aOt
J2Q1JhScCiWjrHpahL1JO/hVm4Y4lWfAnVcvSMa7plGaMXIopmkASrfpxW/g
SIRPG4KKlTaNo/TYr1LRjWNwOGiivpEhDOZHuLc4PBpB9dfioi/eTEDVyoMq
gjlL789cH29GG9xoQ9d56wPzH8jA7XszlM8xcsn67ZrZLrv5KvHc5zGajVcI
UBpJGtI8H/e371cPPCrusH8dx9VmfIk960eBcBj/bjOTDAGsFJrJGTJGKSik
n9JrBYGHViUMz/JAa2trkd7KETTNlXieNzoBibZDzvVSceCvKjsmlkzGtQaZ
56Nn2+DeIZqTowdyYMYvLc9ivgvPPvualrtAgmrmB9kZxyPhVq689rZmMpbY
ZnlYyrTB2wZ78hRtDkiKxZAqHSh4zrTYwzShCUqG/Xbu2ZYPeS9Lrlc3D+Cx
XDlNYuU0jB5Y5hhdlg3s9x+lW8S2YfOb9p09amRwkLnil1BXseR4lWM/862w
KgcdlmEdtTkyXkvpC6+3agZhfCmRokVBEZ30r7dt3sOjsScHsqQKod0uTniC
ypUMLbaRU6ypaBHH7KaVUQi+ao6ypnsIfE/Luf/6kypc85bvsnN9LnwZVk9g
rCAwhsHulkl6NKqeyptdJp0LtU/Ga5pYCXRRG76g2F6DO+QLShIVsyHkaqIi
iwUJiyP0dGlce9C1lWfo+a4s2HbzArtVYC/Od80dlTxLQn21d79K7WMg/EsF
p3p0L57hjC39ensKa+QsQtViWsAnMPXShZBOpMtOVJumru/D3MenOmlygMet
ej4ifxgSuE46ZS+bwHnVq87ndOtBSnEg9RRvNXzVW2inSBHoJH6Jhrc9eUm7
pWzR8Ru8ScDaL31Sx8+Vom6PZqAPVx4cy/ft9Z2gIKfG3hSuqjfQ2OSflvei
EV6KVE00ZlPwprJjmMvFW1JnO1ozYLAJNE4YH0ZSK86o/hxPoaNg04OgC866
McC4Z0aq+bf/Uzjz8Lf/8zL9XKrSij+Mr/7Z+f9P+pkt9tt8hijoU9K6bfCH
LaSvnRj9mtv4t+/DT+Ru0nz4SGDk1k5zeUUXuFUnEeocEQMiQvns4tMEdvno
HJa8m4xCj3iP2el5wDnnnKjzaQTW912OsR6j+t+OGpzHQpfef46WcozfbSCQ
UWmVaGRAGtaprTtYl5oCXjetuvupXHam2u0Au3U8FHz+VFH4MBFYtIEj6h4F
OSw45e45NoNpnXPcLcZYuLktUW585wR23LsbUzQzglY++83nC6MgnlQJO3VG
MTv8a87BwnHs3VNhZ88fD8vO6jbufjAAyhqZK3erTANSGgXrXdP/ZXFCyRbz
5ZBKYDu/QZuafAEUWW4T97NIBoqchCAd9fwaLxq/rU2XiHt9JvOeZQZCFu2z
VgEXgrqPSZy+87gUgmkXfEK1w+Ehu8kdFjUKytCWxWyubwbrkwYfOvanQaX1
muvFZiRcsP1kkLOuF6Q3iw8McscA8y4NaSGaSRTSP2J9/+Mw7KffbPm04A/j
Ff/HdtCJ/pIyFTuFpeus62sNBiHMfSBmt3EmGLGpioZqTmB3/PqqM94jcPKg
6nujQ2nwIYLuuO3oKN5gOsrvIzYO03ELti6lKZAiOWNTYzaMe54aMypSeV8p
rXfFlvZU8Fpd93SZ1igM3G1sY+YahquXbmsnPeuB1k9ftsc7UO1Gp5/NopID
Qsku6pJHiiDZQE/wdi6Bte+zNXZHx8D72M7RpmMFIBxw4uLNvDHcWJV758DZ
Mfyq0jnSSJ8FUikvgs2E8qHXfg0PtzOBYdbDpyMOINBIlsgJlY3Dz0KlgyPL
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
cvVLIoHJVpfj6y9mwudWj4+baHLB53n7sla1SdyYzazDJzAMOS8ko16yIrD2
y4mfIrpw+2Rh46A/CZSZt+4ysCj50/OZ4dJMV1vDJL7U3SdgVTiEPXW1L6bK
U8HydLSJwuMsTNp/PMtIk8CK6LNVorfKof2MyNqhvDHcHrX19dT9EeSns6Kl
m34PH/r2qz85UYz717vu7RgjYw6difueoRbovjwx/cygHV+GPmfZm0xG1865
7IsrUoAlr+fuhNkQnmzm8kuInkQR+xOXcqpLIGNbVLi7UzOIcCkV0xBkrLln
b72mshxo3Y+5v+kYgXcPLbdg4jg+yxQ8+kylDMJkbVauj+yGhZ2qs33203hV
9/nBl5pNILE6z6+iaxyOCFbObJAeQRkvu8mvqdXwPuT0PW3mZvDaejNK4gYF
h64LxW+JzIJuNZuDCXLDYPKOqcJVZRID6/JPvpDK/cu4jz9wt2sJdR1951yh
piIeC1miOy4l0vvAOx/O43eGCTy7pptdNyoNNEZ7xzTaPaB9gm/D/lECBcR1
h4QSU3FedqvBcS9vUN06OXuIQmCPe1PJQwVfkD8tGWXYmQBrnyXfeGVCQvXB
Cq3HLL1Ykm8sc+9bHIzQaDOZVE1gE3srMb9vBDsu+lZ+L4yCMOH8nmhXEhYY
mA+THXpQ/qt+XnhTEjzi7+7y2zyGybXVvDks47giODvcly8WfOs+ZUhtboMk
0vOC0CEydEzwLe97kfm33zNmySctMwshcCOPumpcSjHaNvP1HCJC4JIhs1vz
JIE6v26+bTNKAr6fL2MnVEL+9P4WS9c55aU3jeddtPbukhwAnu+rjRy+ZgJ/
EB/tzOlhpPfxlOkynoRGx+OfHWsSYHi528qrMIWtc6Z8RmxDoGuQ1EGTlAGh
Zxo6rxtPol+C7v3iPcMgqq50ymhzFqzMoGdd8M0BqDWuKj5DIC2d67PMhnLw
ebe6tOzBMNzhLT9OYZpEsqaH97oPhUC5bv4ws4qCox0WOqXLH4Iia7uQs1ET
KCZ5mf7W1xmvHcun6qLaPsd+6+szkuvWNXago4Lsps8WZLT8yJvuOfTnv7uL
dYj8sVmCwHuxNQqvSmqwoJ7P6Zmjx5L197n6xkxpk/Esm9XeOZlO2OHfdo83
NAKKst3eeC0nUPAUN5tqaT0Iaa2U9XgdCxy3Ar+c6SdQPn0fR+SVJPTp8a+O
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
tHUFFonB1P53CA6etgmPwYHNmgWTftVg8TZ8Mu42gZ43h1ZodaWjTP3X1/q0
5fBJRDisxYHA6WZZgadns5A7TVstlFwEGZ+WbV6dTqBoY52SEV8q8u7z23Sx
OA961u9bWd5HYNLERWvOo25Yx9vHYRaUATQd7HFKdQS+85/a8tY1A1S+BjnR
n0mGseaD24kvFHwlwR720q8Bzm3EnFSFaBBazE87uZif9tFiftorgi+Phl4b
R1769Cje1lHgFj6zPLxp6fu7v1uns3XeaUxdX+kVVtxnxGIw5IrBDcfvlSD3
Qttthz6BfqarbnrezsKqm/vrsbEUqltG07io67c63/mFoH4hrhfbNiFypAg6
vc1VVcwIHKo6k5X8qhiP8biXhhjnAZ35/NHTLgSy+NRJFb8pwlDDqiJ/t0zQ
WMwre3Ixr2zmYl5ZK3JDtfY0CeVmCot+inTDuoNDQ2reS9/H2bx+eaSS2k9W
S/FCz+/h6Hz03JsYwwo4akrT5/+YwLIVxZ+OWmTh0fdnDxpR95mNgvWeqEFg
zeozTHZXSzFo2/13l+8isJClUtbMUrDVJqIskqYex08VX7QxygbvxbysM4t5
WS8t5mVdL+VwqI9vHIONH902ZxjDjLvDfhkW0VDvkajTMdeLOp9r+Tdvm8T9
jAqBQUTnkv0PIxX2tFgRGCbGEnF0sw/mBh4rVj5SDq/Sbfk/+xEoZxPNYNiQ
jE/WDaiH5BZBkBxcCrWmzs+1vaJpXkWofmOLYG9aLszZ9Z42+0nBAEN3ce3V
9Vgp847rClc67Phfz5nOY/vH8/L+6vnzd+vLDCPvp1DXb/Yvs+gSxWUYs/pG
T15cGVRtcIk4mUWgTOtDjTWZTsjiKmOfXFcIrofHTxg3EBjFPLbSNjQSC/f7
mssLZYPjwMOzBwsJfFChI1gik4NnW1mOrWZfOs/Gf4q+93PnLJ8NgWPir9Ue
pPpDlJspH8+qcggV1gvqjibwNhSdp42OB0n9se9FnwtBp1PKepRqNy2tsgXt
axnQctunin579r/duP6svlx0QxCbHoGVStYtiixxMCJxrO6lfgWo3Wuq3H+X
el6ceWZQFIbAvdZ27x79YphsXdsZxElgpIm7bGZRNTDGkuKZGfP+7cb1Z/Wv
Rha5CycIdH7GYbW+OBk2ZGfeE0qrAhOHNRKVuwjknVmjeFyiFMKsyoN2rC8D
9y27zgQ6UXDPzMrpBNYmmDM4EfRyohCKnmapnzpKxgqxUHoLvk6YX8Z4t9kg
B35elS19Tj+NAe2rZ4tnBsBBOjDhyIY0uNiYt2e0ZRzDb8nflJMbhciasNyW
jHhYvZjP8/liPk/9xXyeX/YK+FoXFmBniZHZzefv4dbjE4pq1ylLjiv5kM+7
Q9upfqN19Q3FriQorXb0j9GshRaR7T8b2Anctkoly1SiGE5Nj/mlHqkE3mV8
KqLZFKzRmTToU66DNeHWu0MdS0Hk0bv01nky0rXt0b+V0AK6H1fnrVEtgiPc
Qy+1a0j4eZ3y2eKPXaCSeN0ikC8fKhfzZE4t5sm8uZgn88tejuUrF0bwvcm+
0c1MEyDBlFrq0ZoCH13SvaJWE6iuyzXEei4CFMR30Vbb18OXzLFEv0ME1nmZ
2j9WTIOKNS7Fca+qoYhhqk2Qyk1t+0zkNBxywEjKhVd9TQUwyDY4u1L56NVu
SQEczwNz9kDlu+tLwX0xnyT9Yj7J0MV8krsqeepTr1NwufWQ21fmZvwmempe
oyoLEvlz7KrpCHQvF1jFcN0BjGy8f8rdaQCfGyU9vznuWewaSfGha7B+Y5Pi
b44T3p3+5jevPS3tL1Sn8lr8I6aE37xmVNAn/JvLNgeIqU1SuSyIX9/mN5fJ
SJWSf/NX1FiIiRSVv+6JiTMHUvmrbmpnxG+e6q1MlF1J5aldZgyZn6g8JbOY
p7F9MU/jp8U8jcW6MueYW0eQoV3rbDFM4N2zh93tAiOguNF28yadfjw2RaPc
3jeNfNf16YdIwWDd8kLfkMqn1mz6IfOir7HnVnnwQaYG2PbosPkdZaqf1hne
btMVjp3LLhQKfKiCZvJRtmJDAu0X5JKmDdLwx5rN52JelIFawCtFI6qdhSXL
XjUfLcLCb8fPPCosgkSlmk1nqe+xLz2jqlm/BnM2LiilbcwHsUXu+7nIfUcX
uc9tmcSBu73D2J6s1Plt/SQ2MctPdHF4wme+dpfW9lZk8T7Btv/5MCbuf3jq
4eDYX7beXUKvqjRyUP1bPsc8xqkQFM1p+cYwXAfXE0cWNlP5S9RTXSBKIRk/
D6jQ8/tVgqOfjpfHb856Vs19OCcbt46unuwZLAFOO4uQO9T9U9w8jMUtoxiz
DSLcTXQRxD/v3RpF5bufTfp6BkE1qLuKJekwVxaELfKXwSJ/nVrkL63vQfsl
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
mOT4vDxkfgJmlDXwy87uAcVh3LCvZADVB6rPSllV40KaGj8axkNOrq5ackAP
qgrUrl0pQsN5jrTq5YqxcKJJJjtIpg17s16knC7qRY/e/tzX62JhNlvmqYfm
75Bzr88djjYGag4kNGYLxkOaHj//qqnt4JH5TEuEpxpb8x9XOkxl/t2d5ZfX
Z/TiZ/k8yQsP2+Be7FVOoZdvYF2lKvvcG+0oczFO5nBRN2RuYxzj9f37vArT
Lk9WeSNYhHSt3hcrAopgy63m4buqDJCbp6km2tCL0+7xXPip2gZZtzvKPu51
Ad61h2pnZbWhnt1OPh3BBvgwn2UOb/v47ep446I9iakbKKMOLNS8MbX9JB3O
Ww+/9fsaCKZ3O1wiUpqwzrWpN1CuH3Q0ZfVCUnzHHbcc7+/aZAwLBHpk4ZzT
DY7HrcrwplsFi6Pq3zc/YvdBsOD04zY89H1RSs7nBmxIzOKiKv79+x9rRPe/
L5Hswvdbmj16v3bB3vBT/cKb3cDUpPy78bEqvATQY6xKg3rZk0O6zP4uJSF5
n/w2BgpkREW/qKoE4dv7vM0cwyCR8H2EixCeTeqQniJ1SE+QOqSJinNWL86g
YbKQ9s5VSj2Yp3ue44TQ+OPbK4knZBPxhLQQT0iQrlXxwUPvsGX4uRaPeD5G
n5oScu+/+F0eHvuhuqaiH0U3XWKvi24AN4qNk2+J17ifr6OxzVh+oxUr35+5
nK7RB9sPD/RVJfnBLLK/dZR4LVZuGtvfqne3//TkBRTYSyb/aKNysTE473Tv
5Cy4SbgL4UcJt6WHWsQEUzDL1C/mmWs4nhkZHvjyMH1c3pvwxPDOdwpjbfRE
9rg4wUxtesqZQvs/1s+nkfXz7X+xfv4kmX/ZQuZf3pJ5mRdeyr2NU+i4Mkbx
5CNGB5hWT6noe+wBke9uvNDd3YluW/dNshnoBplbG9XV8SVc2XDLPWtdLQrF
zDh6prQdXi5mlbXr7IJk8jzs+tPzMNHnU8Bx8rqeW52YqMCTusq/G3qVpuzm
ORAO6whP/xOfs2bmpZVf6XhHon1u7pt2nNOzfGQNeyAsjTK6ExXSidwXv+Wy
3e/Gpz6tlS5n/CA8b0Pc7MQOVCw4cXMXPx3p7NaLNyr5w3VDrb3aA+3oZmpi
oJBBxx+fJQ0i+v798/t36B1g9IGZdx2WdUaOUFD3VysOkrQDQ8JPyI7xC7Fj
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
G+PtnPuS/3+HT5mO/xtPqVpH
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{342.14459052935035`, 257.75142630228333`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0., 0.9999999285714286}, {0., 0.9999999285714286}, {0., 10.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.8300001802611374, -2.901265358984271, 1.5309340343477753`},
  ViewVertical->{0.12444067318415948`, 0.4349823324668373, 
   0.8917986820461125}]], "Output",
 CellChangeTimes->{{3.8891755817695312`*^9, 3.889175594302236*^9}, 
   3.8891764070208073`*^9, 3.8891767566006327`*^9, 3.889176867171747*^9, 
   3.889177085881054*^9, 3.889177252960514*^9, 3.8891776103409147`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"1f2e8873-c663-420e-a6b7-1823ee22c130"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s get a rough benchmark from a brute-force \
NIntegrate", "Text",
 CellChangeTimes->{{3.889175332836856*^9, 
  3.889175352310233*^9}},ExpressionUUID->"3c9bab8d-5422-4524-bbcf-\
9c4ffcb79063"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quiet", "[", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{"Int", "[", 
     RowBox[{"x", ",", "y", ",", "singuarities"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", 
      RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<MonteCarlo\>\""}], ",", 
    RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
    RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
    RowBox[{"MaxPoints", "->", 
     SuperscriptBox["10", "7"]}], ",", 
    RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", "]"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.889175345568306*^9, 3.8891754310367947`*^9}, {
  3.889176499446582*^9, 3.889176508614811*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"8e1377be-40b6-4bb3-8154-3960f668e020"],

Cell[BoxData["7.640811897866949`"], "Output",
 CellChangeTimes->{{3.889175382848144*^9, 3.889175441179043*^9}, 
   3.889176418079254*^9, 3.8891767701814327`*^9, 3.889176869780528*^9, 
   3.8891770989451437`*^9, 3.88917726781514*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"c2489075-7a47-4d40-b248-887b39c7f314"]
}, Open  ]],

Cell["\<\
Now let\[CloseCurlyQuote]s try to get a better benchmark by integrating it \
with a single polar parameterisation centered around (0,0)\
\>", "Text",
 CellChangeTimes->{{3.889175609644657*^9, 3.889175640986252*^9}, {
  3.889175690725761*^9, 
  3.889175700900403*^9}},ExpressionUUID->"49bef12e-ca3a-48e8-84df-\
9843729be7b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"benchmarkRes", "=", 
  RowBox[{"MonitoredNIntegrate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "1"}], ",", 
        RowBox[{"sectorID", "->", "Null"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}]}], "]"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], "\[IndentingNewLine]", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<GlobalAdaptive\>\""}], ",", 
      RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
      RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
      RowBox[{"MaxPoints", "->", 
       SuperscriptBox["10", "5"]}], ",", 
      RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"TargetRes", "->", "7.64"}], ",", 
    RowBox[{"StackPrints", "->", "True"}], ",", 
    RowBox[{"MonitorInterval", "->", "5."}], ",", 
    RowBox[{"Silence", "->", "True"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.889170342170885*^9, 3.889170353038385*^9}, {
   3.889170385469653*^9, 3.8891706150467443`*^9}, {3.889170645076499*^9, 
   3.889170774227298*^9}, {3.889170826538993*^9, 3.8891708583274612`*^9}, {
   3.8891712915867863`*^9, 3.889171294522946*^9}, {3.88917156509757*^9, 
   3.8891715669003677`*^9}, {3.889171602081498*^9, 3.889171645033245*^9}, {
   3.8891716779384937`*^9, 3.889171678443944*^9}, {3.889171804135744*^9, 
   3.8891718091444273`*^9}, {3.8891745363428183`*^9, 3.889174537701662*^9}, {
   3.889174614228941*^9, 3.889174617687632*^9}, {3.8891746779600983`*^9, 
   3.8891746860650597`*^9}, {3.889174732676783*^9, 3.88917476969807*^9}, {
   3.889174890397985*^9, 3.8891749082634172`*^9}, {3.889175021445758*^9, 
   3.889175023403798*^9}, {3.889175648648128*^9, 3.88917568574439*^9}, {
   3.889175719673565*^9, 3.889175721844302*^9}, {3.88917651140075*^9, 
   3.8891765133783197`*^9}, 3.8891776173461657`*^9},
 CellLabel->"In[67]:=",ExpressionUUID->"70d9f0ec-f3fd-471a-815b-a4ab3ea64eac"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"0.   s : 0.K evals      ( 0.% )        6.810769603655999    +- \
1.94            ( 28.573% )    vs target 10.854%   ( 0.4\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889175664512537*^9, 3.889175689120441*^9}, 
   3.889175725830612*^9, 3.889176418136248*^9, 3.889176770282262*^9, 
   3.889177099038951*^9, 3.889177267920775*^9, 3.889177623119564*^9, 
   3.889178388638515*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"947d138e-3722-47c1-8c3e-7fabf278224f"],

Cell[BoxData[
 StyleBox["\<\"5.   s : 25.6K evals    ( 25.6% )      7.648784979279663    +- \
1.02e-6         ( 0.% )        vs target 0.115%    ( 8605.6\[Sigma]\"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889175664512537*^9, 3.889175689120441*^9}, 
   3.889175725830612*^9, 3.889176418136248*^9, 3.889176770282262*^9, 
   3.889177099038951*^9, 3.889177267920775*^9, 3.889177623119564*^9, 
   3.8891783936195374`*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"d3c4188a-6026-4ddd-9ab9-3fb184b194b1"],

Cell[BoxData[
 StyleBox["\<\"10.  s : 48.6K evals    ( 48.6% )      7.648786500861897    +- \
1.25e-7         ( 0.% )        vs target 0.115%    ( 70028.5\"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889175664512537*^9, 3.889175689120441*^9}, 
   3.889175725830612*^9, 3.889176418136248*^9, 3.889176770282262*^9, 
   3.889177099038951*^9, 3.889177267920775*^9, 3.889177623119564*^9, 
   3.889178398645033*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"3be47dbe-17c5-4a7d-9bfa-5f73a68730aa"],

Cell[BoxData[
 StyleBox["\<\"15.  s : 70.4K evals    ( 70.4% )      7.648786461806143    +- \
3.68e-8         ( 0.% )        vs target 0.115%    ( 238693.\"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889175664512537*^9, 3.889175689120441*^9}, 
   3.889175725830612*^9, 3.889176418136248*^9, 3.889176770282262*^9, 
   3.889177099038951*^9, 3.889177267920775*^9, 3.889177623119564*^9, 
   3.889178403683791*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"8e870a5e-538d-4650-b1bc-fa99c8a2285c"],

Cell[BoxData[
 StyleBox["\<\"20.  s : 90.7K evals    ( 90.7% )      7.648785421187091    +- \
1.61e-8         ( 0.% )        vs target 0.115%    ( 543680.\"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{{3.889175664512537*^9, 3.889175689120441*^9}, 
   3.889175725830612*^9, 3.889176418136248*^9, 3.889176770282262*^9, 
   3.889177099038951*^9, 3.889177267920775*^9, 3.889177623119564*^9, 
   3.889178408670278*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"34e0a0d9-40ab-4942-bd92-71d72d0c250e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.648785423741679`", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> {{<|
          "t" -> 0., "I" -> 6.810769603655999, "\[CapitalDelta]" -> 
           1.946059134117709, "\[CapitalDelta] [%]" -> 28.573, 
           "\[CapitalDelta]Target [%]" -> 10.854000000000001`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.4|>, <|
          "t" -> 5., "I" -> 7.648784979279663, "\[CapitalDelta]" -> 
           1.0208474627844421`*^-6, "\[CapitalDelta] [%]" -> 0., 
           "\[CapitalDelta]Target [%]" -> 0.115, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 8605.6|>, <|
          "t" -> 10., "I" -> 7.648786500861897, "\[CapitalDelta]" -> 
           1.2547044351352454`*^-7, "\[CapitalDelta] [%]" -> 0., 
           "\[CapitalDelta]Target [%]" -> 0.115, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 70028.5|>, <|
          "t" -> 15., "I" -> 7.648786461806143, "\[CapitalDelta]" -> 
           3.681067327478968*^-8, "\[CapitalDelta] [%]" -> 0., 
           "\[CapitalDelta]Target [%]" -> 0.115, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 238693.30000000002`|>, <|
          "t" -> 20., "I" -> 7.648785421187091, "\[CapitalDelta]" -> 
           1.6159191851144204`*^-8, "\[CapitalDelta] [%]" -> 0., 
           "\[CapitalDelta]Target [%]" -> 0.115, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 543679.5|>}}, 
       "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 5, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 5], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 5, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 5], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
       1, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["t", 
                    Style[
                    "t", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "t"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "t"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["I", 
                    Style[
                    "I", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "I"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "I"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]", 
                    Style[
                    "\[CapitalDelta]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta] [%]", 
                    Style[
                    "\[CapitalDelta] [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta] [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta] [%]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [%]", 
                    Style[
                    "\[CapitalDelta]Target [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [%]"}, "ColumnHeader", 
                  True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [\[Sigma]]", 
                    Style[
                    "\[CapitalDelta]Target [\[Sigma]]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 
                  "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["6.81077"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.94606"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["28.573"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["10.854"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["5.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64878"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00000102085"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.115"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["8605.6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["10.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64879"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00000012547"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.115"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["70028.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["15.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64879"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0000000368107"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.115"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["238693."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["20.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64879"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0000000161592"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.115"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["543680."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{468., {87.634033203125, 93.365966796875}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{468., {87.634033203125, 93.365966796875}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.889175678982349*^9, 3.889175709518282*^9, 
  3.889175747616651*^9, 3.8891764401415377`*^9, 3.889176774110581*^9, 
  3.889177123229965*^9, 3.889177295913219*^9, 3.8891776468828897`*^9, 
  3.889178410847979*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"9e15235c-c9e8-47a4-a59b-4d592a55b2fb"]
}, Open  ]],

Cell["\<\
And now let\[CloseCurlyQuote]s integrate it using all channels so that it is \
bounded\
\>", "Text",
 CellChangeTimes->{{3.88917574031885*^9, 
  3.88917575771346*^9}},ExpressionUUID->"5b92a064-4d08-4404-9f50-\
4a7ab91a614a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MonitoredNIntegrate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "1"}], ",", 
        RowBox[{"sectorID", "->", "1"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}]}], "]"}], 
      "\[IndentingNewLine]", "+", 
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "2"}], ",", 
        RowBox[{"sectorID", "->", "2"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}]}], "]"}], 
      "\[IndentingNewLine]", "+", 
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "3"}], ",", 
        RowBox[{"sectorID", "->", "3"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}]}], "]"}]}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], "\[IndentingNewLine]", ",", 
     
     RowBox[{"Method", "\[Rule]", "\"\<GlobalAdaptive\>\""}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"MaxPoints", "->", 
      SuperscriptBox["10", "5"]}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TargetRes", "->", 
    RowBox[{
    "benchmarkRes", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
   ",", 
   RowBox[{"StackPrints", "->", "True"}], ",", 
   RowBox[{"MonitorInterval", "->", "5."}], ",", 
   RowBox[{"Silence", "->", "True"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.889175785283115*^9, 3.8891758013459587`*^9}, 
   3.889176515732288*^9, {3.8891776370592937`*^9, 3.889177653335891*^9}, 
   3.889178373410527*^9},
 CellLabel->"In[68]:=",ExpressionUUID->"f9ac35bc-8047-4085-9a86-5f19599fe08c"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"0.   s : 0.K evals      ( 0.% )        7.550292721536583    +- \
2.93            ( 38.807% )    vs target 1.288%    ( 0.\[Sigma] )  \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.88917841917323*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"a063e658-934b-46b1-ba95-8e884b9ccdcc"],

Cell[BoxData[
 StyleBox["\<\"5.   s : 10.1K evals    ( 10.1% )      7.645191054645202    +- \
0.0062          ( 0.081% )     vs target 0.047%    ( 0.6\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178424180249*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"e4e6872a-d8da-408c-90b9-16b055886f48"],

Cell[BoxData[
 StyleBox["\<\"10.  s : 19.3K evals    ( 19.3% )      7.645537855185715    +- \
0.003           ( 0.039% )     vs target 0.042%    ( 1.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178429195592*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"bbcef9a7-517e-4038-8feb-7b5cd9e2f166"],

Cell[BoxData[
 StyleBox["\<\"15.  s : 28.5K evals    ( 28.5% )      7.649011891096868    +- \
0.00165         ( 0.022% )     vs target 0.003%    ( 0.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178434207972*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"5ce804f3-1767-4e13-b014-d74c41f7ab3c"],

Cell[BoxData[
 StyleBox["\<\"20.  s : 37.8K evals    ( 37.8% )      7.648824989376196    +- \
0.00113         ( 0.015% )     vs target 0.001%    ( 0.\[Sigma] )  \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178439221223*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"5601bf16-d97f-4e03-92d3-247febf61861"],

Cell[BoxData[
 StyleBox["\<\"25.  s : 46.8K evals    ( 46.8% )      7.650243765175305    +- \
0.000864        ( 0.011% )     vs target 0.019%    ( 1.7\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178444233266*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"246e1a2e-e2fb-4e87-9458-2171eab83bde"],

Cell[BoxData[
 StyleBox["\<\"30.1 s : 55.7K evals    ( 55.7% )      7.648980155997593    +- \
0.000672        ( 0.009% )     vs target 0.003%    ( 0.3\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891784492487097`*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"40475b93-8934-43b0-8e4f-2c57096bcba9"],

Cell[BoxData[
 StyleBox["\<\"35.1 s : 64.5K evals    ( 64.5% )      7.648471961582015    +- \
0.000532        ( 0.007% )     vs target 0.004%    ( 0.6\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178454269311*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"25fda678-d2a6-4ab1-a8c2-fa57c1b3c3bd"],

Cell[BoxData[
 StyleBox["\<\"40.1 s : 73.7K evals    ( 73.7% )      7.648544753444342    +- \
0.00044         ( 0.006% )     vs target 0.003%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891784592815847`*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"0fb54e6b-cd1f-4681-9b77-88b6230ae2ea"],

Cell[BoxData[
 StyleBox["\<\"45.1 s : 82.8K evals    ( 82.8% )      7.64870221184972     +- \
0.000383        ( 0.005% )     vs target 0.001%    ( 0.2\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178464298465*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"a1bda111-8f2f-4de3-9bc0-8607a02739b2"],

Cell[BoxData[
 StyleBox["\<\"50.1 s : 91.7K evals    ( 91.7% )      7.6485003253577935   +- \
0.000327        ( 0.004% )     vs target 0.004%    ( 0.9\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889178469319812*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"c1deea2a-5725-4ca1-8685-d1ed4eec9eaa"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.648941490995418`", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> {{<|
          "t" -> 0., "I" -> 7.550292721536583, "\[CapitalDelta]" -> 
           2.9300455603838795`, "\[CapitalDelta] [%]" -> 38.807, 
           "\[CapitalDelta]Target [%]" -> 1.288, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.|>, <|
          "t" -> 5., "I" -> 7.645191054645202, "\[CapitalDelta]" -> 
           0.006209825007302222, "\[CapitalDelta] [%]" -> 0.081, 
           "\[CapitalDelta]Target [%]" -> 0.047, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.6000000000000001|>, <|
          "t" -> 10., "I" -> 7.645537855185715, "\[CapitalDelta]" -> 
           0.0030033218529091953`, "\[CapitalDelta] [%]" -> 0.039, 
           "\[CapitalDelta]Target [%]" -> 0.042, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 1.1|>, <|
          "t" -> 15., "I" -> 7.649011891096868, "\[CapitalDelta]" -> 
           0.0016569750808431867`, "\[CapitalDelta] [%]" -> 0.022, 
           "\[CapitalDelta]Target [%]" -> 0.003, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.1|>, <|
          "t" -> 20., "I" -> 7.648824989376196, "\[CapitalDelta]" -> 
           0.0011308371273225806`, "\[CapitalDelta] [%]" -> 0.015, 
           "\[CapitalDelta]Target [%]" -> 0.001, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.|>, <|
          "t" -> 25., "I" -> 7.650243765175305, "\[CapitalDelta]" -> 
           0.0008643999348494966, "\[CapitalDelta] [%]" -> 0.011, 
           "\[CapitalDelta]Target [%]" -> 0.019, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 1.7000000000000002`|>, <|
          "t" -> 30.1, "I" -> 7.648980155997593, "\[CapitalDelta]" -> 
           0.0006720115201001697, "\[CapitalDelta] [%]" -> 
           0.009000000000000001, "\[CapitalDelta]Target [%]" -> 0.003, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.30000000000000004`|>, <|
          "t" -> 35.1, "I" -> 7.648471961582015, "\[CapitalDelta]" -> 
           0.0005325867836265259, "\[CapitalDelta] [%]" -> 0.007, 
           "\[CapitalDelta]Target [%]" -> 0.004, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.6000000000000001|>, <|
          "t" -> 40.1, "I" -> 7.648544753444342, "\[CapitalDelta]" -> 
           0.0004406532443852754, "\[CapitalDelta] [%]" -> 0.006, 
           "\[CapitalDelta]Target [%]" -> 0.003, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 45.1, "I" -> 7.64870221184972, "\[CapitalDelta]" -> 
           0.0003839710994466895, "\[CapitalDelta] [%]" -> 0.005, 
           "\[CapitalDelta]Target [%]" -> 0.001, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.2|>, <|
          "t" -> 50.1, "I" -> 7.6485003253577935`, "\[CapitalDelta]" -> 
           0.00032755181365807807`, "\[CapitalDelta] [%]" -> 0.004, 
           "\[CapitalDelta]Target [%]" -> 0.004, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.9|>}}, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 11, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 11], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 11, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 11], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
       1, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["t", 
                    Style[
                    "t", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "t"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "t"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["I", 
                    Style[
                    "I", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "I"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "I"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]", 
                    Style[
                    "\[CapitalDelta]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta] [%]", 
                    Style[
                    "\[CapitalDelta] [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta] [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta] [%]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [%]", 
                    Style[
                    "\[CapitalDelta]Target [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [%]"}, "ColumnHeader", 
                  True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [\[Sigma]]", 
                    Style[
                    "\[CapitalDelta]Target [\[Sigma]]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 
                  "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.55029"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.93005"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["38.807"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.288"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["5.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64519"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00620983"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.081"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.047"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["10.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64554"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00300332"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.039"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.042"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["15.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64901"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00165698"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.022"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.003"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["20.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64882"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.00113084"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.015"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.001"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["25.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65024"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0008644"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.011"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.019"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["30.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64898"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000672012"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.009"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.003"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["35.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64847"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000532587"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.007"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.004"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["40.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64854"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000440653"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.006"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.003"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["45.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.6487"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000383971"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.005"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.001"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["50.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.6485"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.000327552"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.004"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.004"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{440., {168.634033203125, 174.365966796875}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{440., {168.634033203125, 174.365966796875}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.889175849449766*^9, 3.889176461859209*^9, 
  3.889177363790144*^9, 3.889177729387424*^9, 3.889178364800787*^9, 
  3.889178473888896*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"1a467c27-c24e-45de-850e-d79b3fc0654c"]
}, Open  ]],

Cell["\<\
It works! It\[CloseCurlyQuote]s less efficient because GlobalAdaptive is \
smart(-er than me?) but if we were to compare with a native Monte-Carlo which \
we can use as a proxy for a variance estimator (ill-defined in the first case \
below of course), we get:\
\>", "Text",
 CellChangeTimes->{{3.889175856720202*^9, 3.889175899815484*^9}, {
  3.8891760924025593`*^9, 
  3.889176101937201*^9}},ExpressionUUID->"d371b24f-0894-46e7-8978-\
e718c129bb4b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MonitoredNIntegrate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NInt", "[", 
      RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
       RowBox[{"\[Sigma]", "->", "Null"}], ",", 
       RowBox[{"sampleID", "->", "1"}], ",", 
       RowBox[{"sectorID", "->", "Null"}], ",", 
       RowBox[{"useIntegrand", "->", "True"}]}], "]"}], "\[IndentingNewLine]",
      ",", 
     RowBox[{"{", 
      RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], "\[IndentingNewLine]", ",", 
     
     RowBox[{"Method", "\[Rule]", "\"\<MonteCarlo\>\""}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"MaxPoints", "->", 
      SuperscriptBox["10", "5"]}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TargetRes", "->", 
    RowBox[{
    "benchmarkRes", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
   ",", 
   RowBox[{"StackPrints", "->", "True"}], ",", 
   RowBox[{"MonitorInterval", "->", "5."}], ",", 
   RowBox[{"Silence", "->", "True"}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{{3.8891759221305103`*^9, 3.889175936105337*^9}, {
   3.8891760615915127`*^9, 3.889176062073379*^9}, 3.889176517053871*^9, 
   3.889177664124259*^9, 3.889178376521241*^9},
 CellLabel->"In[69]:=",ExpressionUUID->"0413257b-6381-405b-8874-3933ad5550f7"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"0.   s : 0.1K evals     ( 0.1% )       9.807503673902678    +- \
1.82            ( 18.623% )    vs target 28.223%   ( 1.2\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891760624345493`*^9, 3.889177364081976*^9, 
  3.88917847410071*^9},
 CellLabel->
  "During evaluation of \
In[69]:=",ExpressionUUID->"d2eb2828-278d-4f88-a1c8-c69f04fa4f88"],

Cell[BoxData[
 StyleBox["\<\"5.   s : 23.K evals     ( 23.% )       7.650608570911189    +- \
0.17            ( 2.223% )     vs target 0.024%    ( 0.\[Sigma] )  \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891760624345493`*^9, 3.889177364081976*^9, 
  3.88917847910448*^9},
 CellLabel->
  "During evaluation of \
In[69]:=",ExpressionUUID->"7bf0c619-e771-4fe0-b6ae-8f6986eec5b9"],

Cell[BoxData[
 StyleBox["\<\"10.  s : 46.K evals     ( 46.% )       7.840445634393728    +- \
0.258           ( 3.296% )     vs target 2.506%    ( 0.7\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891760624345493`*^9, 3.889177364081976*^9, 
  3.889178484117526*^9},
 CellLabel->
  "During evaluation of \
In[69]:=",ExpressionUUID->"f48bb6b8-c884-4edd-860c-755d08df5bc0"],

Cell[BoxData[
 StyleBox["\<\"15.1 s : 68.8K evals    ( 68.8% )      7.8079440774573055   +- \
0.18            ( 2.308% )     vs target 2.081%    ( 0.9\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891760624345493`*^9, 3.889177364081976*^9, 
  3.889178489134371*^9},
 CellLabel->
  "During evaluation of \
In[69]:=",ExpressionUUID->"9bd9d2cf-fff8-4989-b63e-f20d83acbe29"],

Cell[BoxData[
 StyleBox["\<\"20.1 s : 91.6K evals    ( 91.6% )      7.784672306949239    +- \
0.146           ( 1.883% )     vs target 1.777%    ( 0.9\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891760624345493`*^9, 3.889177364081976*^9, 
  3.8891784941535587`*^9},
 CellLabel->
  "During evaluation of \
In[69]:=",ExpressionUUID->"0eb61b0f-9b11-46a5-88ea-9321c153ba1f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.768062330477304`", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> {{<|
          "t" -> 0., "I" -> 9.807503673902678, "\[CapitalDelta]" -> 
           1.826419390945969, "\[CapitalDelta] [%]" -> 18.623, 
           "\[CapitalDelta]Target [%]" -> 28.223, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 1.2000000000000002`|>, <|
          "t" -> 5., "I" -> 7.650608570911189, "\[CapitalDelta]" -> 
           0.17006631912929127`, "\[CapitalDelta] [%]" -> 2.223, 
           "\[CapitalDelta]Target [%]" -> 0.024, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.|>, <|
          "t" -> 10., "I" -> 7.840445634393728, "\[CapitalDelta]" -> 
           0.2584558367831942, "\[CapitalDelta] [%]" -> 3.2960000000000003`, 
           "\[CapitalDelta]Target [%]" -> 2.5060000000000002`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.7000000000000001|>, <|
          "t" -> 15.100000000000001`, "I" -> 7.8079440774573055`, 
           "\[CapitalDelta]" -> 0.18022622911419334`, "\[CapitalDelta] [%]" -> 
           2.308, "\[CapitalDelta]Target [%]" -> 2.081, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.9|>, <|
          "t" -> 20.1, "I" -> 7.784672306949239, "\[CapitalDelta]" -> 
           0.1466133329159908, "\[CapitalDelta] [%]" -> 1.883, 
           "\[CapitalDelta]Target [%]" -> 1.7770000000000001`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.9|>}}, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 5, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 5], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 5, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 5], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
       1, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["t", 
                    Style[
                    "t", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "t"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "t"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["I", 
                    Style[
                    "I", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "I"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "I"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]", 
                    Style[
                    "\[CapitalDelta]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta] [%]", 
                    Style[
                    "\[CapitalDelta] [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta] [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta] [%]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [%]", 
                    Style[
                    "\[CapitalDelta]Target [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [%]"}, "ColumnHeader", 
                  True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [\[Sigma]]", 
                    Style[
                    "\[CapitalDelta]Target [\[Sigma]]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 
                  "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["9.8075"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.82642"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["18.623"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["28.223"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["5.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65061"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.170066"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.223"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.024"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["10.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.84045"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.258456"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["3.296"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.506"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["15.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.80794"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.180226"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.308"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.081"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["20.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.78467"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.146613"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.883"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.777"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    With[{
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{427., {87.634033203125, 93.365966796875}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{427., {87.634033203125, 93.365966796875}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.889175968939588*^9, 3.889176081966818*^9, 
  3.88917739281676*^9, 3.889178496075757*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"075e2877-9580-4c79-9794-01052e129304"]
}, Open  ]],

Cell["vs", "Text",
 CellChangeTimes->{{3.889175939544195*^9, 
  3.8891759400790167`*^9}},ExpressionUUID->"f6b2da5c-511b-44b4-a259-\
1a0db16c500d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MonitoredNIntegrate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "1"}], ",", 
        RowBox[{"sectorID", "->", "1"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}]}], "]"}], 
      "\[IndentingNewLine]", "+", 
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "2"}], ",", 
        RowBox[{"sectorID", "->", "2"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}]}], "]"}], 
      "\[IndentingNewLine]", "+", 
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "3"}], ",", 
        RowBox[{"sectorID", "->", "3"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}]}], "]"}]}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], "\[IndentingNewLine]", ",", 
     
     RowBox[{"Method", "\[Rule]", "\"\<MonteCarlo\>\""}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"MaxPoints", "->", 
      SuperscriptBox["10", "5"]}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TargetRes", "->", 
    RowBox[{
    "benchmarkRes", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
   ",", 
   RowBox[{"StackPrints", "->", "True"}], ",", 
   RowBox[{"MonitorInterval", "->", "5."}], ",", 
   RowBox[{"Silence", "->", "True"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{
  3.889175948465804*^9, {3.889176064298443*^9, 3.8891760646689577`*^9}, 
   3.889176519530555*^9, 3.889177677708598*^9, 3.889178380445074*^9},
 CellLabel->"In[70]:=",ExpressionUUID->"4ac2fa72-c2a2-4704-b2a4-27a23d02b87e"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"0.1  s : 0.1K evals     ( 0.1% )       7.441914828173342    +- \
0.407           ( 5.472% )     vs target 2.705%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178496303141*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"9250133d-570b-4aae-befa-8ed2e8d220d6"],

Cell[BoxData[
 StyleBox["\<\"5.1  s : 8.6K evals     ( 8.6% )       7.6271409531308      +- \
0.0447          ( 0.587% )     vs target 0.283%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.88917850132091*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"e93f0d69-48d5-4f7d-aef3-76fd81526428"],

Cell[BoxData[
 StyleBox["\<\"10.1 s : 16.9K evals    ( 16.9% )      7.6325804556679415   +- \
0.0319          ( 0.418% )     vs target 0.212%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178506364271*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"111ceff5-5e67-439c-bf5d-8766f7db6bf1"],

Cell[BoxData[
 StyleBox["\<\"15.1 s : 24.9K evals    ( 24.9% )      7.6167984231759025   +- \
0.0262          ( 0.345% )     vs target 0.418%    ( 1.2\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178511379566*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"43d0b132-0b1d-4113-acae-07f4809bcf54"],

Cell[BoxData[
 StyleBox["\<\"20.1 s : 32.9K evals    ( 32.9% )      7.6221352032512195   +- \
0.0229          ( 0.301% )     vs target 0.348%    ( 1.2\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178516380691*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"1e4d066f-c7b6-47a0-bcee-ab5af7494fcc"],

Cell[BoxData[
 StyleBox["\<\"25.2 s : 40.9K evals    ( 40.9% )      7.640563536083157    +- \
0.0206          ( 0.27% )      vs target 0.107%    ( 0.4\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178521407564*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"0428b07f-8615-4e23-99aa-b953b677848d"],

Cell[BoxData[
 StyleBox["\<\"30.2 s : 48.9K evals    ( 48.9% )      7.6520286591897175   +- \
0.0188          ( 0.246% )     vs target 0.042%    ( 0.2\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178526427815*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"7c2d44d3-2dab-4286-957d-6259c5ada69b"],

Cell[BoxData[
 StyleBox["\<\"35.2 s : 56.9K evals    ( 56.9% )      7.657136786680442    +- \
0.0174          ( 0.228% )     vs target 0.109%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.8891785314429073`*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"21105409-7c28-4237-a98b-e8ec0e5e30c6"],

Cell[BoxData[
 StyleBox["\<\"40.3 s : 65.K evals     ( 65.% )       7.650814186376532    +- \
0.0163          ( 0.214% )     vs target 0.027%    ( 0.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.8891785364935627`*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"9635c8af-1f09-4fad-adc9-fd6920032c03"],

Cell[BoxData[
 StyleBox["\<\"45.3 s : 73.K evals     ( 73.% )       7.647675944193176    +- \
0.0154          ( 0.202% )     vs target 0.015%    ( 0.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178541509749*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"3405e6b8-f1c7-4db5-9680-1bc89b4bd2c4"],

Cell[BoxData[
 StyleBox["\<\"50.3 s : 81.K evals     ( 81.% )       7.642509164446574    +- \
0.0146          ( 0.191% )     vs target 0.082%    ( 0.4\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.8891785465131187`*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"79ead805-7f28-444e-9748-1e4999566e96"],

Cell[BoxData[
 StyleBox["\<\"55.3 s : 89.K evals     ( 89.% )       7.651330754743822    +- \
0.0139          ( 0.183% )     vs target 0.033%    ( 0.2\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178551531814*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"ebb6c24b-1033-4eea-8862-bc48a216ef48"],

Cell[BoxData[
 StyleBox["\<\"60.4 s : 97.1K evals    ( 97.1% )      7.655767239135792    +- \
0.0133          ( 0.175% )     vs target 0.091%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.889176082187104*^9, 3.889177393079728*^9, 
  3.889178316381568*^9, 3.889178556586688*^9},
 CellLabel->
  "During evaluation of \
In[70]:=",ExpressionUUID->"42bb0400-7426-40e2-82f9-38cb625f40a3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.6557839681305495`", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> {{<|
          "t" -> 0.1, "I" -> 7.441914828173342, "\[CapitalDelta]" -> 
           0.4071991838486323, "\[CapitalDelta] [%]" -> 5.472, 
           "\[CapitalDelta]Target [%]" -> 2.705, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 5.1000000000000005`, "I" -> 7.6271409531308, 
           "\[CapitalDelta]" -> 0.044799372482972895`, "\[CapitalDelta] [%]" -> 
           0.587, "\[CapitalDelta]Target [%]" -> 0.28300000000000003`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 10.100000000000001`, "I" -> 7.6325804556679415`, 
           "\[CapitalDelta]" -> 0.031929599130934454`, "\[CapitalDelta] [%]" -> 
           0.418, "\[CapitalDelta]Target [%]" -> 0.212, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 15.100000000000001`, "I" -> 7.6167984231759025`, 
           "\[CapitalDelta]" -> 0.026266667781129117`, "\[CapitalDelta] [%]" -> 
           0.34500000000000003`, "\[CapitalDelta]Target [%]" -> 0.418, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 1.2000000000000002`|>, <|
          "t" -> 20.1, "I" -> 7.6221352032512195`, "\[CapitalDelta]" -> 
           0.02292303107934048, "\[CapitalDelta] [%]" -> 0.301, 
           "\[CapitalDelta]Target [%]" -> 0.34800000000000003`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 1.2000000000000002`|>, <|
          "t" -> 25.200000000000003`, "I" -> 7.640563536083157, 
           "\[CapitalDelta]" -> 0.020630128130626164`, "\[CapitalDelta] [%]" -> 
           0.27, "\[CapitalDelta]Target [%]" -> 0.107, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.4|>, <|
          "t" -> 30.200000000000003`, "I" -> 7.6520286591897175`, 
           "\[CapitalDelta]" -> 0.018856254946259608`, "\[CapitalDelta] [%]" -> 
           0.246, "\[CapitalDelta]Target [%]" -> 0.042, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.2|>, <|
          "t" -> 35.2, "I" -> 7.657136786680442, "\[CapitalDelta]" -> 
           0.01746910131675842, "\[CapitalDelta] [%]" -> 0.228, 
           "\[CapitalDelta]Target [%]" -> 0.109, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 40.300000000000004`, "I" -> 7.650814186376532, 
           "\[CapitalDelta]" -> 0.01634309817982981, "\[CapitalDelta] [%]" -> 
           0.214, "\[CapitalDelta]Target [%]" -> 0.027, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.1|>, <|
          "t" -> 45.300000000000004`, "I" -> 7.647675944193176, 
           "\[CapitalDelta]" -> 0.01543179890666495, "\[CapitalDelta] [%]" -> 
           0.202, "\[CapitalDelta]Target [%]" -> 0.015, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.1|>, <|
          "t" -> 50.300000000000004`, "I" -> 7.642509164446574, 
           "\[CapitalDelta]" -> 0.014624872306057904`, "\[CapitalDelta] [%]" -> 
           0.191, "\[CapitalDelta]Target [%]" -> 0.082, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.4|>, <|
          "t" -> 55.300000000000004`, "I" -> 7.651330754743822, 
           "\[CapitalDelta]" -> 0.013968361491817329`, "\[CapitalDelta] [%]" -> 
           0.183, "\[CapitalDelta]Target [%]" -> 0.033, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.2|>, <|
          "t" -> 60.400000000000006`, "I" -> 7.655767239135792, 
           "\[CapitalDelta]" -> 0.013375793404120718`, "\[CapitalDelta] [%]" -> 
           0.17500000000000002`, "\[CapitalDelta]Target [%]" -> 0.091, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>}}, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 13, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 13], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 13, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 13], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
       1, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["t", 
                    Style[
                    "t", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "t"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "t"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["I", 
                    Style[
                    "I", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "I"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "I"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]", 
                    Style[
                    "\[CapitalDelta]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta] [%]", 
                    Style[
                    "\[CapitalDelta] [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta] [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta] [%]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [%]", 
                    Style[
                    "\[CapitalDelta]Target [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [%]"}, "ColumnHeader", 
                  True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [\[Sigma]]", 
                    Style[
                    "\[CapitalDelta]Target [\[Sigma]]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 
                  "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.44191"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.407199"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["5.472"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.705"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["5.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.62714"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0447994"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.587"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.283"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["10.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.63258"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0319296"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.418"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.212"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["15.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.6168"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0262667"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.345"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.418"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["20.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.62214"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.022923"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.301"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.348"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["25.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64056"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0206301"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.27"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.107"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["30.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65203"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0188563"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.246"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.042"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["35.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65714"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0174691"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.228"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.109"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["40.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65081"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0163431"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.214"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.027"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["45.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64768"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0154318"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.202"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.015"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["50.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64251"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0146249"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.191"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.082"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["55.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65133"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0139684"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.183"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.033"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["60.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65577"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0133758"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.175"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.091"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{427., {195.634033203125, 201.365966796875}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{427., {195.634033203125, 201.365966796875}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.88917602100333*^9, 3.889176135565626*^9, 
  3.889177433407535*^9, 3.8891783295338306`*^9, 3.8891785585614433`*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"e002e3c9-b209-40dd-b5d0-19e5373e497a"]
}, Open  ]],

Cell["\<\
Demonstrating that the bounded integrand has of course smaller variance.\
\>", "Text",
 CellChangeTimes->{{3.889176075391568*^9, 
  3.8891761132297707`*^9}},ExpressionUUID->"7d563fda-bfa0-4d76-abc1-\
9f5c6439dace"],

Cell["\<\
We can also compare the variance to the multi-channeling approach\
\>", "Text",
 CellChangeTimes->{{3.88917768411375*^9, 
  3.8891776957777433`*^9}},ExpressionUUID->"019c2736-577f-41de-93ea-\
bf0330f13833"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MonitoredNIntegrate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "1"}], ",", 
        RowBox[{"sectorID", "->", "Null"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}], ",", 
        RowBox[{"IncludeMCFactor", "->", "True"}]}], "]"}], 
      "\[IndentingNewLine]", "+", 
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "2"}], ",", 
        RowBox[{"sectorID", "->", "Null"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}], ",", 
        RowBox[{"IncludeMCFactor", "->", "True"}]}], "]"}], 
      "\[IndentingNewLine]", "+", 
      RowBox[{"NInt", "[", 
       RowBox[{"rx1", ",", "rx2", ",", "singuarities", ",", 
        RowBox[{"\[Sigma]", "->", "Null"}], ",", 
        RowBox[{"sampleID", "->", "3"}], ",", 
        RowBox[{"sectorID", "->", "Null"}], ",", 
        RowBox[{"useIntegrand", "->", "True"}], ",", 
        RowBox[{"IncludeMCFactor", "->", "True"}]}], "]"}]}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"rx1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rx2", ",", "0", ",", "1"}], "}"}], "\[IndentingNewLine]", ",", 
     
     RowBox[{"Method", "\[Rule]", "\"\<MonteCarlo\>\""}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "15"}], ",", 
     RowBox[{"MaxPoints", "->", 
      SuperscriptBox["10", "5"]}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "20"}]}], "\[IndentingNewLine]", 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TargetRes", "->", 
    RowBox[{
    "benchmarkRes", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
   ",", 
   RowBox[{"StackPrints", "->", "True"}], ",", 
   RowBox[{"MonitorInterval", "->", "5."}], ",", 
   RowBox[{"Silence", "->", "True"}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{
  3.889175948465804*^9, {3.889176064298443*^9, 3.8891760646689577`*^9}, 
   3.889176519530555*^9, {3.889177677708598*^9, 3.889177792301407*^9}, {
   3.889177837099925*^9, 3.8891778925305634`*^9}, {3.889177931737896*^9, 
   3.889177966498622*^9}, 3.889178383551025*^9},
 CellLabel->"In[82]:=",ExpressionUUID->"cf33db74-d2da-4e9f-832c-b9e169010269"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"0.1  s : 0.1K evals     ( 0.1% )       7.802249536130003    +- \
0.332           ( 4.263% )     vs target 2.006%    ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.8891788045484667`*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"d3183f51-fbd7-4a50-8181-d9dcb808f787"],

Cell[BoxData[
 StyleBox["\<\"5.1  s : 8.2K evals     ( 8.2% )       7.622555640855977    +- \
0.0351          ( 0.462% )     vs target 0.343%    ( 0.7\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.8891788095685587`*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"64192985-c530-437e-87f6-b4b9426d1284"],

Cell[BoxData[
 StyleBox["\<\"10.2 s : 16.3K evals    ( 16.3% )      7.645654643985948    +- \
0.0254          ( 0.333% )     vs target 0.041%    ( 0.1\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.889178814609755*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"f738027a-36e3-4b26-b8c3-ee5b17c19b57"],

Cell[BoxData[
 StyleBox["\<\"15.2 s : 23.6K evals    ( 23.6% )      7.648986606355411    +- \
0.0212          ( 0.278% )     vs target 0.003%    ( 0.\[Sigma] )  \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.8891788196575108`*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"70b97c3a-1513-4326-82a4-cf2401eee512"],

Cell[BoxData[
 StyleBox["\<\"20.3 s : 30.8K evals    ( 30.8% )      7.664976444610419    +- \
0.0188          ( 0.245% )     vs target 0.212%    ( 0.9\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.889178824721964*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"5fabfaa7-b60e-4db8-b42d-5a372a929eb3"],

Cell[BoxData[
 StyleBox["\<\"25.3 s : 38.K evals     ( 38.% )       7.658202467400942    +- \
0.0168          ( 0.22% )      vs target 0.123%    ( 0.6\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.889178829751767*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"1d282af9-93a0-4cc4-9f78-897d91801903"],

Cell[BoxData[
 StyleBox["\<\"30.4 s : 45.2K evals    ( 45.2% )      7.656419229292397    +- \
0.0154          ( 0.202% )     vs target 0.1%      ( 0.5\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.8891788347871647`*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"6074c23c-5d5d-41ea-b3ee-bbd285b73ebc"],

Cell[BoxData[
 StyleBox["\<\"35.4 s : 52.4K evals    ( 52.4% )      7.6583989431992405   +- \
0.0143          ( 0.187% )     vs target 0.126%    ( 0.7\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.889178839807119*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"67a2bfd8-3841-410f-8081-7a047b9b9373"],

Cell[BoxData[
 StyleBox["\<\"40.4 s : 59.6K evals    ( 59.6% )      7.660174489749341    +- \
0.0134          ( 0.176% )     vs target 0.149%    ( 0.8\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.889178844841819*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"c7bd69cc-9499-44f7-aeb0-cf68ed3a2db0"],

Cell[BoxData[
 StyleBox["\<\"45.4 s : 66.5K evals    ( 66.5% )      7.65897850049598     +- \
0.0127          ( 0.166% )     vs target 0.133%    ( 0.8\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.889178849913074*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"2a49ee28-821d-4291-bf0f-12a452226907"],

Cell[BoxData[
 StyleBox["\<\"50.5 s : 73.3K evals    ( 73.3% )      7.660061025881615    +- \
0.0121          ( 0.158% )     vs target 0.147%    ( 0.9\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.889178854923724*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"111e4e41-0945-4c43-a512-6f5b7ddfa974"],

Cell[BoxData[
 StyleBox["\<\"55.5 s : 80.1K evals    ( 80.1% )      7.657904458908391    +- \
0.0115          ( 0.151% )     vs target 0.119%    ( 0.8\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.8891788599416113`*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"c7f5791a-b7ac-464a-aa8d-90db8e8cffab"],

Cell[BoxData[
 StyleBox["\<\"60.6 s : 87.K evals     ( 87.% )       7.658773387570979    +- \
0.0111          ( 0.145% )     vs target 0.131%    ( 0.9\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.8891788650165854`*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"d0270124-c986-481f-a5cd-0682ecc6294c"],

Cell[BoxData[
 StyleBox["\<\"65.6 s : 93.6K evals    ( 93.6% )      7.657283738043806    +- \
0.0107          ( 0.14% )      vs target 0.111%    ( 0.8\[Sigma] ) \"\>",
  StripOnInput->False,
  FontFamily->"Monaco"]], "Print",
 CellChangeTimes->{3.8891782578878393`*^9, 3.889178558848769*^9, 
  3.88917887006369*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"c7d19296-2f65-42c6-b9fc-a3b71a75a497"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.658492240831148`", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> {{<|
          "t" -> 0.1, "I" -> 7.802249536130003, "\[CapitalDelta]" -> 
           0.33261677328838635`, "\[CapitalDelta] [%]" -> 4.263, 
           "\[CapitalDelta]Target [%]" -> 2.0060000000000002`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 5.1000000000000005`, "I" -> 7.622555640855977, 
           "\[CapitalDelta]" -> 0.03518441108450062, "\[CapitalDelta] [%]" -> 
           0.462, "\[CapitalDelta]Target [%]" -> 0.343, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.7000000000000001|>, <|
          "t" -> 10.200000000000001`, "I" -> 7.645654643985948, 
           "\[CapitalDelta]" -> 0.025454739707031923`, "\[CapitalDelta] [%]" -> 
           0.333, "\[CapitalDelta]Target [%]" -> 0.041, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.1|>, <|
          "t" -> 15.200000000000001`, "I" -> 7.648986606355411, 
           "\[CapitalDelta]" -> 0.021291020825302313`, "\[CapitalDelta] [%]" -> 
           0.278, "\[CapitalDelta]Target [%]" -> 0.003, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.|>, <|
          "t" -> 20.3, "I" -> 7.664976444610419, "\[CapitalDelta]" -> 
           0.018809917586445506`, "\[CapitalDelta] [%]" -> 0.245, 
           "\[CapitalDelta]Target [%]" -> 0.212, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.9|>, <|
          "t" -> 25.3, "I" -> 7.658202467400942, "\[CapitalDelta]" -> 
           0.0168477113539803, "\[CapitalDelta] [%]" -> 0.22, 
           "\[CapitalDelta]Target [%]" -> 0.123, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.6000000000000001|>, <|
          "t" -> 30.400000000000002`, "I" -> 7.656419229292397, 
           "\[CapitalDelta]" -> 0.015458621220213943`, "\[CapitalDelta] [%]" -> 
           0.202, "\[CapitalDelta]Target [%]" -> 0.1, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.5|>, <|
          "t" -> 35.4, "I" -> 7.6583989431992405`, "\[CapitalDelta]" -> 
           0.014317338423685563`, "\[CapitalDelta] [%]" -> 0.187, 
           "\[CapitalDelta]Target [%]" -> 0.126, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.7000000000000001|>, <|
          "t" -> 40.400000000000006`, "I" -> 7.660174489749341, 
           "\[CapitalDelta]" -> 0.013445483948963551`, "\[CapitalDelta] [%]" -> 
           0.176, "\[CapitalDelta]Target [%]" -> 0.149, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.8|>, <|
          "t" -> 45.400000000000006`, "I" -> 7.65897850049598, 
           "\[CapitalDelta]" -> 0.012707151531867814`, "\[CapitalDelta] [%]" -> 
           0.166, "\[CapitalDelta]Target [%]" -> 0.133, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.8|>, <|
          "t" -> 50.5, "I" -> 7.660061025881615, "\[CapitalDelta]" -> 
           0.012120853254463455`, "\[CapitalDelta] [%]" -> 0.158, 
           "\[CapitalDelta]Target [%]" -> 0.147, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.9|>, <|
          "t" -> 55.5, "I" -> 7.657904458908391, "\[CapitalDelta]" -> 
           0.01158923349665386, "\[CapitalDelta] [%]" -> 0.151, 
           "\[CapitalDelta]Target [%]" -> 0.11900000000000001`, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.8|>, <|
          "t" -> 60.6, "I" -> 7.658773387570979, "\[CapitalDelta]" -> 
           0.011121587265769613`, "\[CapitalDelta] [%]" -> 0.145, 
           "\[CapitalDelta]Target [%]" -> 0.131, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.9|>, <|
          "t" -> 65.60000000000001, "I" -> 7.657283738043806, 
           "\[CapitalDelta]" -> 0.010706461088982175`, "\[CapitalDelta] [%]" -> 
           0.14, "\[CapitalDelta]Target [%]" -> 0.111, 
           "\[CapitalDelta]Target [\[Sigma]]" -> 0.8|>}}, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 14, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 14], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, All, "t"} -> 
          1, {All, All, "I"} -> 1, {All, All, "\[CapitalDelta]"} -> 
          1, {All, All, "\[CapitalDelta] [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [%]"} -> 
          1, {All, All, "\[CapitalDelta]Target [\[Sigma]]"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "t" -> TypeSystem`PackageScope`AtomShape[60], "I" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta]" -> 
                TypeSystem`PackageScope`AtomShape[60], "\[CapitalDelta] [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [%]" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalDelta]Target [\[Sigma]]" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All, All}]], 14, 
            DirectedInfinity[1], {All}]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "t", "I", "\[CapitalDelta]", "\[CapitalDelta] [%]", 
            "\[CapitalDelta]Target [%]", "\[CapitalDelta]Target [\[Sigma]]"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real]}], 14], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
       1, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["t", 
                    Style[
                    "t", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "t"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "t"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["I", 
                    Style[
                    "I", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "I"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "I"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]", 
                    Style[
                    "\[CapitalDelta]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta] [%]", 
                    Style[
                    "\[CapitalDelta] [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta] [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta] [%]"}, "ColumnHeader", True], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [%]", 
                    Style[
                    "\[CapitalDelta]Target [%]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [%]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [%]"}, "ColumnHeader", 
                  True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[CapitalDelta]Target [\[Sigma]]", 
                    Style[
                    "\[CapitalDelta]Target [\[Sigma]]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, All, "\[CapitalDelta]Target [\[Sigma]]"}, 
                  "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.80225"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.332617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["4.263"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2.006"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["5.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.62256"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0351844"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.462"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.343"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["10.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64565"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0254547"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.333"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.041"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["15.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.64899"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.021291"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.278"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.003"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["20.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.66498"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0188099"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.245"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.212"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["25.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.6582"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0168477"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.22"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.123"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["30.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65642"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0154586"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.202"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["35.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.6584"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0143173"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.187"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.126"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["40.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.66017"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0134455"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.176"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.149"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["45.4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65898"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0127072"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.166"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.133"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["50.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.66006"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0121209"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.158"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.147"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 11, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["55.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.6579"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0115892"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.151"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.119"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 12, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["60.6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65877"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0111216"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.145"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.131"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 13, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["65.6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 14, 
                   Key["t"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["7.65728"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 14, 
                   Key["I"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.0107065"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 14, 
                   Key["\[CapitalDelta]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.14"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 14, 
                   Key["\[CapitalDelta] [%]"]}, "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.111"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 14, 
                   Key["\[CapitalDelta]Target [%]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0.8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 14, 
                   Key["\[CapitalDelta]Target [\[Sigma]]"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{427., {209.134033203125, 214.865966796875}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{427., {209.134033203125, 214.865966796875}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.889178303154201*^9, 3.8891786421503077`*^9, 
  3.889178875097245*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"b9c558f1-2f3c-439c-863e-20252401752b"]
}, Open  ]],

Cell["\<\
Seems slightly (and continuous at least) in this case, but of course it\
\[CloseCurlyQuote]s not representative of the most complicated cases we\
\[CloseCurlyQuote]ll have to deal with.\
\>", "Text",
 CellChangeTimes->{{3.8891786559935503`*^9, 3.8891786719831057`*^9}, {
  3.8891789118570137`*^9, 
  3.889178949571393*^9}},ExpressionUUID->"b8daf635-2267-42e8-825c-\
ddd9aaea332a"]
}, Closed]],

Cell["\<\
TODO: Improve on the sectoring idea by picking points and sectors by \
\[OpenCurlyDoubleQuote]throwing darts\[CloseCurlyDoubleQuote]\
\>", "Section",
 CellChangeTimes->{{3.889169560598584*^9, 3.889169590999608*^9}, {
  3.889169941568424*^9, 3.8891699423513603`*^9}, {3.889178964746222*^9, 
  3.8891789927691517`*^9}},ExpressionUUID->"08ff3b4b-5d50-4c64-bd86-\
a13488ec023b"]
}, Open  ]]
},
WindowSize->{1739, 1085},
WindowMargins->{{103, Automatic}, {35, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"09956b86-e55a-42b9-83f9-7cb5f34eb665"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 204, 3, 98, "Title",ExpressionUUID->"29a280fe-2d08-499d-b4ab-7186b34f4522"],
Cell[CellGroupData[{
Cell[809, 29, 154, 3, 67, "Section",ExpressionUUID->"253326fb-d795-4d3b-9176-bbcf67713fc9"],
Cell[966, 34, 153, 3, 35, "Text",ExpressionUUID->"7f977e97-bcde-4d03-bd80-a107c004d8df"],
Cell[1122, 39, 510, 11, 48, "Input",ExpressionUUID->"b1ff0bdb-7eae-4493-b590-c66e631d7324"],
Cell[1635, 52, 444, 10, 52, "Input",ExpressionUUID->"f432aad6-f3df-45e7-927e-58edb89e7033"],
Cell[2082, 64, 1001, 26, 30, "Input",ExpressionUUID->"5bcc892c-5d4a-4c9f-8bcb-6572380038dc"],
Cell[3086, 92, 434, 8, 30, "Input",ExpressionUUID->"bf4f705e-de8e-42f3-b87f-b0fd619fdd2f"],
Cell[3523, 102, 1461, 41, 48, "Input",ExpressionUUID->"48c23d42-6ea5-40f5-975a-5bf95a30b9e1"],
Cell[4987, 145, 155, 3, 35, "Text",ExpressionUUID->"912c3033-d0f2-4bd5-9cbe-3ae931178f56"],
Cell[5145, 150, 1267, 34, 54, "Input",ExpressionUUID->"f6c5522f-3a5b-496d-8298-0acc26b5fbd7"],
Cell[6415, 186, 173, 3, 35, "Text",ExpressionUUID->"7f941117-98bb-4812-9aa7-cfd1339eca5c"],
Cell[6591, 191, 1156, 36, 94, "Input",ExpressionUUID->"cbb1da12-1b0e-41fb-973d-44e91de8c297"],
Cell[CellGroupData[{
Cell[7772, 231, 243, 4, 54, "Subsection",ExpressionUUID->"cd2140fb-6d57-40fa-9995-022c69e0b4c6"],
Cell[8018, 237, 875, 22, 119, "Input",ExpressionUUID->"77d5a19d-e727-46e8-9bef-2a4c44fe4e82"],
Cell[8896, 261, 337, 9, 30, "Input",ExpressionUUID->"7cc47982-df40-46fe-93bc-51ba74589d86"],
Cell[9236, 272, 16585, 333, 1620, "Input",ExpressionUUID->"7919f062-ab78-4452-9f7b-09c7f60b71d0"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[25870, 611, 154, 3, 53, "Section",ExpressionUUID->"156df554-c41e-4052-8a3b-58330a1eb7fc"],
Cell[26027, 616, 10545, 223, 1065, "Input",ExpressionUUID->"8c7249b6-86b1-4625-a524-60dc23b6a905"]
}, Closed]],
Cell[CellGroupData[{
Cell[36609, 844, 203, 4, 53, "Section",ExpressionUUID->"78d2c17f-ca01-44d2-876c-8bf94ffaf78d"],
Cell[36815, 850, 305, 7, 35, "Text",ExpressionUUID->"e61206d6-bc25-4ad1-ba1c-182d6d59ac8e"],
Cell[CellGroupData[{
Cell[37145, 861, 1262, 29, 136, "Input",ExpressionUUID->"8cdbe3ab-f984-44d6-88a7-20b90c433251"],
Cell[38410, 892, 1472, 38, 57, "Output",ExpressionUUID->"509851d9-78f4-4b21-bf56-8ff2088b1c6f"]
}, Open  ]],
Cell[39897, 933, 291, 7, 35, "Text",ExpressionUUID->"79cd71c1-fe06-4a45-9509-8ffd2dc53656"],
Cell[CellGroupData[{
Cell[40213, 944, 345, 6, 30, "Input",ExpressionUUID->"4181498d-69ed-42bf-b4cf-a99fea56cf08"],
Cell[40561, 952, 657, 15, 60, "Output",ExpressionUUID->"3b2eb2cf-e866-44fa-9015-2f7d4f537d12"]
}, Open  ]],
Cell[41233, 970, 169, 3, 35, "Text",ExpressionUUID->"eaef15c8-799b-49dd-bfb3-4b782d747afc"],
Cell[CellGroupData[{
Cell[41427, 977, 1767, 36, 186, "Input",ExpressionUUID->"cc01f5db-5e84-4db2-a73d-0c01ca11e3dd"],
Cell[CellGroupData[{
Cell[43219, 1017, 660, 13, 23, "Print",ExpressionUUID->"95adde58-ef81-4a92-8090-1094acfb9e14"],
Cell[43882, 1032, 661, 13, 23, "Print",ExpressionUUID->"2de4a624-d8df-4953-a05d-06e4c216590d"]
}, Open  ]],
Cell[44558, 1048, 41522, 744, 119, "Output",ExpressionUUID->"8fe15030-1d66-4c5f-b51e-7cb9df8da18d"]
}, Open  ]],
Cell[86095, 1795, 220, 4, 35, "Text",ExpressionUUID->"cbe231e0-4f15-4a61-ab53-828f7638aa00"],
Cell[CellGroupData[{
Cell[86340, 1803, 2860, 57, 228, "Input",ExpressionUUID->"7f105641-cf26-45b9-99d4-86efb2777af5"],
Cell[CellGroupData[{
Cell[89225, 1864, 1152, 19, 23, "Print",ExpressionUUID->"d26ea824-6de5-4829-9684-ac1c57913c91"],
Cell[90380, 1885, 1152, 19, 23, "Print",ExpressionUUID->"5edbfa9b-9a36-4b19-a5e5-e3c5aaeded48"],
Cell[91535, 1906, 1150, 19, 23, "Print",ExpressionUUID->"30d91b3c-355d-4065-95fa-92ccbb615fab"],
Cell[92688, 1927, 1150, 19, 23, "Print",ExpressionUUID->"f9052631-a90e-4be6-9cc9-35a5b038c93c"],
Cell[93841, 1948, 1150, 19, 23, "Print",ExpressionUUID->"948c5ae9-5dd6-46b5-a8c0-5a3fc51e918b"],
Cell[94994, 1969, 1152, 19, 23, "Print",ExpressionUUID->"cf60c1d7-5236-4b29-a55d-ca2f0b574de8"],
Cell[96149, 1990, 1150, 19, 23, "Print",ExpressionUUID->"e23496dd-6282-4b55-9940-8c1a669cf3e6"],
Cell[97302, 2011, 1150, 19, 23, "Print",ExpressionUUID->"4df76733-e9a5-4b3d-ada4-fe0b2f72618a"]
}, Open  ]],
Cell[98467, 2033, 62457, 1161, 281, "Output",ExpressionUUID->"b469589c-31b6-4d1a-b5a1-ea48f104824b"]
}, Open  ]],
Cell[160939, 3197, 395, 8, 58, "Text",ExpressionUUID->"c643a582-41a8-44d4-a113-9709132b8531"],
Cell[CellGroupData[{
Cell[161359, 3209, 536, 13, 30, "Input",ExpressionUUID->"50599283-1a4b-4291-8828-636cb1e4125f"],
Cell[161898, 3224, 117702, 1924, 182, "Output",ExpressionUUID->"cd4d6a2b-12d8-47b0-8617-aea644c15a77"]
}, Open  ]],
Cell[279615, 5151, 292, 7, 35, "Text",ExpressionUUID->"4c9e5e1c-3b96-4a77-a50b-3bcc0c91d33c"],
Cell[CellGroupData[{
Cell[279932, 5162, 780, 18, 30, "Input",ExpressionUUID->"c7237c94-2117-4d46-b5b4-7816ac53a6c3"],
Cell[280715, 5182, 175354, 2892, 246, "Output",ExpressionUUID->"af14b2c4-c4d2-4fc7-b6eb-99107263a6a4"]
}, Open  ]],
Cell[456084, 8077, 335, 7, 35, "Text",ExpressionUUID->"0692318f-a2f6-4234-9340-8c50596e2d03"],
Cell[CellGroupData[{
Cell[456444, 8088, 1662, 37, 136, "Input",ExpressionUUID->"e5df2be4-b8d2-445e-83c1-1d2a197d7f52"],
Cell[458109, 8127, 198626, 3292, 264, "Output",ExpressionUUID->"fb6dc7dc-7137-416c-a6d8-2cda0ccc649a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[656772, 11424, 1769, 40, 115, "Input",ExpressionUUID->"1b9ee777-5f74-4b60-883b-7b8ef1ef2835"],
Cell[658544, 11466, 183033, 3024, 205, "Output",ExpressionUUID->"e015954b-8b68-4d89-80a3-a0f9e1f71894"]
}, Open  ]],
Cell[841592, 14493, 198, 3, 35, "Text",ExpressionUUID->"9b68a792-6870-42ec-b4f2-78921d3d9677"],
Cell[841793, 14498, 253, 6, 35, "Text",ExpressionUUID->"28fff1c2-1643-40a8-9260-e2eba4cd5a57"],
Cell[CellGroupData[{
Cell[842071, 14508, 1018, 22, 94, "Input",ExpressionUUID->"5bbb1456-e9a0-4bf0-a22e-850901555d52"],
Cell[843092, 14532, 132139, 2160, 275, "Output",ExpressionUUID->"1f2e8873-c663-420e-a6b7-1823ee22c130"]
}, Open  ]],
Cell[975246, 16695, 218, 4, 35, "Text",ExpressionUUID->"3c9bab8d-5422-4524-bbcf-9c4ffcb79063"],
Cell[CellGroupData[{
Cell[975489, 16703, 959, 22, 77, "Input",ExpressionUUID->"8e1377be-40b6-4bb3-8154-3960f668e020"],
Cell[976451, 16727, 311, 4, 34, "Output",ExpressionUUID->"c2489075-7a47-4d40-b248-887b39c7f314"]
}, Open  ]],
Cell[976777, 16734, 334, 7, 35, "Text",ExpressionUUID->"49bef12e-ca3a-48e8-84df-9843729be7b5"],
Cell[CellGroupData[{
Cell[977136, 16745, 2302, 42, 186, "Input",ExpressionUUID->"70d9f0ec-f3fd-471a-815b-a4ab3ea64eac"],
Cell[CellGroupData[{
Cell[979463, 16791, 562, 11, 23, "Print",ExpressionUUID->"947d138e-3722-47c1-8c3e-7fabf278224f"],
Cell[980028, 16804, 564, 11, 23, "Print",ExpressionUUID->"d3c4188a-6026-4ddd-9ab9-3fb184b194b1"],
Cell[980595, 16817, 555, 11, 23, "Print",ExpressionUUID->"3be47dbe-17c5-4a7d-9bfa-5f73a68730aa"],
Cell[981153, 16830, 555, 11, 23, "Print",ExpressionUUID->"8e870a5e-538d-4650-b1bc-fa99c8a2285c"],
Cell[981711, 16843, 555, 11, 23, "Print",ExpressionUUID->"34e0a0d9-40ab-4942-bd92-71d72d0c250e"]
}, Open  ]],
Cell[982281, 16857, 51156, 941, 201, "Output",ExpressionUUID->"9e15235c-c9e8-47a4-a59b-4d592a55b2fb"]
}, Open  ]],
Cell[1033452, 17801, 234, 6, 35, "Text",ExpressionUUID->"5b92a064-4d08-4404-9f50-4a7ab91a614a"],
Cell[CellGroupData[{
Cell[1033711, 17811, 2232, 49, 228, "Input",ExpressionUUID->"f9ac35bc-8047-4085-9a86-5f19599fe08c"],
Cell[CellGroupData[{
Cell[1035968, 17864, 371, 8, 23, "Print",ExpressionUUID->"a063e658-934b-46b1-ba95-8e884b9ccdcc"],
Cell[1036342, 17874, 372, 8, 23, "Print",ExpressionUUID->"e4e6872a-d8da-408c-90b9-16b055886f48"],
Cell[1036717, 17884, 372, 8, 23, "Print",ExpressionUUID->"bbcef9a7-517e-4038-8feb-7b5cd9e2f166"],
Cell[1037092, 17894, 372, 8, 23, "Print",ExpressionUUID->"5ce804f3-1767-4e13-b014-d74c41f7ab3c"],
Cell[1037467, 17904, 372, 8, 23, "Print",ExpressionUUID->"5601bf16-d97f-4e03-92d3-247febf61861"],
Cell[1037842, 17914, 372, 8, 23, "Print",ExpressionUUID->"246e1a2e-e2fb-4e87-9458-2171eab83bde"],
Cell[1038217, 17924, 374, 8, 23, "Print",ExpressionUUID->"40475b93-8934-43b0-8e4f-2c57096bcba9"],
Cell[1038594, 17934, 372, 8, 23, "Print",ExpressionUUID->"25fda678-d2a6-4ab1-a8c2-fa57c1b3c3bd"],
Cell[1038969, 17944, 374, 8, 23, "Print",ExpressionUUID->"0fb54e6b-cd1f-4681-9b77-88b6230ae2ea"],
Cell[1039346, 17954, 372, 8, 23, "Print",ExpressionUUID->"a1bda111-8f2f-4de3-9bc0-8607a02739b2"],
Cell[1039721, 17964, 372, 8, 23, "Print",ExpressionUUID->"c1deea2a-5725-4ca1-8685-d1ed4eec9eaa"]
}, Open  ]],
Cell[1040108, 17975, 72223, 1360, 363, "Output",ExpressionUUID->"1a467c27-c24e-45de-850e-d79b3fc0654c"]
}, Open  ]],
Cell[1112346, 19338, 461, 9, 35, "Text",ExpressionUUID->"d371b24f-0894-46e7-8978-e718c129bb4b"],
Cell[CellGroupData[{
Cell[1112832, 19351, 1581, 35, 186, "Input",ExpressionUUID->"0413257b-6381-405b-8874-3933ad5550f7"],
Cell[CellGroupData[{
Cell[1114438, 19390, 420, 9, 23, "Print",ExpressionUUID->"d2eb2828-278d-4f88-a1c8-c69f04fa4f88"],
Cell[1114861, 19401, 420, 9, 23, "Print",ExpressionUUID->"7bf0c619-e771-4fe0-b6ae-8f6986eec5b9"],
Cell[1115284, 19412, 421, 9, 23, "Print",ExpressionUUID->"f48bb6b8-c884-4edd-860c-755d08df5bc0"],
Cell[1115708, 19423, 421, 9, 23, "Print",ExpressionUUID->"9bd9d2cf-fff8-4989-b63e-f20d83acbe29"],
Cell[1116132, 19434, 423, 9, 23, "Print",ExpressionUUID->"0eb61b0f-9b11-46a5-88ea-9321c153ba1f"]
}, Open  ]],
Cell[1116570, 19446, 51051, 939, 201, "Output",ExpressionUUID->"075e2877-9580-4c79-9794-01052e129304"]
}, Open  ]],
Cell[1167636, 20388, 146, 3, 35, "Text",ExpressionUUID->"f6b2da5c-511b-44b4-a259-1a0db16c500d"],
Cell[CellGroupData[{
Cell[1167807, 20395, 2223, 49, 228, "Input",ExpressionUUID->"4ac2fa72-c2a2-4704-b2a4-27a23d02b87e"],
Cell[CellGroupData[{
Cell[1170055, 20448, 441, 9, 23, "Print",ExpressionUUID->"9250133d-570b-4aae-befa-8ed2e8d220d6"],
Cell[1170499, 20459, 440, 9, 23, "Print",ExpressionUUID->"e93f0d69-48d5-4f7d-aef3-76fd81526428"],
Cell[1170942, 20470, 441, 9, 23, "Print",ExpressionUUID->"111ceff5-5e67-439c-bf5d-8766f7db6bf1"],
Cell[1171386, 20481, 441, 9, 23, "Print",ExpressionUUID->"43d0b132-0b1d-4113-acae-07f4809bcf54"],
Cell[1171830, 20492, 441, 9, 23, "Print",ExpressionUUID->"1e4d066f-c7b6-47a0-bcee-ab5af7494fcc"],
Cell[1172274, 20503, 441, 9, 23, "Print",ExpressionUUID->"0428b07f-8615-4e23-99aa-b953b677848d"],
Cell[1172718, 20514, 441, 9, 23, "Print",ExpressionUUID->"7c2d44d3-2dab-4286-957d-6259c5ada69b"],
Cell[1173162, 20525, 443, 9, 23, "Print",ExpressionUUID->"21105409-7c28-4237-a98b-e8ec0e5e30c6"],
Cell[1173608, 20536, 443, 9, 23, "Print",ExpressionUUID->"9635c8af-1f09-4fad-adc9-fd6920032c03"],
Cell[1174054, 20547, 441, 9, 23, "Print",ExpressionUUID->"3405e6b8-f1c7-4db5-9680-1bc89b4bd2c4"],
Cell[1174498, 20558, 443, 9, 23, "Print",ExpressionUUID->"79ead805-7f28-444e-9748-1e4999566e96"],
Cell[1174944, 20569, 441, 9, 23, "Print",ExpressionUUID->"ebb6c24b-1033-4eea-8862-bc48a216ef48"],
Cell[1175388, 20580, 441, 9, 23, "Print",ExpressionUUID->"42bb0400-7426-40e2-82f9-38cb625f40a3"]
}, Open  ]],
Cell[1175844, 20592, 79392, 1499, 417, "Output",ExpressionUUID->"e002e3c9-b209-40dd-b5d0-19e5373e497a"]
}, Open  ]],
Cell[1255251, 22094, 224, 5, 35, "Text",ExpressionUUID->"7d563fda-bfa0-4d76-abc1-9f5c6439dace"],
Cell[1255478, 22101, 216, 5, 35, "Text",ExpressionUUID->"019c2736-577f-41de-93ea-bf0330f13833"],
Cell[CellGroupData[{
Cell[1255719, 22110, 2531, 55, 228, "Input",ExpressionUUID->"cf33db74-d2da-4e9f-832c-b9e169010269"],
Cell[CellGroupData[{
Cell[1258275, 22169, 423, 9, 23, "Print",ExpressionUUID->"d3183f51-fbd7-4a50-8181-d9dcb808f787"],
Cell[1258701, 22180, 423, 9, 23, "Print",ExpressionUUID->"64192985-c530-437e-87f6-b4b9426d1284"],
Cell[1259127, 22191, 421, 9, 23, "Print",ExpressionUUID->"f738027a-36e3-4b26-b8c3-ee5b17c19b57"],
Cell[1259551, 22202, 423, 9, 23, "Print",ExpressionUUID->"70b97c3a-1513-4326-82a4-cf2401eee512"],
Cell[1259977, 22213, 421, 9, 23, "Print",ExpressionUUID->"5fabfaa7-b60e-4db8-b42d-5a372a929eb3"],
Cell[1260401, 22224, 421, 9, 23, "Print",ExpressionUUID->"1d282af9-93a0-4cc4-9f78-897d91801903"],
Cell[1260825, 22235, 423, 9, 23, "Print",ExpressionUUID->"6074c23c-5d5d-41ea-b3ee-bbd285b73ebc"],
Cell[1261251, 22246, 421, 9, 23, "Print",ExpressionUUID->"67a2bfd8-3841-410f-8081-7a047b9b9373"],
Cell[1261675, 22257, 421, 9, 23, "Print",ExpressionUUID->"c7bd69cc-9499-44f7-aeb0-cf68ed3a2db0"],
Cell[1262099, 22268, 421, 9, 23, "Print",ExpressionUUID->"2a49ee28-821d-4291-bf0f-12a452226907"],
Cell[1262523, 22279, 421, 9, 23, "Print",ExpressionUUID->"111e4e41-0945-4c43-a512-6f5b7ddfa974"],
Cell[1262947, 22290, 423, 9, 23, "Print",ExpressionUUID->"c7f5791a-b7ac-464a-aa8d-90db8e8cffab"],
Cell[1263373, 22301, 423, 9, 23, "Print",ExpressionUUID->"d0270124-c986-481f-a5cd-0682ecc6294c"],
Cell[1263799, 22312, 420, 9, 23, "Print",ExpressionUUID->"c7d19296-2f65-42c6-b9fc-a3b71a75a497"]
}, Open  ]],
Cell[1264234, 22324, 82791, 1569, 443, "Output",ExpressionUUID->"b9c558f1-2f3c-439c-863e-20252401752b"]
}, Open  ]],
Cell[1347040, 23896, 390, 8, 35, "Text",ExpressionUUID->"b8daf635-2267-42e8-825c-ddd9aaea332a"]
}, Closed]],
Cell[1347445, 23907, 384, 7, 53, "Section",ExpressionUUID->"08ff3b4b-5d50-4c64-bd86-a13488ec023b"]
}, Open  ]]
}
]
*)

